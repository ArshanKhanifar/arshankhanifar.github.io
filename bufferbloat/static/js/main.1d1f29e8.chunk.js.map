{"version":3,"sources":["serviceWorker.js","samples/hello_world_sample.js","samples/multiple_urls_sample.js","samples/single_stream_sample.js","samples/ping_sample.js","samples/highcharts_sample.js","utilities/colours.js","components/ping_chart.js","components/download_chart.js","app.js","samples/download_speed_chart_sample.js","index.js"],"names":["Boolean","window","location","hostname","match","Component","DEFAULT_COLOURS","PingChart","props","chart_options","chart","zoomType","animation","duration","title","text","subtitle","undefined","document","ontouchstart","xAxis","type","yAxis","gridLineWidth","legend","enabled","plotOptions","area","marker","radius","lineWidth","states","hover","threshold","series","chartComponent","React","createRef","total_points","stopped","ref","this","highcharts","Highcharts","options","current","addPoint","Date","now","Math","random","prevProps","prevState","snapshot","data","length","last_point","slice","pop","measuring","id","time","add_the_same_point_to_last_series","latency","addSeries","name","color","console","log","fetch","then","res","json","setData","redraw","DownloadChart","height","tooltip","headerFormat","pointFormat","tickInterval","categories","floating","width","min","max","tickAmount","reserveSpace","rotation","x","y","labels","stacking","color_id","Card","Body","Title","datum","parseFloat","rate","toFixed","DIRECTION","wait","ms","Promise","resolve","setTimeout","App","state","started","paused","next_test","download_measurements","latency_data","ping_timer","populate_tests","reset_abort_controller","controller","AbortController","Navbar","bg","Brand","href","Container","Row","Col","lg","Button","onClick","test_control","bind","restart_tests","xs","md","latest_measurement","latest_bw_measurement","Object","keys","map","key","format_title","measurements","num_tries","setState","abort","stop_ping","tests","ping","run_scenarios","clearTimeout","_make_array","direction","file_size","Array","fill","r","concat","scenario","push","run_scenario","url","BASE_URL","DOWN_ENDPOINT","download","collect_data","organize","last_item","key_name","bytes","streams","signal","requests","req","start","all","t","finish","rates","total_rate","convert_to_mbps","reduce","a","b","log_rate","downloading","capture_latency_plot_data","capture_latency_with_download_measurement","sync_state_data","interval","end","record_latency","CONFIG","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d1f29e8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\n\nexport default class HelloWorldSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\n\nexport default class MultipleUrlsSample extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.startDownloadMultipleURLs.bind(this)}>multiple URLs!</button>\n      </div>\n    );\n  }\n\n  convertToMbps(r) {\n    return r*1000/(1<<20)*8;\n  }\n\n  logRate(r) {\n    console.log(`${this.convertToMbps(r).toFixed(2)}Mbps`);\n  }\n\n  async startDownloadMultipleURLs() {\n    let urls = [\n      \"https://worker.arshankhanifar.workers.dev/hey/down\",\n      \"https://speed.cloudflare.com/__down\"\n    ];\n    const bytes = 1 << (20);\n    await this.downloadFromMultipleUrls(bytes, urls);\n  }\n\n  async downloadFromMultipleUrls (bytes, urls) {\n    let requests = urls.map(url => {return {url: url} })\n      .map((req) => {\n        req.start = Date.now();\n        req.fetch = fetch(`${req.url}?bytes=${bytes}`);\n        return req;\n      });\n    await Promise.all(requests.map(req => req.fetch.then(res => res.text().then(t => {\n      req.finish = Date.now();\n    }))));\n    let rates = requests.map(r=>(bytes)/(r.finish - r.start));\n    let total_rate = rates.reduce((a, b) => a + b);\n    this.logRate(total_rate);\n    //return total_rate;\n  }\n\n}\n","import React, {Component} from 'react';\n\n\nexport default class SingleStreamSample extends Component {\n  static get CONFIG() {\n    return \"arshan\";\n    return \"cloudflare\";\n  }\n\n  static get BASE_URL() {\n    return (this.CONFIG === \"arshan\") ?\n      \"https://worker.arshankhanifar.workers.dev\":\n      \"https://speed.cloudflare.com\";\n  }\n  static get DOWN_ENDPOINT() {\n    return (this.CONFIG === \"arshan\") ?\n      \"/hello/down\":\n      \"__down\";\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.startDownload.bind(this)}>click me!</button>\n      </div>\n    );\n  }\n\n  convertToMbps(r) {\n    return r*1000/(1<<20)*8;\n  }\n\n  logRate(r) {\n    console.log(`${this.convertToMbps(r).toFixed(2)}Mbps`);\n  }\n\n  async download(bytes, streams, url) {\n    let requests = Array(streams)\n      .fill(0)\n      .map(r => {return {}})\n      .map((req) => {\n        req.start = Date.now();\n        req.fetch = fetch(`${url}?bytes=${bytes}`);\n        return req;\n      });\n    await Promise.all(requests.map(req => req.fetch.then(res => res.text().then(t => {\n      req.finish = Date.now();\n    }))));\n    let rates = requests.map(r=>(bytes)/(r.finish - r.start));\n    let total_rate = rates.reduce((a, b) => a + b);\n    this.logRate(total_rate);\n    return total_rate;\n  }\n\n  async startDownload() {\n    let url = `${SingleStreamSample.BASE_URL}/${SingleStreamSample.DOWN_ENDPOINT}`;\n    let test = async (bytes, streams, n) => {\n      let rates = [];\n      for (let i = 0; i < n; i++ ) {\n        rates.push(await this.download(bytes, streams, url));\n      }\n      console.log(`Avg: ${this.convertToMbps(rates.reduce((a, b) => a + b)/rates.length).toFixed(2)}Mbps`)\n    };\n    const bytes = 1 << (24); // 16MB\n    await test(bytes, 6, 1);\n    //await test(bytes, 2, 20);\n  }\n}\n","import React, {Component} from 'react';\nimport Chart from 'chart.js';\nimport './ping_sample.scss';\n\n\nconst INTERVAL_MS = 400;\n\n\nexport default class PingSample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      measuring: false,\n      latest_measurement: 0\n    };\n    this.timer = null;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>my chart</h1>\n        <canvas id=\"myChart\" width=\"400\" height=\"400\"/>\n        <br/>\n        <button onClick={this.start.bind(this)}>{this.state.measuring ? 'Pause' : 'Start'}</button>\n        <br/>\n        <span>latency: {this.state.latest_measurement}</span>\n      </div>\n    );\n  }\n\n  start() {\n    if (this.state.measuring) {\n      clearTimeout(this.timer);\n    } else {\n      this.measure(INTERVAL_MS);\n    }\n    this.setState({\n      measuring: !this.state.measuring\n    });\n  }\n\n  measure(interval) {\n    let start = Date.now();\n    fetch(\"https://api.github.com/users/arshankhanifar\")\n      .then(res => res.json())\n      .then(res => {\n        let end = Date.now();\n        console.log(`latency: ${end - start}ms`);\n        let latency = end - start;\n        this.setState({\n          latest_measurement: latency\n        });\n        this.addChartPoint(latency, this.chart.data.labels.length + 1);\n\n      });\n    this.timer = setTimeout(() => this.measure(interval), interval);\n  }\n\n  triggerAddPoint() {\n    this.addChartPoint(Math.random()*10,2);\n  }\n\n  addChartPoint(y, x) {\n    console.log(this.chart.data);\n    this.chart.data.datasets[0].data.push(y);\n    this.chart.data.labels.push(x);\n    this.chart.update();\n  }\n\n  componentDidMount() {\n    this.setState({\n      latest_measurement: 0\n    });\n    this.chart = this.loadChart();\n  }\n\n  loadChart() {\n    var ctx = document.getElementById('myChart').getContext('2d');\n    return new Chart(ctx, {\n      type: 'line',\n      data: {\n        datasets: [{\n          label: \"latency\",\n          backgroundColor: 'rgba(33, 150, 243, 0.8)',\n          data: []\n        }],\n        labels: []\n      },\n      options: {\n        responsive: false,\n        scales: {\n          yAxes: [{\n            ticks: {\n              min: 0\n            }\n          }],\n          xAxes: [{\n            ticks: {\n              min: '1'\n            }\n          }]\n        }\n      }\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n\nexport default class HighChartsSample extends Component {\n\n  load_chart_options() {\n    return {\n      chart: {\n        zoomType: 'x'\n      },\n      title: {\n        text: 'USD to EUR exchange rate over time'\n      },\n      subtitle: {\n        text: document.ontouchstart === undefined ?\n          'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: 'Exchange rate'\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      plotOptions: {\n        area: {\n          //fillColor: {\n          //  linearGradient: {\n          //    x1: 0,\n          //    y1: 0,\n          //    x2: 0,\n          //    y2: 1\n          //  },\n          //  stops: [\n          //    [0, Highcharts.getOptions().colors[0]],\n          //    [1, Highcharts.color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]\n          //  ]\n          //},\n          marker: {\n            radius: 2\n          },\n          lineWidth: 1,\n          states: {\n            hover: {\n              lineWidth: 1\n            }\n          },\n          threshold: null\n        }\n      },\n      series: [{\n        type: 'area',\n        name: 'series a',\n        data: []\n      },{\n        type: 'area',\n        name: 'series b',\n        data: []\n      }]\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col>\n              Hello, World!\n              <HighchartsReact\n                ref={this.chartComponent}\n                highcharts={Highcharts}\n                options={this.load_chart_options()}/>\n            </Col>\n          </Row>\n          <Row>\n            <Button onClick={this.redrawChart.bind(this)}>Redraw</Button> {' '}\n            <Button onClick={this.addPoint.bind(this)}>Add Point</Button> {' '}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  addPoint() {\n    const chart = this.chartComponent.current.chart;\n    chart.series[0].addPoint([1514605600000, 2]);\n  }\n\n  redrawChart() {\n    const chart = this.chartComponent.current.chart;\n    chart.redraw();\n  }\n\n  componentDidMount() {\n    const chart = this.chartComponent.current.chart;\n    fetch('https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/usdeur.json')\n      .then(res => res.json())\n      .then(data => {\n        console.log(this.chartComponent);\n        console.log('data0,100', data.splice(0,100));\n        console.log('data100,200', data.splice(100,100));\n        console.log('data200,300', data.splice(200,100));\n\n        chart.addSeries({\n          type: 'area',\n          name: 'series a',\n          //data: data.splice(0,600)\n          data: data\n        });\n        chart.addSeries({\n          type: 'area',\n          name: 'series b',\n          data: data.splice(100,100)\n        });\n        chart.addSeries({\n          type: 'area',\n          name: 'series c',\n          data: data.splice(200,100)\n        });\n        chart.redraw();\n      })\n  }\n}\n","export const DEFAULT_COLOURS = [ '#0d233a', '#2f7ed8', '#8bbc21', '#910000', '#1aadce',\n  '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];\n\n","import React, {Component} from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport Button from \"react-bootstrap/Button\";\nimport {DEFAULT_COLOURS} from \"../utilities/colours\";\n\nexport default class PingChart extends Component {\n  chart_options = {\n    chart: {\n      zoomType: 'x',\n      animation: {\n        duration: 100\n      }\n    },\n    title: {\n      text: 'Latency'\n    },\n    subtitle: {\n      text: document.ontouchstart === undefined ?\n        'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: 'Ping(ms)'\n      },\n      gridLineWidth: 0,\n    },\n    legend: {\n      enabled: false\n    },\n    plotOptions: {\n      area: {\n        marker: {\n          radius: 2\n        },\n        lineWidth: 1,\n        states: {\n          hover: {\n            lineWidth: 1\n          }\n        },\n        threshold: null\n      }\n    },\n\n    series: []\n  };\n\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n    this.total_points = 0;\n    this.stopped = false;\n\n  }\n\n  render() {\n    return (\n      <>\n        <HighchartsReact\n          ref={this.chartComponent}\n          highcharts={Highcharts}\n          options={this.chart_options}/>\n        <br/>\n\n      </>\n    );\n    // add this for testing\n    // <Button onClick={this.add_point.bind(this)}>Add Point</Button>\n  }\n\n  add_point() {\n    const chart = this.chartComponent.current.chart;\n    chart.series[0].addPoint([Date.now(), 0.75 + 0.25 * Math.random()]);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const chart = this.chartComponent.current.chart;\n    if (!prevProps.data) {\n      return;\n    }\n    if (this.total_points === prevProps.data.length) {\n      return;\n    }\n    const last_point = prevProps.data.slice(-1).pop();\n    if (!last_point) {\n      return;\n    }\n\n    let measuring = last_point.id === 0 || last_point.id < 0;\n    let time = Date.now();\n    if (chart.series.length === last_point.id || last_point.id < 0 && !this.stopped) {\n      this.add_the_same_point_to_last_series(time, last_point.latency);\n      chart.addSeries({\n        type: 'area',\n        name: 'latency',\n        data: [],\n        color: measuring ? 'rgb(120,120,120)' : DEFAULT_COLOURS[last_point.id]\n      });\n      if (last_point.id < 0) {\n        this.stopped = true;\n      }\n    }\n    this.total_points += 1;\n    console.log('last_point.id', last_point.id);\n    chart.series[chart.series.length - 1].addPoint([time, last_point.latency]);\n  }\n  add_the_same_point_to_last_series(time, latency) {\n    // just for prettiness\n    const chart = this.chartComponent.current.chart;\n    if (chart.series.length === 0) {\n      return\n    }\n    chart.series[chart.series.length - 1].addPoint([time, latency]);\n  }\n\n\n  loadSampleData() {\n    const chart = this.chartComponent.current.chart;\n    fetch('https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/usdeur.json')\n      .then(res => res.json())\n      .then(data => {\n        this.chart.series[0].setData(data);\n        this.chart.redraw();\n      })\n  }\n\n  componentDidMount() {\n  }\n}\n","import React, {Component} from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport {DEFAULT_COLOURS} from \"../utilities/colours\";\n\nexport default class DownloadChart extends Component {\n  chart_options = {\n    chart: {\n      type: 'scatter',\n      height: 150\n    },\n    tooltip: {\n      headerFormat: \"\",\n      pointFormat: \"{series.name}: <b>{point.x}</b><br/>\"\n    },\n    xAxis: {\n      tickInterval: 5,\n      categories: []\n    },\n    title: {\n      floating: true,\n      text: \"\"\n    },\n    yAxis: {\n      width: 0,\n      min: 0.7,\n      max: 1.8,\n      gridLineWidth: 0,\n      tickAmount: 1,\n      title: {\n        reserveSpace: false,\n        text: 'Download Speed',\n        rotation: 0,\n        x: 40,\n        y: -15,\n      },\n      labels: {\n        enabled: false\n      }\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        stacking: 'normal'\n      }\n    },\n    series: [{\n      name: 'Download Speed',\n      data: [],\n      color: 'red'\n    }]\n  };\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n    this.chart_options.series[0].color = DEFAULT_COLOURS[this.props.color_id];\n  };\n\n  render() {\n    return (\n      <>\n        <Card>\n          <Card.Body>\n            <Card.Title>{this.props.title}</Card.Title>\n            <HighchartsReact\n              ref={this.chartComponent}\n              highcharts={Highcharts}\n              options={this.chart_options}/>\n          </Card.Body>\n        </Card>\n      </>\n    );\n    // add this for testing\n    // <Button onClick={this.add_point.bind(this)}>Add Point</Button>\n  }\n\n  add_point() {\n    const chart = this.chartComponent.current.chart;\n    chart.series[0].addPoint([Date.now(), 0.75 + 0.25 * Math.random()]);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!prevProps.data) {\n      return;\n    }\n    const datum = prevProps.data.slice(-1).pop();\n    if (!datum) {\n      return;\n    }\n    const chart = this.chartComponent.current.chart;\n    if (chart.series[0].data.length === prevProps.data.length) {\n      return;\n    }\n    chart.series[0].addPoint([parseFloat(datum.rate.toFixed(2)), 1]);\n  }\n\n  componentDidMount() {\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport PingChart from \"./components/ping_chart\";\nimport DownloadChart from \"./components/download_chart\";\nimport Highcharts from 'highcharts';\n\nconst INTERVAL_MS = 200;\nconst PADDING_MS = 10000;\nconst DIRECTION = {\n  IDLE: 'idle',\n  DOWNLOAD: 'down',\n  UPLOAD: 'up'\n};\n\nfunction wait(ms) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve()\n    }, ms);\n  })\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      paused: true,\n      next_test: 0,\n      download_measurements: {},\n      data: [],\n      latency_data: []\n    };\n    this.ping_timer = null;\n    this.populate_tests();\n    this.reset_abort_controller();\n    console.log(Highcharts);\n  }\n\n  reset_abort_controller() {\n    this.controller = new AbortController();\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col lg={12}>\n              <h1>The Khanifar Bufferbloat Test</h1>\n              <p>Best buffer bloat test in the history of mankind, ever™</p>\n            </Col>\n            <Col lg={12}>\n              <PingChart data={this.state.latency_data}/>\n            </Col>\n            <Col lg={12}>\n              <Button onClick={this.test_control.bind(this)}>{this.state.started ? (this.state.paused ? 'Continue' : 'Pause') : 'Start'}</Button> {' '}\n              <Button onClick={this.restart_tests.bind(this)}>Restart Test</Button>\n            </Col>\n            <Col xs={12} md={6}>\n              <span><strong>Download</strong></span>\n            </Col>\n            <Col xs={12} md={6}>\n              <span><strong>Upload</strong></span>\n            </Col>\n            <Col xs={6} md={4}>\n              <span><strong>latency:</strong> {this.state.latest_measurement}</span>\n              <br/>\n              <span><strong>bw:</strong> {this.state.latest_bw_measurement}Mbps</span>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12} md={6}>\n              <span><strong>Download Measurements</strong></span>\n              {Object.keys(this.state.download_measurements).map(id => (\n                <DownloadChart key={id}\n                               data={this.state.download_measurements[id]}\n                               color_id={id}\n                               title={this.format_title(this.state.download_measurements[id])}\n                />\n              ))}\n            </Col>\n            <Col xs={12} md={6}>\n              <span><strong>Upload Measurements</strong></span>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  format_title(measurements) {\n    return `${measurements[0].title} Download: (${measurements.length}/${measurements[0].num_tries})`\n  }\n\n  async test_control() {\n    if (!this.state.started) {\n      await this.setState({\n        started: true,\n        paused: false\n      });\n    } else {\n      await this.setState({\n        paused: !this.state.paused\n      });\n    }\n    if (this.state.paused) {\n      this.controller.abort();\n      this.reset_abort_controller();\n      await wait(PADDING_MS);\n      this.stop_ping();\n    } else {\n      if (this.state.next_test !== this.tests.length) {\n        this.ping(INTERVAL_MS);\n      }\n      await wait(PADDING_MS);\n      this.run_scenarios();\n    }\n  }\n\n  stop_ping() {\n    clearTimeout(this.ping_timer);\n  }\n\n  restart_tests() {\n    this.setState({\n      started: false,\n      paused: true,\n    });\n  }\n\n  populate_tests() {\n    let id = 0;\n    function _make_array(num_tries, direction, file_size, title) {\n      id += 1;\n      return new Array(num_tries).fill(0).map(r => {\n        return {\n          direction: direction,\n          file_size: file_size,\n          title: title,\n          id: id,\n          num_tries: num_tries\n        };\n      });\n    }\n    this.tests =\n      [].concat(\n        _make_array(10, DIRECTION.DOWNLOAD, ((1<<10) * 1000), '100KB') // 100KBs\n      ).concat(\n        _make_array(10, DIRECTION.DOWNLOAD, (1<<20), '1MB')\n      ).concat(\n        _make_array(10, DIRECTION.DOWNLOAD, (1<<20) * 10, '10MB')\n      );\n  }\n\n  async run_scenarios() {\n    if (this.state.next_test === this.tests.length) {\n      console.log('Scenarios exhausted.', this.state.data);\n      setTimeout(()=> {\n        this.stop_ping();\n      }, PADDING_MS);\n      return;\n    }\n    let scenario = this.tests[this.state.next_test];\n    this.state.data.push({...scenario});\n    await this.setState({\n      data: this.state.data\n    });\n    try {\n      console.log(`Running scenario: ${this.state.next_test}`);\n      await this.run_scenario(scenario);\n      await this.setState({\n        next_test: this.state.next_test + 1\n      });\n      this.run_scenarios();\n    } catch (e) {\n      console.log(e);\n      this.state.data.pop();\n      this.setState({\n        data: this.state.data\n      });\n      console.log(`Scenario: ${this.state.next_test} was canceled.`);\n    }\n  }\n\n  async run_scenario(scenario) {\n    let url = `${App.BASE_URL}/${App.DOWN_ENDPOINT}`;\n    let time = Date.now();\n    let rate = await this.download(scenario.file_size, 1, url);\n    this.collect_data(rate, time);\n    console.log(`download was completed, rate: ${rate.toFixed(2)}Mbps`)\n  }\n\n  collect_data(rate, time) {\n    this.state.data[this.state.next_test].rate = rate;\n    this.state.data[this.state.next_test].time = time;\n    this.setState({\n      data: this.state.data\n    });\n    this.organize();\n  }\n\n  organize() {\n    let last_item = this.state.data.slice(-1).pop();\n    let key_name = `${last_item.id}`;\n    if (last_item.direction === DIRECTION.DOWNLOAD) {\n      let download_measurements = this.state.download_measurements;\n      if (!(key_name in download_measurements)) {\n        download_measurements[key_name] = [];\n      }\n      download_measurements[key_name].push(last_item);\n    }\n  }\n\n  async download(bytes, streams, url) {\n    let signal = this.controller.signal;\n    let requests = Array(streams)\n      .fill(0)\n      .map(r => new Object())\n      .map((req) => {\n        req.start = Date.now();\n        req.fetch = fetch(`${url}?bytes=${bytes}`, {signal});\n        return req;\n      });\n    await Promise.all(requests.map(req => req.fetch.then(res => res.text().then(t => {\n      req.finish = Date.now();\n    }))));\n    let rates = requests.map(r=>(bytes)/(r.finish - r.start));\n    let total_rate = this.convert_to_mbps(rates.reduce((a, b) => a + b));\n    this.setState({\n      latest_bw_measurement: total_rate\n    });\n    this.log_rate(total_rate);\n    return total_rate;\n  }\n\n  async record_latency(latency) {\n    if (this.state.paused === this.state.next_test) {\n      return;\n    }\n    let downloading = this.state.data.length !== this.state.next_test;\n    this.capture_latency_plot_data(latency, downloading);\n    this.capture_latency_with_download_measurement(latency, downloading);\n    await this.sync_state_data();\n  }\n\n  capture_latency_plot_data(latency, downloading) {\n    let id = null;\n    // TODO: This whole id specification for series is very messy.\n    if (downloading) {\n      id = this.state.data[this.state.next_test].id;\n    } else {\n      if (this.state.next_test) {\n        id = -1;\n      } else {\n        id = 0;\n      }\n    }\n    this.state.latency_data.push({\n      id: id,\n      latency: latency\n    });\n  }\n\n  capture_latency_with_download_measurement(latency, downloading) {\n    if (!downloading) {\n      return;\n    }\n    if (! ('latency' in this.state.data[this.state.next_test])) {\n      this.state.data[this.state.next_test].latency = [];\n    }\n    this.state.data[this.state.next_test].latency.push(latency);\n  }\n\n  async sync_state_data() {\n    await this.setState({\n      latency_data: this.state.latency_data,\n      data: this.state.data\n    });\n  }\n\n  async ping(interval) {\n    let start = Date.now();\n    fetch(\"https://api.github.com/users/arshankhanifar\")\n      .then(res => res.json())\n      .then(async res => {\n        let end = Date.now();\n        let latency = end - start;\n        console.log('latency', latency);\n        this.setState({\n          latest_measurement: latency\n        });\n        await this.record_latency(latency);\n      });\n    this.ping_timer = setTimeout(() => this.ping(interval), interval);\n  }\n\n  componentDidMount() {\n    this.setState({\n      latest_measurement: 0,\n      latest_bw_measurement: 0,\n    });\n  }\n\n  static get CONFIG() {\n    //return \"arshan\";\n    return \"cloudflare\";\n  }\n\n  static get BASE_URL() {\n    return (this.CONFIG === \"arshan\") ?\n      \"https://worker.arshankhanifar.workers.dev\":\n      \"https://speed.cloudflare.com\";\n  }\n  static get DOWN_ENDPOINT() {\n    return (this.CONFIG === \"arshan\") ?\n      \"/hello/down\":\n      \"__down\";\n  }\n\n  convert_to_mbps(r) {\n    return r*1000/(1<<20)*8;\n  }\n\n  log_rate(r) {\n    return;\n    console.log(`${this.convert_to_mbps(r).toFixed(2)}Mbps`);\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n\nexport default class DownloadSpeedChartSample extends Component {\n\n  load_chart_options() {\n    return {\n      chart: {\n        type: 'scatter',\n        height: 150\n      },\n      title: {\n        text: 'Stacked bar chart'\n      },\n      tooltip: {\n        headerFormat: \"\",\n        pointFormat: \"{series.name}: <b>{point.x}</b><br/>\"\n      },\n      xAxis: {\n        tickInterval: 5,\n        categories: []\n      },\n      yAxis: {\n        min: 0.5,\n        max: 1.5,\n        gridLineWidth: 0,\n        tickAmount: 1,\n        title: {\n          text: 'Download speed',\n          rotation: 0,\n        },\n        labels: {\n          enabled: false\n        }\n      },\n      legend: {\n        enabled: false,\n      },\n      plotOptions: {\n        series: {\n          stacking: 'normal'\n        }\n      },\n      series: [{\n        name: 'John',\n        data: [\n          [56.12, 1],\n          [52.12, 1],\n          [34.12, 1],\n          [61.12, 1],\n          [53.12, 1],\n        ]\n      }]\n    }\n\n  }\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col>\n              Hello, World!\n              <Card>\n                <Card.Body>\n                  <HighchartsReact\n                    ref={this.chartComponent}\n                    highcharts={Highcharts}\n                    options={this.load_chart_options()}/>\n\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Button onClick={this.redrawChart.bind(this)}>Redraw</Button> {' '}\n            <Button onClick={this.addPoint.bind(this)}>Add Point</Button> {' '}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  addPoint() {\n    const chart = this.chartComponent.current.chart;\n    chart.series[0].addPoint([1514605600000, 2]);\n  }\n\n  redrawChart() {\n    const chart = this.chartComponent.current.chart;\n    chart.redraw();\n  }\n\n  componentDidMount() {\n    const chart = this.chartComponent.current.chart;\n    return;\n    fetch('https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/usdeur.json')\n      .then(res => res.json())\n      .then(data => {\n        console.log(this.chartComponent);\n        console.log('data', data);\n        chart.series[0].setData(data);\n        chart.redraw();\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HelloWorldSample from \"./samples/hello_world_sample\";\nimport MultipleUrlsSample from \"./samples/multiple_urls_sample\";\nimport SingleStreamSample from \"./samples/single_stream_sample\";\nimport PingSample from \"./samples/ping_sample\";\nimport HighChartsSample from \"./samples/highcharts_sample\";\nimport App from \"./app\";\nimport DownloadSpeedChartSample from \"./samples/download_speed_chart_sample\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}