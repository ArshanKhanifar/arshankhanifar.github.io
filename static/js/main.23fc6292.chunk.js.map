{"version":3,"sources":["serviceWorker.js","components/latency_stats_component.js","components/latency_box_plot.js","components/latency_stage_report.js","components/measurement_callouts.js","components/latency_results_report.js","utilities/timer.js","tools/generic_latency_collector.js","stages/stage.js","tools/latency_collector_provider.js","tools/latency_candidates.js","stages/latency_measurement_stage.js","tools/bandwidth_measurement_collector.js","stages/downlink_measurement_stage.js","stages/uplink_measurement_stage.js","pages/main_page.js","samples/box_plot_sample.js","samples/bitrate_stream_sample.js","index.js","app_configuration.js","utilities/statistics_utilities.js","components/box_plot.js"],"names":["Boolean","window","location","hostname","match","LatencyStatsComponent","props","Row","style","fontSize","fontWeight","whiteSpace","Col","sm","this","min","median","max","q1","q3","jitter","Component","LatencyBoxPlot","LatencyStageReport","Card","Body","className","md","xs","marginTop","title","data","scale","box_plot_scale","tooltip_html","stats","MeasurementCallouts","prevProps","prevState","snapshot","console","warn","update","textAlign","Object","keys","stage_data","map","k","i","stage","length","borderLeft","configuration","LatencyResultsReport","Timer","ms","Promise","resolve","setTimeout","GenericLatencyCollector","url","interval","interval_cb","done_cb","count","cancelled","fetch","then","res","text","entries","performance","getEntriesByName","perf","slice","pop","ttfb","responseStart","requestStart","AppConfiguration","IGNORE_TTFB_BELOW","clearResourceTimings","sleep","Stage","LatencyCollectorProvider","data_cb","PING_INTERVAL","LatencyMeasurementStage","data_callback","done_callback","NUM_MEASUREMENTS","collector","provide","start","Bandwidth_measurement_collector","measurement_callback","controller","AbortController","size","down","signal","method","body","repeat","headers","r","streams","measure_download","n","cancel","num_streams","download","Array","fill","_","req","get_http_fetch","Date","now","requests","make_requests","all","convert_to_bps","total_start","counter","total_counter","reset_counter","speed","a","log","reader","getReader","pump","read","done","value","rate_bps","abort","DownlinkMeasurementStage","bandwidth_callback","DOWNLOAD_DURATION","downloader","measurement","download_for_n_seconds","MAX_NUM_STREAMS","download_speed","UplinkMeasurementStage","uploader","measure_upload","upload_speed","MainPage","BOX_PLOT_SCALE_DEFAULT","stages_configuration","name","page_title","state","test_running","test_title","current_stage_idx","stages","add_latency_to_current_stage","bind","advance_stage","downlink_measurement","uplink_measurement","bandwidth","start_test","curr_idx","setState","run","latency","MAX_LATENCY_PLOTTED","adjust_scale","current_stage","current_data","new_data","calculate_stats","sorted","d","sort","d3","StatisticsUtilities","calculate_important_values","toFixed","Container","Header","parseInt","key","Text","Button","variant","onClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","sorted_data","BoxPlot","TRANSITION_TIME","DOT_COLOUR","chart_component","React","createRef","height","width","margin","top","right","bottom","left","get_chart_parameters","svg","current","append","attr","_svg","update_scale","_points_container","add_tooltip","draw_points","add_line_with_ticks","add_quartile_box_if_it_doesnt_exist","_tooltip","selection","rel_pos","tooltip","component","mouseover","mousemove","e","relative_dist","html","eval","mouseleave","on","x","_x_scale","selectAll","enter","set_circle_attributes","transition","duration","mid_anchor_rel","middle_anchor","_middle_anchor","x_min","x_max","make_tic","at","main_line","tick_1","tick_2","_quartile_box","add_quartile_box","_quartile_rect","_median_line","domain","range","transition_tick","tick","update_points_locations","update_line_with_ticks","update_box","datum","push","refresh_chart","is_invalid","ref"],"mappings":"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","file":"static/js/main.23fc6292.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App_old is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nexport default class LatencyStatsComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <>\n        <Row style={{fontSize: 13, fontWeight: 'bold', whiteSpace: 'nowrap'}}>\n          <Col sm={6}>\n            min: {this.props.min}ms<br/>\n            median: {this.props.median}ms<br/>\n            max: {this.props.max}ms\n          </Col>\n          <Col sm={6}>\n            25%: {this.props.q1}ms<br/>\n            75%: {this.props.q3}ms<br/>\n            jitter: {this.props.jitter}ms\n          </Col>\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport BoxPlot from \"./box_plot\";\n\nexport default class LatencyBoxPlot extends Component {\n  render() {\n    return (\n      <BoxPlot\n        {...this.props}\n      />\n    );\n  }\n\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport LatencyStatsComponent from \"./latency_stats_component\";\nimport './latency_stage_report.scss';\nimport LatencyBoxPlot from \"./latency_box_plot\";\n\n\nexport default class LatencyStageReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className={\"WBBLatencyStageReport\"}>\n          <Row>\n            <Col md={2} xs={2}>\n              <h5 style={{marginTop: 15}}>{this.props.title}</h5>\n            </Col>\n            <Col md={7} xs={10}>\n              <LatencyBoxPlot\n                data={this.props.data}\n                scale={this.props.box_plot_scale}\n                tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              />\n            </Col>\n            <Col md={3} xs={12}>\n              <LatencyStatsComponent\n                data={this.props.data}\n                {...this.props.stats}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nexport default class MeasurementCallouts extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!prevProps.data) {\n      console.warn('data empty', prevProps.data);\n    }\n    if (this.data === prevProps.data) {\n      return;\n    }\n    this.data = prevProps.data || [];\n    this.update();\n  }\n\n  render() {\n    return (\n      <>\n        <Row style={{textAlign: 'center'}}>\n          {Object.keys(this.props.stage_data).map((k, i) => {\n            const stage = this.props.stage_data[k],\n              num_stages = this.props.stage_data.length;\n            return (\n              <Col\n                sm={12/this.props.stage_data.length}\n                style={ (i !== 0) ? {borderLeft: \"1px solid black\"}: {}}>\n                <div className=\"condition\">\n                  {stage.configuration.title}\n                </div>\n                <div className=\"latency\">\n                  {\n                    stage.stats &&\n                    stage.stats.median\n                  }\n                </div>\n              </Col>\n            )\n          })}\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport MeasurementCallouts from \"./measurement_callouts\";\n\n\nexport default class LatencyResultsReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className=\"WBBLatencySummary\">\n          <Row>\n            <Col sm={12} md={7}>\n              <h4>Latency Results</h4>\n              <p>Bufferbloat is measured by comparing the latency of an Internet connection when it is unloaded to when it is \"saturated.\"</p>\n            </Col>\n            <Col sm={12} md={5}>\n              <MeasurementCallouts\n                stage_data={this.props.stage_data}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","export default class Timer {\n  static async sleep(ms) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    })\n  }\n}\n","import Timer from \"../utilities/timer\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class GenericLatencyCollector {\n  constructor(url, interval, interval_cb, done_cb, count) {\n    this.url = url;\n    this.interval = interval;\n    this.interval_cb = interval_cb;\n    this.done_cb = done_cb;\n    this.count = count;\n    this.cancelled = false;\n  }\n\n  async start() {\n    let i = 0;\n    while (i++ < this.count) {\n      await fetch(this.url).then(res => res.text());\n      let entries = performance.getEntriesByName(this.url);\n      let perf  = entries.slice(-1).pop();\n      let ttfb = perf.responseStart - perf.requestStart;\n      if (this.cancelled) {\n        return ;\n      }\n      if (ttfb < AppConfiguration.IGNORE_TTFB_BELOW) {\n        continue\n      }\n      this.interval_cb(ttfb);\n      performance.clearResourceTimings();\n      await Timer.sleep(this.interval)\n    }\n    if (this.done_cb) {\n      this.done_cb();\n    }\n  }\n\n  cancel() {\n    this.cancelled = true;\n  }\n}\n","export default class Stage {\n  async run() {\n\n  }\n}\n","import {AppConfiguration} from \"../app_configuration\";\nimport GenericLatencyCollector from \"./generic_latency_collector\";\nimport {main_candidate} from \"./latency_candidates\";\n\nexport default class LatencyCollectorProvider {\n  static provide(data_cb, done_cb, count) {\n    return new GenericLatencyCollector(\n      main_candidate,\n      AppConfiguration.PING_INTERVAL,\n      data_cb,\n      done_cb,\n      count\n    );\n  }\n}","let urls = [\n  \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2\",\n  \"https://fonts.gstatic.com/l/font?kit=KFOmCnqEu92Fr1Me4GZNCzcPK4I&skey=a0a0114a1dcab3ac&v=v20\",\n  \"https://speed.cloudflare.com/__down?bytes=0\"\n], main_candidate = urls[1];\n\nexport {main_candidate}\n","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\n\n\nexport default class LatencyMeasurementStage extends Stage {\n  NUM_MEASUREMENTS = 30;\n // NUM_MEASUREMENTS = 5;\n  constructor(data_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    super.run();\n    const collector = LatencyCollectorProvider\n      .provide(this.data_callback, this.done_callback, this.NUM_MEASUREMENTS);\n    await collector.start();\n  }\n}","import Timer from \"../utilities/timer\";\n\nexport default class Bandwidth_measurement_collector {\n  constructor(measurement_callback, done_callback) {\n    this.measurement_callback = measurement_callback || (() => null);\n    this.done_callback = done_callback || (() => null);\n    this.controller = new AbortController();\n  }\n\n  get_http_fetch(size, i, down) {\n    let signal = this.controller.signal;\n    if (down) {\n      return fetch(`https://speed${i+1}.arshankhanifar.workers.dev/hi/down?bytes=${size}`, {signal});\n    } else {\n      let url = `https://speed${i+1}.arshankhanifar.workers.dev/hi/up`;\n      return fetch(`${url}`, {...{\n          method: 'POST',\n          body: '0'.repeat(size),\n          headers: { 'content-length': size }\n        }, signal});\n    }\n  }\n\n  convert_to_bps(r) {\n    return r*1000*8;\n  }\n\n  async download(size, streams) {\n    return this.measure_download(size, streams)\n  }\n\n  async download_for_n_seconds(n, streams) {\n    const MAX_DOWNLOAD_SIZE = 500 * 1e6;\n    setTimeout(() => {this.cancel()}, n * 1000);\n    return this.measure_download(MAX_DOWNLOAD_SIZE, streams);\n  }\n\n  make_requests(num_streams, size, download) {\n    return Array(num_streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map((req, i) => {\n        req.fetch = () => this.get_http_fetch(size, i, download);\n        return req;\n      })\n  }\n\n  async measure_upload(size, streams) {\n    let start = Date.now();\n    let requests = this.make_requests(streams, size, false)\n      .map((req) => req.fetch().then(res=>res.text()));\n    await Promise.all(requests);\n    return this.convert_to_bps((size * streams)/(Date.now() - start));\n  }\n\n  async measure_download(size, streams) {\n    const window_size = 1e6,\n      total_start = Date.now();\n    let start = Date.now(),\n      counter = 0,\n      total_counter = 0;\n\n    const reset_counter = () => {\n      if (counter < window_size) {\n        return;\n      }\n      let speed = this.convert_to_bps(counter / (Date.now() - start));\n      this.measurement_callback(speed);\n      counter = 0;\n      start = Date.now();\n    };\n\n    let requests = this.make_requests(streams, size, true)\n      .map(async (req, i) => {\n        let res = null;\n        try {\n          res = await req.fetch();\n        } catch (e) {\n          console.log(`download request:${i} unsuccessful`, e);\n          return Promise.resolve();\n        }\n        const reader = res.body.getReader();\n        return new Promise(async resolve => {\n          try {\n            await pump();\n          } catch (err) {\n            resolve();\n          }\n          function pump() {\n            return reader.read().then(({ done, value }) => {\n              if (done) {\n                resolve();\n                return;\n              }\n              counter += value.length;\n              total_counter += value.length;\n              reset_counter();\n              return pump();\n            });\n          }\n        });\n      });\n    await Promise.all(requests);\n    let rate_bps = this.convert_to_bps(total_counter/(Date.now() - total_start));\n    this.done_callback(rate_bps);\n    return rate_bps;\n  }\n\n  cancel() {\n    this.controller.abort();\n  }\n}","import Stage from \"./stage\";\nimport Bandwidth_measurement_collector from \"../tools/bandwidth_measurement_collector\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class DownlinkMeasurementStage extends Stage {\n  DOWNLOAD_DURATION = 10;\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    const meas_callback = (measurement) => {\n        console.log(`realtime rate ${measurement/1e6}mbps`);\n    };\n    const downloader = new Bandwidth_measurement_collector(meas_callback);\n    let download_speed = await downloader.download_for_n_seconds(\n      this.DOWNLOAD_DURATION,\n      AppConfiguration.MAX_NUM_STREAMS\n    );\n    collector.cancel();\n    this.bandwidth_callback(download_speed);\n    this.done_callback();\n  }\n}","import Stage from \"./stage\";\nimport Bandwidth_measurement_collector from \"../tools/bandwidth_measurement_collector\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\n\n\nexport default class UplinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    const uploader = new Bandwidth_measurement_collector();\n    let upload_speed = await uploader.measure_upload(50 * 1e6, 4);\n    collector.cancel();\n    this.bandwidth_callback(upload_speed);\n    this.done_callback();\n  }\n}","import * as d3 from 'd3';\nimport React, {Component} from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport '../components/component_styles.scss';\nimport LatencyStageReport from \"../components/latency_stage_report\";\nimport LatencyResultsReport from \"../components/latency_results_report\";\nimport GenericLatencyCollector from \"../tools/generic_latency_collector\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport LatencyMeasurementStage from \"../stages/latency_measurement_stage\";\nimport DownlinkMeasurementStage from \"../stages/downlink_measurement_stage\";\nimport UplinkMeasurementStage from \"../stages/uplink_measurement_stage\";\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\n\n\nexport default class MainPage extends Component {\n  BOX_PLOT_SCALE_DEFAULT = [0, 10];\n  constructor(props) {\n    super(props);\n    this.stages_configuration = [\n      {\n        name: \"unloaded\",\n        title: \"Unloaded\",\n        page_title: \"Measuring Unloaded Latency\"\n      },\n      {\n        name: \"down\",\n        title: \"↓ Saturated\",\n        page_title: \"Measuring Latency With Downlink Saturated\"\n      },\n      {\n        name: \"up\",\n        title: \"↑ Saturated\",\n        page_title: \"Measuring Latency With Uplink Saturated\"\n      }\n    ];\n    this.state = {\n      test_running: false,\n      test_title: 'Bufferbloat Test',\n      current_stage_idx: -1,\n      stages: {},\n      box_plot_scale: this.BOX_PLOT_SCALE_DEFAULT\n    };\n    this.stages = [\n      new LatencyMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new DownlinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.downlink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new UplinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.uplink_measurement.bind(),\n        this.advance_stage.bind(this)\n      )\n    ];\n  }\n\n  downlink_measurement(bandwidth) {\n    console.log(`avg download: ${bandwidth/1e6}mbps`);\n  }\n\n  uplink_measurement(bandwidth) {\n    console.log(`avg upload: ${bandwidth/1e6}mbps`);\n  }\n\n  componentDidMount() {\n    //this.debug();\n  }\n\n  debug() {\n    this.start_test().then(()=> {});\n  }\n\n  async advance_stage() {\n    let curr_idx = this.state.current_stage_idx + 1;\n    if (curr_idx >= this.stages.length) {\n      console.log(\"boom done stages\");\n      return;\n    }\n    await this.setState({\n      current_stage_idx: curr_idx,\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          configuration: this.stages_configuration[curr_idx],\n          data: []\n        }\n      },\n      test_title: `${curr_idx + 1}/${this.stages_configuration.length} ${this.stages_configuration[curr_idx].page_title}`\n    });\n    console.log(this.state.stages);\n    this.stages[curr_idx].run();\n  }\n\n  async start_test() {\n    await this.setState({\n      test_running: true,\n    });\n    this.advance_stage();\n  }\n\n  adjust_scale(latency) {\n    if (latency > AppConfiguration.MAX_LATENCY_PLOTTED) {\n      return;\n    }\n    if (latency > this.state.box_plot_scale[1]) {\n      this.setState({\n        box_plot_scale: [0, latency]\n      })\n    }\n  }\n\n  add_latency_to_current_stage(latency) {\n    this.adjust_scale(latency);\n    let curr_idx = this.state.current_stage_idx,\n      current_stage = this.state.stages[curr_idx],\n      current_data = current_stage.data || [],\n      new_data = [...current_data, {value: latency}];\n    this.setState({\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          ...current_stage,\n          data: new_data,\n          stats: {\n            ...this.calculate_stats(new_data)\n          }\n        }\n      }\n    })\n  }\n\n  calculate_stats(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    let [q1, q3, median, min, max, std] = StatisticsUtilities\n      .calculate_important_values(sorted)\n      .map(d => d.toFixed(1));\n    return {\n      min: min,\n      max: max,\n      q1: q1,\n      q3: q3,\n      median: median,\n      jitter: std\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <p>version: 1.04</p>\n        <Col sm={12}>\n          <Container>\n            <Row style={{ marginTop: 40 }}>\n              <Col sm={12}>\n                <Card className=\"WBBCard WBBMainTestCard\">\n                  <Card.Header>\n                    <h2>{this.state.test_title}</h2>\n                  </Card.Header>\n                  { !this.state.test_running ? (\n                    <Card.Body>\n                      <Card.Text>\n                        Click below to start running the test.\n                      </Card.Text>\n                      <Button variant=\"primary\" onClick={this.start_test.bind(this)}>Start Test</Button>\n                    </Card.Body>\n                  ) : (\n                    <Card.Body>\n                      <LatencyResultsReport\n                        stage_data={this.state.stages}\n                      />\n                      {\n                        Object.keys(this.state.stages).map((i) => {\n                          let stage = this.state.stages[i];\n                          return (\n                            <>\n                              {\n                                (parseInt(i) !== 0) ?\n                                  (<Col sm={12}>\n                                    <div className={\"spacer\"}/>\n                                  </Col>)\n                                  : (<></>)\n                              }\n                              <LatencyStageReport\n                                box_plot_scale={this.state.box_plot_scale}\n                                title={stage.configuration.title}\n                                key={stage.configuration.name}\n                                data={stage.data}\n                                stats={stage.stats}\n                              />\n                            </>\n                          )\n                        })\n                      }\n                    </Card.Body>\n                  )}\n                </Card>\n              </Col>\n            </Row>\n\n          </Container>\n        </Col>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport BoxPlot from \"../components/box_plot\";\nimport LatencyBoxPlot from \"../components/latency_box_plot\";\n\n\nexport default class BoxPlotSample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [1, 2, 3, 4].map((d) => {return {value: d, time: (Date.now() + d)}})\n      //data: []\n    }\n  }\n\n  add_data() {\n    this.i = this.i || 1;\n    this.i++;\n    this.state.data.push({value:this.i});\n    this.setState({\n      data: this.state.data\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Button onClick={this.add_data.bind(this)}>Add Data!</Button>\n          </Row>\n          <Row>\n            <LatencyBoxPlot\n              tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              width={800}\n              height={100}\n              data={this.state.data}\n            />\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Bandwidth_measurement_collector from \"../tools/bandwidth_measurement_collector\";\n\n\nexport default class BitrateStreamSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n          <Button onClick={this.download.bind(this)}>download</Button>\n          <Button onClick={this.cancel.bind(this)}>cancel</Button>\n        </Container>\n      </>\n    );\n  }\n\n  async download() {\n    const meas_callback = (measurement) => {\n      console.log(`rate ${measurement/1e6}mbps`);\n    },\n    done_callback = (measurement) => {\n      console.log(`Done rate ${measurement/1e6}mbps`);\n    };\n\n    this.downloader = new Bandwidth_measurement_collector(meas_callback, done_callback)\n    const res = await this.downloader.measure_download(100*1e6, 4);\n    console.log(\"done with downloading\", res/1e6)\n  }\n\n  cancel() {\n    console.log(\"cancelled\");\n    this.downloader.cancel();\n  }\n\n  async download2() {\n    let size = 100 * 1e6;\n    //let size = 10;\n    let res = await fetch(`https://speed1.arshankhanifar.workers.dev/hi/down?bytes=${size}`);\n    const reader = res.body.getReader();\n    const window_size = 1e6;\n    let window = 0;\n\n    let start = Date.now(),\n      total_start = start;\n\n    const stream = new ReadableStream({\n      start(controller) {\n        return pump();\n        function pump() {\n          return reader.read().then(({ done, value }) => {\n            // When no more data needs to be consumed, close the stream\n            if (done) {\n              console.log(\"shits done\");\n              const total_speed = size/(Date.now() - total_start);\n              const total_speed_mbps = total_speed * 8 / 1000;\n              console.log(\"average speed:\", total_speed_mbps);\n              controller.close();\n              return;\n            }\n            // Enqueue the next data chunk into our target stream\n            window += value.length;\n            if (window > window_size) {\n              let speed = window/(Date.now() - start);\n              let speed_mbitps = speed * 8/ 1000;\n              console.log(`speed: ${speed_mbitps}mbps`);\n              window = 0;\n              start = Date.now();\n            }\n            return pump();\n          });\n        }\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from \"./pages/main_page\";\nimport BoxPlotSample from \"./samples/box_plot_sample\";\nimport BitrateStreamSample from \"./samples/bitrate_stream_sample\";\nimport LatencyBoxPlot from \"./components/latency_box_plot\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const AppConfiguration = {\n  PING_INTERVAL: 100,\n  MAX_LATENCY_PLOTTED: 200,\n  MAX_NUM_STREAMS: 10,\n  IGNORE_TTFB_BELOW: 3\n};","import * as d3 from 'd3';\n\n\nexport default class StatisticsUtilities {\n  static calculate_important_values(sorted_data) {\n    let q1 = d3.quantile(sorted_data,.25),\n      q3 = d3.quantile(sorted_data,.75),\n      median = d3.quantile(sorted_data,.5),\n      min = sorted_data[0],\n      max = sorted_data[sorted_data.length - 1],\n      std = d3.deviation(sorted_data) || 0;\n    return [q1, q3, median, min, max, std];\n  }\n}","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class BoxPlot extends Component {\n  TRANSITION_TIME = 300;\n  DOT_COLOUR = \"#4a90e2\";\n\n  constructor(props) {\n    super(props);\n    this.chart_component = React.createRef();\n    this.data = props.data || [];\n    this.height = props.height || 80;\n    this.width = props.width || 460;\n    this.scale = props.scale;\n    // eslint-disable-next-line no-template-curly-in-string\n    this.tooltip_html = this.props.tooltip_html || 'value: ${d.value}';\n\n  }\n\n  calculate_important_values(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    return StatisticsUtilities.calculate_important_values(sorted);\n  }\n\n  get_chart_parameters() {\n    const margin = {top: 10, right: 10, bottom: 10, left: 10},\n      width = this.width - margin.left - margin.right,\n      height = this.height - margin.top - margin.bottom,\n      point_position_relative_to_top = 3/4 * height,\n      middle_anchor_relative_to_top = 1/4 * height;\n\n    return [margin, width, height, point_position_relative_to_top, middle_anchor_relative_to_top];\n  }\n\n  componentDidMount() {\n    let [margin, width, height] = this.get_chart_parameters();\n\n    let svg = d3.select(this.chart_component.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    this._svg = svg;\n    let data = this.data;\n    this.update_scale(data);\n\n    this._points_container = svg.append(\"g\")\n      .attr(\"id\", \"data_points\");\n\n    this.add_tooltip();\n    this.draw_points(data);\n    this.add_line_with_ticks(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n  }\n\n  add_tooltip() {\n    this._tooltip = d3.select(this.chart_component.current)\n      .append(\"div\")\n      .style(\"opacity\", 0)\n      .attr(\"class\", \"tooltip\")\n      .style(\"border\", \"solid\")\n      .style(\"background-color\", \"white\")\n      .style(\"border-width\", \"2px\")\n      .style(\"border-radius\", \"5px\")\n      .style(\"padding\", \"5px\");\n  }\n\n  set_circle_attributes(selection) {\n    let [,,, rel_pos] = this.get_chart_parameters();\n    let tooltip = this._tooltip;\n    let component = this;\n\n    let mouseover = function(d) {\n      tooltip.style(\"opacity\", 1);\n      d3.select(this)\n        .style(\"stroke\", \"black\")\n        .style(\"opacity\", 1);\n    };\n\n    let mousemove = function(e, d) {\n      let relative_dist = d3.pointer(e, this);\n      tooltip.html(eval(\"`\" + component.tooltip_html + \"`\"))\n        .style(\"left\", (relative_dist[0]) + \"px\")\n        .style(\"top\", (relative_dist[1]) + rel_pos + \"px\");\n    };\n\n    let mouseleave = function(d) {\n      tooltip\n        .style(\"opacity\", 0);\n      d3.select(this)\n        .style(\"stroke\", \"none\")\n        .style(\"opacity\", 0.8);\n    };\n\n    selection.attr(\"cy\", () => rel_pos)\n      .attr(\"r\", 3)\n      .attr(\"fill\", this.DOT_COLOUR)\n      .on(\"mouseover\", mouseover)\n      .on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave);\n  }\n\n  draw_points(data) {\n    let x = this._x_scale;\n    let selection = this._points_container\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) => x(d.value));\n    this.set_circle_attributes(selection);\n  }\n\n  update_points_locations(data) {\n    let circles = this._points_container\n      .selectAll(\"circle\")\n      .data(data);\n\n    circles\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"cx\", d => this._x_scale(d.value));\n  }\n\n  add_line_with_ticks(data) {\n    let indicator_tick_height = 10,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale,\n      svg = this._svg;\n\n    let [,,, min, max,] = this.calculate_important_values(data);\n    let [, width,,, mid_anchor_rel] = this.get_chart_parameters();\n\n    let middle_anchor = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + mid_anchor_rel + \")\");\n\n    this._middle_anchor = middle_anchor;\n\n    let x_min = x(min) || 0,\n        x_max = x(max) || width;\n\n    this.main_line = middle_anchor.append(\"line\")\n      .attr(\"x1\", x_min)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", x_max)\n      .attr(\"y2\", 0)\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    function make_tic(at) {\n      return middle_anchor.append(\"line\")\n        .attr(\"x1\", at)\n        .attr(\"y1\", -indicator_tick_height/2)\n        .attr(\"x2\", at)\n        .attr(\"y2\", +indicator_tick_height/2)\n        .attr(\"stroke\", indicator_stroke_colour);\n    }\n\n    this.tick_1 = make_tic(x_min);\n    this.tick_2 = make_tic(x_max);\n  }\n\n  add_quartile_box_if_it_doesnt_exist(data) {\n    if (this._quartile_box || data.length < 5) {\n      return\n    }\n    this.add_quartile_box(data);\n  }\n\n  add_quartile_box(data) {\n    let indicator_box_height = 20,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale;\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n\n    this._quartile_box =  this._middle_anchor\n      .append(\"g\")\n      .attr(\"id\", \"quartile_box\");\n\n    this._quartile_rect = this._quartile_box.append(\"rect\")\n      .attr(\"x\", x(q1))\n      .attr(\"y\", -indicator_box_height/2)\n      .attr(\"height\", indicator_box_height)\n      .attr(\"width\", x(q3) - x(q1))\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    this._median_line = this._quartile_box.append(\"line\")\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n      .attr(\"y1\", -indicator_box_height/2)\n      .attr(\"y2\", +indicator_box_height/2)\n      .attr(\"stroke\", indicator_stroke_colour)\n      .attr(\"stroke-width\", 1.5);\n\n  }\n\n  update_scale(data) {\n    let [, width,] = this.get_chart_parameters();\n    if (this.props.scale) {\n      let [min, max] = this.props.scale;\n      this._x_scale = d3.scaleLinear()\n        .domain([max, min])\n        .range([width, 0]);\n      return;\n    }\n    let [,,, min, max,] = this.calculate_important_values(data);\n    this._x_scale = d3.scaleLinear()\n      .domain([max, min])\n      .range([width, 0]);\n  }\n\n  update_line_with_ticks(data) {\n    let [,,, min, max,] = this.calculate_important_values(data),\n      x = this._x_scale,\n      x_min = x(min),\n      x_max = x(max);\n    const transition_tick = (tick, x) => {\n      tick.transition()\n        .duration(this.TRANSITION_TIME)\n        .attr(\"x1\", x)\n        .attr(\"x2\", x);\n    };\n    this.main_line.transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x_min)\n      .attr(\"x2\", x_max);\n    transition_tick(this.tick_1, x_min);\n    transition_tick(this.tick_2, x_max);\n  }\n\n  update_box(data) {\n    if (!this._quartile_box) {\n      return;\n    }\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n    let x = this._x_scale;\n    this._quartile_rect\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x\", x(q1))\n      .attr(\"width\", x(q3) - x(q1));\n    this._median_line\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n  }\n\n  refresh_chart() {\n    let data = this.data;\n    this.update_scale(data);\n    this.update_points_locations(data);\n    this.draw_points(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n    this.update_line_with_ticks(data);\n    this.update_box(data);\n  }\n\n  add_point(datum) {\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  is_invalid(datum) {\n    return !datum || (datum.value > AppConfiguration.MAX_LATENCY_PLOTTED);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.data.length === prevProps.data.length) {\n      this.refresh_chart();\n      return;\n    }\n    let datum = prevProps.data.slice(-1).pop();\n    if (this.is_invalid(datum)) {\n      return;\n    }\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.chart_component}/>\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}