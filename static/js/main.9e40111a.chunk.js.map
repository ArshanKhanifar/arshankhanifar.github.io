{"version":3,"sources":["serviceWorker.js","components/latency_stats_component.js","components/latency_box_plot.js","components/latency_stage_report.js","components/measurement_callouts.js","components/latency_results_report.js","utilities/timer.js","tools/generic_latency_collector.js","stages/stage.js","tools/latency_collector_provider.js","tools/latency_candidates.js","stages/latency_measurement_stage.js","tools/bandwidth_measurement_collector.js","stages/downlink_measurement_stage.js","stages/uplink_measurement_stage.js","pages/main_page.js","samples/box_plot_sample.js","samples/bitrate_stream_sample.js","index.js","app_configuration.js","utilities/statistics_utilities.js","components/box_plot.js"],"names":["Boolean","window","location","hostname","match","LatencyStatsComponent","props","data","sorted","this","map","d","value","sort","d3","StatisticsUtilities","calculate_important_values","toFixed","q1","q3","median","min","max","std","setState","jitter","prevProps","prevState","snapshot","console","warn","update","state","Row","style","fontSize","fontWeight","whiteSpace","Col","sm","Component","LatencyBoxPlot","LatencyStageReport","Card","Body","className","md","xs","marginTop","title","scale","box_plot_scale","tooltip_html","MeasurementCallouts","textAlign","stages_config","s","i","length","borderRight","LatencyResultsReport","stage_data","Timer","ms","Promise","resolve","setTimeout","GenericLatencyCollector","url","interval","interval_cb","done_cb","count","cancelled","fetch","then","res","text","entries","performance","getEntriesByName","perf","slice","pop","ttfb","responseStart","requestStart","clearResourceTimings","sleep","Stage","LatencyCollectorProvider","data_cb","AppConfiguration","PING_INTERVAL","LatencyMeasurementStage","data_callback","done_callback","NUM_MEASUREMENTS","collector","provide","start","Bandwidth_measurement_collector","measurement_callback","controller","AbortController","size","down","signal","method","body","repeat","headers","r","streams","measure_download","n","cancel","num_streams","download","Array","fill","_","req","get_http_fetch","Date","now","requests","make_requests","all","convert_to_bps","total_start","counter","total_counter","reset_counter","speed","a","log","reader","getReader","pump","read","done","rate_bps","abort","DownlinkMeasurementStage","bandwidth_callback","DOWNLOAD_DURATION","downloader","measurement","download_for_n_seconds","MAX_NUM_STREAMS","download_speed","UplinkMeasurementStage","uploader","measure_upload","upload_speed","MainPage","BOX_PLOT_SCALE_DEFAULT","stages_configuration","name","page_title","test_running","test_title","current_stage_idx","stages","add_latency_to_current_stage","bind","advance_stage","downlink_measurement","uplink_measurement","bandwidth","debug","start_test","curr_idx","configuration","run","latency","MAX_LATENCY_PLOTTED","adjust_scale","current_stage","current_data","Container","Header","Object","keys","stage","parseInt","key","Text","Button","variant","onClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","sorted_data","BoxPlot","TRANSITION_TIME","DOT_COLOUR","chart_component","React","createRef","height","width","margin","top","right","bottom","left","get_chart_parameters","svg","current","append","attr","_svg","update_scale","_points_container","add_tooltip","draw_points","add_line_with_ticks","add_quartile_box_if_it_doesnt_exist","_tooltip","selection","rel_pos","tooltip","component","mouseover","mousemove","e","relative_dist","html","eval","mouseleave","on","x","_x_scale","selectAll","enter","set_circle_attributes","transition","duration","mid_anchor_rel","middle_anchor","_middle_anchor","x_min","x_max","make_tic","at","main_line","tick_1","tick_2","_quartile_box","add_quartile_box","_quartile_rect","_median_line","domain","range","transition_tick","tick","update_points_locations","update_line_with_ticks","update_box","datum","push","refresh_chart","is_invalid","ref"],"mappings":"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","file":"static/js/main.9e40111a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App_old is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as d3 from 'd3';\nimport React, {Component} from 'react';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nexport default class LatencyStatsComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.data = this.props.data;\n  }\n\n  update() {\n    let sorted = [...this.data.map(d => d.value)].sort(d3.ascending);\n    let [q1, q3, median, min, max, std] = StatisticsUtilities\n      .calculate_important_values(sorted)\n      .map(d => d.toFixed(1));\n    this.setState({\n      min: min,\n      max: max,\n      q1: q1,\n      q3: q3,\n      median: median,\n      jitter: std\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!prevProps.data) {\n      console.warn('data empty', prevProps.data);\n    }\n    if (this.data === prevProps.data) {\n      return;\n    }\n    this.data = prevProps.data || [];\n    this.update();\n  }\n\n  render() {\n    return (\n      <>\n        {this.state &&\n          (<Row style={{fontSize: 13, fontWeight: 'bold', whiteSpace: 'nowrap'}}>\n            <Col sm={6}>\n              min: {this.state.min}ms<br/>\n              median: {this.state.median}ms<br/>\n              max: {this.state.max}ms\n            </Col>\n            <Col sm={6}>\n              25%: {this.state.min}ms<br/>\n              75%: {this.state.median}ms<br/>\n              jitter: {this.state.jitter}ms\n            </Col>\n          </Row>)\n        }\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport BoxPlot from \"./box_plot\";\n\nexport default class LatencyBoxPlot extends Component {\n  render() {\n    return (\n      <BoxPlot\n        {...this.props}\n      />\n    );\n  }\n\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport LatencyStatsComponent from \"./latency_stats_component\";\nimport './latency_stage_report.scss';\nimport LatencyBoxPlot from \"./latency_box_plot\";\n\n\nexport default class LatencyStageReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className={\"WBBLatencyStageReport\"}>\n          <Row>\n            <Col md={2} xs={2}>\n              <h5 style={{marginTop: 15}}>{this.props.title}</h5>\n            </Col>\n            <Col md={7} xs={10}>\n              <LatencyBoxPlot\n                data={this.props.data}\n                scale={this.props.box_plot_scale}\n                tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              />\n            </Col>\n            <Col md={3} xs={12}>\n              <LatencyStatsComponent\n                data={this.props.data}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\n\n\nexport default class MeasurementCallouts extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <>\n        <Row style={{textAlign: 'center'}}>\n          {(this.props.stages_config || []).map((s, i) => {\n            return (\n              <Col sm={12/this.props.stages_config.length} style={{borderRight: \"1px solid black\"}}>\n                <div className=\"condition\">\n                  {s.title}\n                </div>\n                <div className=\"latency\">\n                  12.3ms\n                </div>\n              </Col>\n            )\n          })}\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport MeasurementCallouts from \"./measurement_callouts\";\n\n\nexport default class LatencyResultsReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className=\"WBBLatencySummary\">\n          <Row>\n            <Col sm={12} md={7}>\n              <h4>Latency Results</h4>\n              <p>Bufferbloat is measured by comparing the latency of an Internet connection when it is unloaded to when it is \"saturated.\"</p>\n            </Col>\n            <Col sm={12} md={5}>\n              <MeasurementCallouts\n                stage_data={this.props.stage_data}\n                stages_config={this.props.stages_config}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","export default class Timer {\n  static async sleep(ms) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    })\n  }\n}\n","import Timer from \"../utilities/timer\";\n\n\nexport default class GenericLatencyCollector {\n  constructor(url, interval, interval_cb, done_cb, count) {\n    this.url = url;\n    this.interval = interval;\n    this.interval_cb = interval_cb;\n    this.done_cb = done_cb;\n    this.count = count;\n    this.cancelled = false;\n  }\n\n  async start() {\n    let i = 0;\n    while (i++ < this.count) {\n      await fetch(this.url).then(res => res.text());\n      let entries = performance.getEntriesByName(this.url);\n      let perf  = entries.slice(-1).pop();\n      let ttfb = perf.responseStart - perf.requestStart;\n      if (this.cancelled) {\n        return ;\n      }\n      this.interval_cb(ttfb);\n      performance.clearResourceTimings();\n      await Timer.sleep(this.interval)\n    }\n    if (this.done_cb) {\n      this.done_cb();\n    }\n  }\n\n  cancel() {\n    this.cancelled = true;\n  }\n}\n","export default class Stage {\n  async run() {\n\n  }\n}\n","import {AppConfiguration} from \"../app_configuration\";\nimport GenericLatencyCollector from \"./generic_latency_collector\";\nimport {main_candidate} from \"./latency_candidates\";\n\nexport default class LatencyCollectorProvider {\n  static provide(data_cb, done_cb, count) {\n    return new GenericLatencyCollector(\n      main_candidate,\n      AppConfiguration.PING_INTERVAL,\n      data_cb,\n      done_cb,\n      count\n    );\n  }\n}","let urls = [\n  \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2\",\n  \"https://fonts.gstatic.com/l/font?kit=KFOmCnqEu92Fr1Me4GZNCzcPK4I&skey=a0a0114a1dcab3ac&v=v20\",\n  \"https://speed.cloudflare.com/__down?bytes=0\"\n], main_candidate = urls[1];\n\nexport {main_candidate}\n","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\n\n\nexport default class LatencyMeasurementStage extends Stage {\n  //NUM_MEASUREMENTS = 30;\n  NUM_MEASUREMENTS = 5;\n  constructor(data_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    super.run();\n    const collector = LatencyCollectorProvider\n      .provide(this.data_callback, this.done_callback, this.NUM_MEASUREMENTS);\n    await collector.start();\n  }\n}","import Timer from \"../utilities/timer\";\n\nexport default class Bandwidth_measurement_collector {\n  constructor(measurement_callback, done_callback) {\n    this.measurement_callback = measurement_callback || (() => null);\n    this.done_callback = done_callback || (() => null);\n    this.controller = new AbortController();\n  }\n\n  get_http_fetch(size, i, down) {\n    let signal = this.controller.signal;\n    if (down) {\n      return fetch(`https://speed${i+1}.arshankhanifar.workers.dev/hi/down?bytes=${size}`, {signal});\n    } else {\n      let url = `https://speed${i+1}.arshankhanifar.workers.dev/hi/up`;\n      return fetch(`${url}`, {...{\n          method: 'POST',\n          body: '0'.repeat(size),\n          headers: { 'content-length': size }\n        }, signal});\n    }\n  }\n\n  convert_to_bps(r) {\n    return r*1000*8;\n  }\n\n  async download(size, streams) {\n    return this.measure_download(size, streams)\n  }\n\n  async download_for_n_seconds(n, streams) {\n    const MAX_DOWNLOAD_SIZE = 500 * 1e6;\n    setTimeout(() => {this.cancel()}, n * 1000);\n    return this.measure_download(MAX_DOWNLOAD_SIZE, streams);\n  }\n\n  make_requests(num_streams, size, download) {\n    return Array(num_streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map((req, i) => {\n        req.fetch = () => this.get_http_fetch(size, i, download);\n        return req;\n      })\n  }\n\n  async measure_upload(size, streams) {\n    let start = Date.now();\n    let requests = this.make_requests(streams, size, false)\n      .map((req) => req.fetch().then(res=>res.text()));\n    await Promise.all(requests);\n    return this.convert_to_bps((size * streams)/(Date.now() - start));\n  }\n\n  async measure_download(size, streams) {\n    const window_size = 1e6,\n      total_start = Date.now();\n    let start = Date.now(),\n      counter = 0,\n      total_counter = 0;\n\n    const reset_counter = () => {\n      if (counter < window_size) {\n        return;\n      }\n      let speed = this.convert_to_bps(counter / (Date.now() - start));\n      this.measurement_callback(speed);\n      counter = 0;\n      start = Date.now();\n    };\n\n    let requests = this.make_requests(streams, size, true)\n      .map(async (req, i) => {\n        let res = null;\n        try {\n          res = await req.fetch();\n        } catch (e) {\n          console.log(`download request:${i} unsuccessful`, e);\n          return Promise.resolve();\n        }\n        const reader = res.body.getReader();\n        return new Promise(async resolve => {\n          try {\n            await pump();\n          } catch (err) {\n            resolve();\n          }\n          function pump() {\n            return reader.read().then(({ done, value }) => {\n              if (done) {\n                resolve();\n                return;\n              }\n              counter += value.length;\n              total_counter += value.length;\n              reset_counter();\n              return pump();\n            });\n          }\n        });\n      });\n    await Promise.all(requests);\n    let rate_bps = this.convert_to_bps(total_counter/(Date.now() - total_start));\n    this.done_callback(rate_bps);\n    return rate_bps;\n  }\n\n  cancel() {\n    this.controller.abort();\n  }\n}","import Stage from \"./stage\";\nimport Bandwidth_measurement_collector from \"../tools/bandwidth_measurement_collector\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class DownlinkMeasurementStage extends Stage {\n  DOWNLOAD_DURATION = 10;\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    const meas_callback = (measurement) => {\n        console.log(`realtime rate ${measurement/1e6}mbps`);\n    };\n    const downloader = new Bandwidth_measurement_collector(meas_callback);\n    let download_speed = await downloader.download_for_n_seconds(\n      this.DOWNLOAD_DURATION,\n      AppConfiguration.MAX_NUM_STREAMS\n    );\n    collector.cancel();\n    this.bandwidth_callback(download_speed);\n    this.done_callback();\n  }\n}","import Stage from \"./stage\";\nimport Bandwidth_measurement_collector from \"../tools/bandwidth_measurement_collector\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\n\n\nexport default class UplinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    const uploader = new Bandwidth_measurement_collector();\n    let upload_speed = await uploader.measure_upload(50 * 1e6, 4);\n    collector.cancel();\n    this.bandwidth_callback(upload_speed);\n    this.done_callback();\n  }\n}","import React, {Component} from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport '../components/component_styles.scss';\nimport LatencyStageReport from \"../components/latency_stage_report\";\nimport LatencyResultsReport from \"../components/latency_results_report\";\nimport GenericLatencyCollector from \"../tools/generic_latency_collector\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport LatencyMeasurementStage from \"../stages/latency_measurement_stage\";\nimport DownlinkMeasurementStage from \"../stages/downlink_measurement_stage\";\nimport UplinkMeasurementStage from \"../stages/uplink_measurement_stage\";\n\n\nexport default class MainPage extends Component {\n  BOX_PLOT_SCALE_DEFAULT = [0, 10];\n  constructor(props) {\n    super(props);\n    this.stages_configuration = [\n      {\n        name: \"unloaded\",\n        title: \"Unloaded\",\n        page_title: \"Measuring Unloaded Latency\"\n      },\n      {\n        name: \"down\",\n        title: \"↓ Saturated\",\n        page_title: \"Measuring Latency With Downlink Saturated\"\n      },\n      {\n        name: \"up\",\n        title: \"↑ Saturated\",\n        page_title: \"Measuring Latency With Uplink Saturated\"\n      }\n    ];\n    this.state = {\n      test_running: false,\n      test_title: 'Bufferbloat Test',\n      current_stage_idx: -1,\n      stages: {},\n      box_plot_scale: this.BOX_PLOT_SCALE_DEFAULT\n    };\n    this.stages = [\n      new LatencyMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new DownlinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.downlink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new UplinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.uplink_measurement.bind(),\n        this.advance_stage.bind(this)\n      )\n    ];\n  }\n\n  downlink_measurement(bandwidth) {\n    console.log(`avg download: ${bandwidth/1e6}mbps`);\n  }\n\n  uplink_measurement(bandwidth) {\n    console.log(`avg upload: ${bandwidth/1e6}mbps`);\n  }\n\n  componentDidMount() {\n    this.debug();\n  }\n\n  debug() {\n    this.start_test().then(()=> {});\n  }\n\n  async advance_stage() {\n    let curr_idx = this.state.current_stage_idx + 1;\n    if (curr_idx >= this.stages.length) {\n      console.log(\"boom done stages\");\n      return;\n    }\n    await this.setState({\n      current_stage_idx: curr_idx,\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          configuration: this.stages_configuration[curr_idx],\n          data: []\n        }\n      },\n      test_title: `${curr_idx + 1}/${this.stages_configuration.length} ${this.stages_configuration[curr_idx].page_title}`\n    });\n    console.log(this.state.stages);\n    this.stages[curr_idx].run();\n  }\n\n  async start_test() {\n    await this.setState({\n      test_running: true,\n    });\n    this.advance_stage();\n  }\n\n  adjust_scale(latency) {\n    if (latency > AppConfiguration.MAX_LATENCY_PLOTTED) {\n      return;\n    }\n    if (latency > this.state.box_plot_scale[1]) {\n      this.setState({\n        box_plot_scale: [0, latency]\n      })\n    }\n  }\n\n  add_latency_to_current_stage(latency) {\n    this.adjust_scale(latency);\n    let curr_idx = this.state.current_stage_idx,\n      current_stage = this.state.stages[curr_idx],\n      current_data = current_stage.data || [];\n    this.setState({\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          ...current_stage,\n          data: [...current_data, {value: latency}]\n        }\n      }\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <p>version: 1.03</p>\n        <Col sm={12}>\n          <Container>\n            <Row style={{ marginTop: 40 }}>\n              <Col sm={12}>\n                <Card className=\"WBBCard WBBMainTestCard\">\n                  <Card.Header>\n                    <h2>{this.state.test_title}</h2>\n                  </Card.Header>\n                  { !this.state.test_running ? (\n                    <Card.Body>\n                      <Card.Text>\n                        Click below to start running the test.\n                      </Card.Text>\n                      <Button variant=\"primary\" onClick={this.start_test.bind(this)}>Start Test</Button>\n                    </Card.Body>\n                  ) : (\n                    <Card.Body>\n                      <LatencyResultsReport\n                        stage_data={this.state.stages}\n                        stages_config={this.stages_configuration}\n                      />\n                      {\n                        Object.keys(this.state.stages).map((i) => {\n                          let stage = this.state.stages[i];\n                          return (\n                            <>\n                              {\n                                (parseInt(i) !== 0) ?\n                                  (<Col sm={12}>\n                                    <div className={\"spacer\"}/>\n                                  </Col>)\n                                  : (<></>)\n                              }\n                              <LatencyStageReport\n                                box_plot_scale={this.state.box_plot_scale}\n                                title={stage.configuration.title}\n                                key={stage.configuration.name}\n                                data={stage.data}/>\n                            </>\n                          )\n                        })\n                      }\n                    </Card.Body>\n                  )}\n                </Card>\n              </Col>\n            </Row>\n\n          </Container>\n        </Col>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport BoxPlot from \"../components/box_plot\";\nimport LatencyBoxPlot from \"../components/latency_box_plot\";\n\n\nexport default class BoxPlotSample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [1, 2, 3, 4].map((d) => {return {value: d, time: (Date.now() + d)}})\n      //data: []\n    }\n  }\n\n  add_data() {\n    this.i = this.i || 1;\n    this.i++;\n    this.state.data.push({value:this.i});\n    this.setState({\n      data: this.state.data\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Button onClick={this.add_data.bind(this)}>Add Data!</Button>\n          </Row>\n          <Row>\n            <LatencyBoxPlot\n              tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              width={800}\n              height={100}\n              data={this.state.data}\n            />\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Bandwidth_measurement_collector from \"../tools/bandwidth_measurement_collector\";\n\n\nexport default class BitrateStreamSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n          <Button onClick={this.download.bind(this)}>download</Button>\n          <Button onClick={this.cancel.bind(this)}>cancel</Button>\n        </Container>\n      </>\n    );\n  }\n\n  async download() {\n    const meas_callback = (measurement) => {\n      console.log(`rate ${measurement/1e6}mbps`);\n    },\n    done_callback = (measurement) => {\n      console.log(`Done rate ${measurement/1e6}mbps`);\n    };\n\n    this.downloader = new Bandwidth_measurement_collector(meas_callback, done_callback)\n    const res = await this.downloader.measure_download(100*1e6, 4);\n    console.log(\"done with downloading\", res/1e6)\n  }\n\n  cancel() {\n    console.log(\"cancelled\");\n    this.downloader.cancel();\n  }\n\n  async download2() {\n    let size = 100 * 1e6;\n    //let size = 10;\n    let res = await fetch(`https://speed1.arshankhanifar.workers.dev/hi/down?bytes=${size}`);\n    const reader = res.body.getReader();\n    const window_size = 1e6;\n    let window = 0;\n\n    let start = Date.now(),\n      total_start = start;\n\n    const stream = new ReadableStream({\n      start(controller) {\n        return pump();\n        function pump() {\n          return reader.read().then(({ done, value }) => {\n            // When no more data needs to be consumed, close the stream\n            if (done) {\n              console.log(\"shits done\");\n              const total_speed = size/(Date.now() - total_start);\n              const total_speed_mbps = total_speed * 8 / 1000;\n              console.log(\"average speed:\", total_speed_mbps);\n              controller.close();\n              return;\n            }\n            // Enqueue the next data chunk into our target stream\n            window += value.length;\n            if (window > window_size) {\n              let speed = window/(Date.now() - start);\n              let speed_mbitps = speed * 8/ 1000;\n              console.log(`speed: ${speed_mbitps}mbps`);\n              window = 0;\n              start = Date.now();\n            }\n            return pump();\n          });\n        }\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from \"./pages/main_page\";\nimport BoxPlotSample from \"./samples/box_plot_sample\";\nimport BitrateStreamSample from \"./samples/bitrate_stream_sample\";\nimport LatencyBoxPlot from \"./components/latency_box_plot\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const AppConfiguration = {\n  PING_INTERVAL: 100,\n  MAX_LATENCY_PLOTTED: 200,\n  MAX_NUM_STREAMS: 10\n};","import * as d3 from 'd3';\n\n\nexport default class StatisticsUtilities {\n  static calculate_important_values(sorted_data) {\n    let q1 = d3.quantile(sorted_data,.25),\n      q3 = d3.quantile(sorted_data,.75),\n      median = d3.quantile(sorted_data,.5),\n      min = sorted_data[0],\n      max = sorted_data[sorted_data.length - 1],\n      std = d3.deviation(sorted_data) || 0;\n    return [q1, q3, median, min, max, std];\n  }\n}","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class BoxPlot extends Component {\n  TRANSITION_TIME = 300;\n  DOT_COLOUR = \"#4a90e2\";\n\n  constructor(props) {\n    super(props);\n    this.chart_component = React.createRef();\n    this.data = props.data || [];\n    this.height = props.height || 80;\n    this.width = props.width || 460;\n    this.scale = props.scale;\n    // eslint-disable-next-line no-template-curly-in-string\n    this.tooltip_html = this.props.tooltip_html || 'value: ${d.value}';\n\n  }\n\n  calculate_important_values(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    return StatisticsUtilities.calculate_important_values(sorted);\n  }\n\n  get_chart_parameters() {\n    const margin = {top: 10, right: 10, bottom: 10, left: 10},\n      width = this.width - margin.left - margin.right,\n      height = this.height - margin.top - margin.bottom,\n      point_position_relative_to_top = 3/4 * height,\n      middle_anchor_relative_to_top = 1/4 * height;\n\n    return [margin, width, height, point_position_relative_to_top, middle_anchor_relative_to_top];\n  }\n\n  componentDidMount() {\n    let [margin, width, height] = this.get_chart_parameters();\n\n    let svg = d3.select(this.chart_component.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    this._svg = svg;\n    let data = this.data;\n    this.update_scale(data);\n\n    this._points_container = svg.append(\"g\")\n      .attr(\"id\", \"data_points\");\n\n    this.add_tooltip();\n    this.draw_points(data);\n    this.add_line_with_ticks(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n  }\n\n  add_tooltip() {\n    this._tooltip = d3.select(this.chart_component.current)\n      .append(\"div\")\n      .style(\"opacity\", 0)\n      .attr(\"class\", \"tooltip\")\n      .style(\"border\", \"solid\")\n      .style(\"background-color\", \"white\")\n      .style(\"border-width\", \"2px\")\n      .style(\"border-radius\", \"5px\")\n      .style(\"padding\", \"5px\");\n  }\n\n  set_circle_attributes(selection) {\n    let [,,, rel_pos] = this.get_chart_parameters();\n    let tooltip = this._tooltip;\n    let component = this;\n\n    let mouseover = function(d) {\n      tooltip.style(\"opacity\", 1);\n      d3.select(this)\n        .style(\"stroke\", \"black\")\n        .style(\"opacity\", 1);\n    };\n\n    let mousemove = function(e, d) {\n      let relative_dist = d3.pointer(e, this);\n      tooltip.html(eval(\"`\" + component.tooltip_html + \"`\"))\n        .style(\"left\", (relative_dist[0]) + \"px\")\n        .style(\"top\", (relative_dist[1]) + rel_pos + \"px\");\n    };\n\n    let mouseleave = function(d) {\n      tooltip\n        .style(\"opacity\", 0);\n      d3.select(this)\n        .style(\"stroke\", \"none\")\n        .style(\"opacity\", 0.8);\n    };\n\n    selection.attr(\"cy\", () => rel_pos)\n      .attr(\"r\", 3)\n      .attr(\"fill\", this.DOT_COLOUR)\n      .on(\"mouseover\", mouseover)\n      .on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave);\n  }\n\n  draw_points(data) {\n    let x = this._x_scale;\n    let selection = this._points_container\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) => x(d.value));\n    this.set_circle_attributes(selection);\n  }\n\n  update_points_locations(data) {\n    let circles = this._points_container\n      .selectAll(\"circle\")\n      .data(data);\n\n    circles\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"cx\", d => this._x_scale(d.value));\n  }\n\n  add_line_with_ticks(data) {\n    let indicator_tick_height = 10,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale,\n      svg = this._svg;\n\n    let [,,, min, max,] = this.calculate_important_values(data);\n    let [, width,,, mid_anchor_rel] = this.get_chart_parameters();\n\n    let middle_anchor = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + mid_anchor_rel + \")\");\n\n    this._middle_anchor = middle_anchor;\n\n    let x_min = x(min) || 0,\n        x_max = x(max) || width;\n\n    this.main_line = middle_anchor.append(\"line\")\n      .attr(\"x1\", x_min)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", x_max)\n      .attr(\"y2\", 0)\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    function make_tic(at) {\n      return middle_anchor.append(\"line\")\n        .attr(\"x1\", at)\n        .attr(\"y1\", -indicator_tick_height/2)\n        .attr(\"x2\", at)\n        .attr(\"y2\", +indicator_tick_height/2)\n        .attr(\"stroke\", indicator_stroke_colour);\n    }\n\n    this.tick_1 = make_tic(x_min);\n    this.tick_2 = make_tic(x_max);\n  }\n\n  add_quartile_box_if_it_doesnt_exist(data) {\n    if (this._quartile_box || data.length < 5) {\n      return\n    }\n    this.add_quartile_box(data);\n  }\n\n  add_quartile_box(data) {\n    let indicator_box_height = 20,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale;\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n\n    this._quartile_box =  this._middle_anchor\n      .append(\"g\")\n      .attr(\"id\", \"quartile_box\");\n\n    this._quartile_rect = this._quartile_box.append(\"rect\")\n      .attr(\"x\", x(q1))\n      .attr(\"y\", -indicator_box_height/2)\n      .attr(\"height\", indicator_box_height)\n      .attr(\"width\", x(q3) - x(q1))\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    this._median_line = this._quartile_box.append(\"line\")\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n      .attr(\"y1\", -indicator_box_height/2)\n      .attr(\"y2\", +indicator_box_height/2)\n      .attr(\"stroke\", indicator_stroke_colour)\n      .attr(\"stroke-width\", 1.5);\n\n  }\n\n  update_scale(data) {\n    let [, width,] = this.get_chart_parameters();\n    if (this.props.scale) {\n      let [min, max] = this.props.scale;\n      this._x_scale = d3.scaleLinear()\n        .domain([max, min])\n        .range([width, 0]);\n      return;\n    }\n    let [,,, min, max,] = this.calculate_important_values(data);\n    this._x_scale = d3.scaleLinear()\n      .domain([max, min])\n      .range([width, 0]);\n  }\n\n  update_line_with_ticks(data) {\n    let [,,, min, max,] = this.calculate_important_values(data),\n      x = this._x_scale,\n      x_min = x(min),\n      x_max = x(max);\n    const transition_tick = (tick, x) => {\n      tick.transition()\n        .duration(this.TRANSITION_TIME)\n        .attr(\"x1\", x)\n        .attr(\"x2\", x);\n    };\n    this.main_line.transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x_min)\n      .attr(\"x2\", x_max);\n    transition_tick(this.tick_1, x_min);\n    transition_tick(this.tick_2, x_max);\n  }\n\n  update_box(data) {\n    if (!this._quartile_box) {\n      return;\n    }\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n    let x = this._x_scale;\n    this._quartile_rect\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x\", x(q1))\n      .attr(\"width\", x(q3) - x(q1));\n    this._median_line\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n  }\n\n  refresh_chart() {\n    let data = this.data;\n    this.update_scale(data);\n    this.update_points_locations(data);\n    this.draw_points(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n    this.update_line_with_ticks(data);\n    this.update_box(data);\n  }\n\n  add_point(datum) {\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  is_invalid(datum) {\n    return !datum || (datum.value > AppConfiguration.MAX_LATENCY_PLOTTED);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.data.length === prevProps.data.length) {\n      this.refresh_chart();\n      return;\n    }\n    let datum = prevProps.data.slice(-1).pop();\n    if (this.is_invalid(datum)) {\n      return;\n    }\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.chart_component}/>\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}