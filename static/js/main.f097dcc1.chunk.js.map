{"version":3,"sources":["serviceWorker.js","samples/hello_world_sample.js","samples/multiple_urls_sample.js","samples/single_stream_sample.js","samples/ping_sample.js","samples/highcharts_sample.js","config.js","samples/download_speed_chart_sample.js","scenarios/scenario.js","scenarios/bandwidth_scenario.js","scenarios/download_scenario.js","scenarios/wait_scenario.js","samples/scenario_sample.js","utilities/colours.js","components/ping_chart.js","components/bandwidth_chart.js","scenarios/upload_scenario.js","components/scenario_csv_manager.js","components/scenario_table.js","app.js","index.js"],"names":["Boolean","window","location","hostname","match","Component","AppConfiguration","Scenario","console","log","this","constructor","name","BandwidthScenario","num_measurements","file_size","num_streams","result_cb","counter","reset_controller","result_callback","CONFIG","controller","AbortController","measure","rate","abort","r","DownloadScenario","options","type","download","streams","url","BASE_URL","DOWN_ENDPOINT","signal","requests","Array","fill","map","Object","req","start","Date","now","fetch","Promise","all","then","res","text","t","finish","rates","convert_to_mbps","reduce","a","b","WaitScenario","duration","last_start","started","time_ms","resolve","resolver","timer","setTimeout","amount_remaining","wait","clearTimeout","ColourProvider","id","num_colours","DEFAULT_COLOURS","length","mapping","count","index","PingChart","props","chart_options","chart","zoomType","animation","title","subtitle","undefined","document","ontouchstart","xAxis","yAxis","gridLineWidth","legend","enabled","plotOptions","area","marker","radius","lineWidth","states","hover","threshold","series","series_lookup","chartComponent","React","createRef","ref","highcharts","Highcharts","coloured","current","keys","addSeries","data","color","get_colour","latency","get_series","addPoint","BandwidthChart","height","tooltip","headerFormat","pointFormat","tickInterval","categories","floating","width","min","max","tickAmount","reserveSpace","rotation","x","y","labels","stacking","series_name","color_id","Card","Body","Title","prevProps","prevState","snapshot","datum","slice","pop","parseFloat","toFixed","UploadScenario","upload","UP_ENDPOINT","method","body","repeat","headers","ScenarioCSVManager","csv_content","join","scenarios","forEach","s","row","TYPE","file","File","saveAs","e","target","files","class_lookup","fr","FileReader","onload","result","split","splice","l","attrs","concat","new_scenario","parseInt","filter","csv_imported","readAsText","Button","onClick","export_as_csv","bind","Form","Group","onChange","import_csv","label","ScenarioTable","state","normalize_scenarios","scenario_types","scenario","editing","sync_table","setState","table_updated","push","normalize_scenario","reindex_scenarios","event","value","_","i","num","size_formatted","postfix","get_formatted_measurement","update_size","size","Math","floor","Table","striped","bordered","responsive","key","controlId","Control","as","defaultValue","type_changed","colSpan","InputGroup","placeholder","aria-describedby","Append","Text","style","variant","edit","delete_row","add","MEASUREMENTS","App","reset_values","ping_timer","populate_scenarios","ping_chart","paused","current_idx","collect_bandwidth_data","Navbar","bg","Brand","href","Container","Row","Col","lg","test_control","xs","md","latest_measurement","latest_bw_measurement","format_title","measurements","direction","check_if_started_and_toggle_pause","current_scenario","pause","cancel_ping","run_scenarios","ping","PING_INTERVAL","run","error","ensure_entry_exists","warn","add_point","interval","json","end","collect_latency","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f097dcc1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App_old is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\n\nexport default class HelloWorldSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\n\nexport default class MultipleUrlsSample extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.startDownloadMultipleURLs.bind(this)}>multiple URLs!</button>\n      </div>\n    );\n  }\n\n  convertToMbps(r) {\n    return r*1000/(1<<20)*8;\n  }\n\n  logRate(r) {\n    console.log(`${this.convertToMbps(r).toFixed(2)}Mbps`);\n  }\n\n  async startDownloadMultipleURLs() {\n    let urls = [\n      \"https://worker.arshankhanifar.workers.dev/hey/down\",\n      \"https://speed.cloudflare.com/__down\"\n    ];\n    const bytes = 1 << (20);\n    await this.downloadFromMultipleUrls(bytes, urls);\n  }\n\n  async downloadFromMultipleUrls (bytes, urls) {\n    let requests = urls.map(url => {return {url: url} })\n      .map((req) => {\n        req.start = Date.now();\n        req.fetch = fetch(`${req.url}?bytes=${bytes}`);\n        return req;\n      });\n    await Promise.all(requests.map(req => req.fetch.then(res => res.text().then(t => {\n      req.finish = Date.now();\n    }))));\n    let rates = requests.map(r=>(bytes)/(r.finish - r.start));\n    let total_rate = rates.reduce((a, b) => a + b);\n    this.logRate(total_rate);\n    //return total_rate;\n  }\n\n}\n","import React, {Component} from 'react';\n\n\nexport default class SingleStreamSample extends Component {\n  static get CONFIG() {\n    return \"arshan\";\n    return \"cloudflare\";\n  }\n\n  static get BASE_URL() {\n    return (this.CONFIG === \"arshan\") ?\n      \"https://worker.arshankhanifar.workers.dev\":\n      \"https://speed.cloudflare.com\";\n  }\n  static get DOWN_ENDPOINT() {\n    return (this.CONFIG === \"arshan\") ?\n      \"/hello/down\":\n      \"__down\";\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.startDownload.bind(this)}>click me!</button>\n      </div>\n    );\n  }\n\n  convertToMbps(r) {\n    return r*1000/(1<<20)*8;\n  }\n\n  logRate(r) {\n    console.log(`${this.convertToMbps(r).toFixed(2)}Mbps`);\n  }\n\n  async download(bytes, streams, url) {\n    let requests = Array(streams)\n      .fill(0)\n      .map(r => {return {}})\n      .map((req) => {\n        req.start = Date.now();\n        req.fetch = fetch(`${url}?bytes=${bytes}`);\n        return req;\n      });\n    await Promise.all(requests.map(req => req.fetch.then(res => res.text().then(t => {\n      req.finish = Date.now();\n    }))));\n    let rates = requests.map(r=>(bytes)/(r.finish - r.start));\n    let total_rate = rates.reduce((a, b) => a + b);\n    this.logRate(total_rate);\n    return total_rate;\n  }\n\n  async startDownload() {\n    let url = `${SingleStreamSample.BASE_URL}/${SingleStreamSample.DOWN_ENDPOINT}`;\n    let test = async (bytes, streams, n) => {\n      let rates = [];\n      for (let i = 0; i < n; i++ ) {\n        rates.push(await this.download(bytes, streams, url));\n      }\n      console.log(`Avg: ${this.convertToMbps(rates.reduce((a, b) => a + b)/rates.length).toFixed(2)}Mbps`)\n    };\n    const bytes = 1 << (24); // 16MB\n    await test(bytes, 6, 1);\n    //await test(bytes, 2, 20);\n  }\n}\n","import React, {Component} from 'react';\nimport Chart from 'chart.js';\nimport './ping_sample.scss';\n\n\nconst INTERVAL_MS = 400;\n\n\nexport default class PingSample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      measuring: false,\n      latest_measurement: 0\n    };\n    this.timer = null;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>my chart</h1>\n        <canvas id=\"myChart\" width=\"400\" height=\"400\"/>\n        <br/>\n        <button onClick={this.start.bind(this)}>{this.state.measuring ? 'Pause' : 'Start'}</button>\n        <br/>\n        <span>latency: {this.state.latest_measurement}</span>\n      </div>\n    );\n  }\n\n  start() {\n    if (this.state.measuring) {\n      clearTimeout(this.timer);\n    } else {\n      this.measure(INTERVAL_MS);\n    }\n    this.setState({\n      measuring: !this.state.measuring\n    });\n  }\n\n  measure(interval) {\n    let start = Date.now();\n    fetch(\"https://api.github.com/users/arshankhanifar\")\n      .then(res => res.json())\n      .then(res => {\n        let end = Date.now();\n        console.log(`latency: ${end - start}ms`);\n        let latency = end - start;\n        this.setState({\n          latest_measurement: latency\n        });\n        this.addChartPoint(latency, this.chart.data.labels.length + 1);\n\n      });\n    this.timer = setTimeout(() => this.measure(interval), interval);\n  }\n\n  triggerAddPoint() {\n    this.addChartPoint(Math.random()*10,2);\n  }\n\n  addChartPoint(y, x) {\n    console.log(this.chart.data);\n    this.chart.data.datasets[0].data.push(y);\n    this.chart.data.labels.push(x);\n    this.chart.update();\n  }\n\n  componentDidMount() {\n    this.setState({\n      latest_measurement: 0\n    });\n    this.chart = this.loadChart();\n  }\n\n  loadChart() {\n    var ctx = document.getElementById('myChart').getContext('2d');\n    return new Chart(ctx, {\n      type: 'line',\n      data: {\n        datasets: [{\n          label: \"latency\",\n          backgroundColor: 'rgba(33, 150, 243, 0.8)',\n          data: []\n        }],\n        labels: []\n      },\n      options: {\n        responsive: false,\n        scales: {\n          yAxes: [{\n            ticks: {\n              min: 0\n            }\n          }],\n          xAxes: [{\n            ticks: {\n              min: '1'\n            }\n          }]\n        }\n      }\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n\nexport default class HighChartsSample extends Component {\n\n  load_chart_options() {\n    return {\n      chart: {\n        zoomType: 'x'\n      },\n      title: {\n        text: 'USD to EUR exchange rate over time'\n      },\n      subtitle: {\n        text: document.ontouchstart === undefined ?\n          'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: 'Exchange rate'\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      plotOptions: {\n        area: {\n          //fillColor: {\n          //  linearGradient: {\n          //    x1: 0,\n          //    y1: 0,\n          //    x2: 0,\n          //    y2: 1\n          //  },\n          //  stops: [\n          //    [0, Highcharts.getOptions().colors[0]],\n          //    [1, Highcharts.color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]\n          //  ]\n          //},\n          marker: {\n            radius: 2\n          },\n          lineWidth: 1,\n          states: {\n            hover: {\n              lineWidth: 1\n            }\n          },\n          threshold: null\n        }\n      },\n      series: [{\n        type: 'area',\n        name: 'series a',\n        data: []\n      },{\n        type: 'area',\n        name: 'series b',\n        data: []\n      }]\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col>\n              Hello, World!\n              <HighchartsReact\n                ref={this.chartComponent}\n                highcharts={Highcharts}\n                options={this.load_chart_options()}/>\n            </Col>\n          </Row>\n          <Row>\n            <Button onClick={this.redrawChart.bind(this)}>Redraw</Button> {' '}\n            <Button onClick={this.addPoint.bind(this)}>Add Point</Button> {' '}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  addPoint() {\n    const chart = this.chartComponent.current.chart;\n    chart.series[0].addPoint([1514605600000, 2]);\n  }\n\n  redrawChart() {\n    const chart = this.chartComponent.current.chart;\n    chart.redraw();\n  }\n\n  componentDidMount() {\n    const chart = this.chartComponent.current.chart;\n    fetch('https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/usdeur.json')\n      .then(res => res.json())\n      .then(data => {\n        console.log(this.chartComponent);\n        console.log('data0,100', data.splice(0,100));\n        console.log('data100,200', data.splice(100,100));\n        console.log('data200,300', data.splice(200,100));\n\n        chart.addSeries({\n          type: 'area',\n          name: 'series a',\n          //data: data.splice(0,600)\n          data: data\n        });\n        chart.addSeries({\n          type: 'area',\n          name: 'series b',\n          data: data.splice(100,100)\n        });\n        chart.addSeries({\n          type: 'area',\n          name: 'series c',\n          data: data.splice(200,100)\n        });\n        chart.redraw();\n      })\n  }\n}\n","export default class AppConfiguration {\n  static get CONFIG() {\n    //return \"arshan\";\n    return \"cloudflare\";\n  }\n  static get PING_INTERVAL() {\n    return 100;\n  }\n}","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n\nexport default class DownloadSpeedChartSample extends Component {\n\n  load_chart_options() {\n    return {\n      chart: {\n        type: 'scatter',\n        height: 150\n      },\n      title: {\n        text: 'Stacked bar chart'\n      },\n      tooltip: {\n        headerFormat: \"\",\n        pointFormat: \"{series.name}: <b>{point.x}</b><br/>\"\n      },\n      xAxis: {\n        tickInterval: 5,\n        categories: []\n      },\n      yAxis: {\n        min: 0.5,\n        max: 1.5,\n        gridLineWidth: 0,\n        tickAmount: 1,\n        title: {\n          text: 'Download speed',\n          rotation: 0,\n        },\n        labels: {\n          enabled: false\n        }\n      },\n      legend: {\n        enabled: false,\n      },\n      plotOptions: {\n        series: {\n          stacking: 'normal'\n        }\n      },\n      series: [{\n        name: 'John',\n        data: [\n          [56.12, 1],\n          [52.12, 1],\n          [34.12, 1],\n          [61.12, 1],\n          [53.12, 1],\n        ]\n      }]\n    }\n\n  }\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col>\n              Hello, World!\n              <Card>\n                <Card.Body>\n                  <HighchartsReact\n                    ref={this.chartComponent}\n                    highcharts={Highcharts}\n                    options={this.load_chart_options()}/>\n\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Button onClick={this.redrawChart.bind(this)}>Redraw</Button> {' '}\n            <Button onClick={this.addPoint.bind(this)}>Add Point</Button> {' '}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  addPoint() {\n    const chart = this.chartComponent.current.chart;\n    chart.series[0].addPoint([1514605600000, 2]);\n  }\n\n  redrawChart() {\n    const chart = this.chartComponent.current.chart;\n    chart.redraw();\n  }\n\n  componentDidMount() {\n    const chart = this.chartComponent.current.chart;\n    return;\n    fetch('https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/usdeur.json')\n      .then(res => res.json())\n      .then(data => {\n        console.log(this.chartComponent);\n        console.log('data', data);\n        chart.series[0].setData(data);\n        chart.redraw();\n      })\n  }\n}\n","export default class Scenario {\n  run() {\n    console.log(`running this scenario: ${this.constructor.name}`)\n  }\n\n  pause() {\n    console.log(`pausing this scenario: ${this.constructor.name}`)\n  }\n}\n\n","import Scenario from \"./scenario\";\nimport AppConfiguration from \"../config\";\n\nexport default class BandwidthScenario extends Scenario {\n  static get BASE_URL() {\n    return (AppConfiguration.CONFIG === \"arshan\") ?\n      \"https://worker.arshankhanifar.workers.dev\":\n      \"https://speed.cloudflare.com\";\n  }\n\n  constructor(num_measurements, file_size, num_streams, result_cb) {\n    super();\n    this.num_measurements = num_measurements;\n    this.file_size = file_size;\n    this.counter = 0;\n    this.reset_controller();\n    this.result_callback = result_cb;\n    this.num_streams = num_streams;\n  }\n\n  reset_controller() {\n    this.controller = new AbortController();\n  }\n\n  async run() {\n    super.run();\n    while (this.counter < this.num_measurements) {\n      try {\n        let rate = await this.measure();\n        if (this.result_callback) {\n          this.result_callback(rate);\n        }\n      } catch (e) {\n        console.log(`download: ${this.counter} was cancelled`, e);\n        return false;\n      }\n      this.counter += 1;\n    }\n    return true;\n  }\n\n  pause() {\n    super.pause();\n    this.controller.abort();\n    this.reset_controller();\n  }\n\n  convert_to_mbps(r) {\n    return r*1000/(1<<20)*8;\n  }\n\n  async measure() {\n  }\n}\n\n","import AppConfiguration from \"../config\";\nimport BandwidthScenario from \"./bandwidth_scenario\";\n\nexport default class DownloadScenario extends BandwidthScenario {\n  static get TYPE() {\n    return \"Download\"\n  }\n\n  constructor(...options) {\n    super(...options);\n    this.type = 'Download';\n  }\n\n  static get DOWN_ENDPOINT() {\n    return (AppConfiguration.CONFIG === \"arshan\") ?\n      \"/hello/down\":\n      \"__down\";\n  }\n\n  async measure() {\n    return this.download();\n  }\n\n  async download() {\n    const streams = this.num_streams;\n    const url = `${BandwidthScenario.BASE_URL}/${DownloadScenario.DOWN_ENDPOINT}`;\n    let signal = this.controller.signal;\n    let requests = Array(streams)\n      .fill(0)\n      .map(r => new Object())\n      .map((req) => {\n        req.start = Date.now();\n        req.fetch = fetch(`${url}?bytes=${this.file_size}`, {signal});\n        return req;\n      });\n    await Promise.all(requests.map(req => req.fetch.then(res => res.text().then(t => {\n      req.finish = Date.now();\n    }))));\n    let rates = requests.map(r=>(this.file_size)/(r.finish - r.start));\n    return this.convert_to_mbps(rates.reduce((a, b) => a + b));\n  }\n}\n\n","import Scenario from \"./scenario\";\n\nexport default class WaitScenario extends Scenario {\n  static get TYPE() {\n    return \"Wait\"\n  }\n\n  constructor(duration) {\n    super();\n    this.duration = duration;\n    this.last_start = null;\n    this.type = \"Wait\";\n    this.started = false;\n  }\n\n  async wait(time_ms) {\n    return new Promise(resolve => {\n      this.resolver = resolve;\n      this.last_start = Date.now();\n      this.timer = setTimeout(() => {\n        resolve(true);\n      }, time_ms);\n    });\n  }\n\n  async run() {\n    super.run();\n    if (!this.started) {\n      this.amount_remaining = this.duration;\n      this.started = true;\n    }\n    return await this.wait(this.amount_remaining);\n  }\n\n  pause() {\n    super.pause();\n    clearTimeout(this.timer);\n    this.amount_remaining -= (Date.now() - this.last_start);\n    console.log(`paused, amount remaining: ${this.amount_remaining}`);\n    this.resolver(false);\n  }\n}\n\n\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport DownloadScenario from \"../scenarios/download_scenario\";\nimport WaitScenario from \"../scenarios/wait_scenario\";\n\n\nexport default class DownloadScenarioSample extends Component {\n  constructor(props) {\n    super(props);\n    this.create_scenario();\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Button onClick={this.start_download.bind(this)}>Start</Button>\n            <Button onClick={this.pause_download.bind(this)}>Pause</Button>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  create_scenario () {\n    this.scenario = new WaitScenario(2*1000);\n    //this.scenario = new DownloadScenario(10, 1<<20, '1MB');\n  }\n\n  async start_download() {\n    if (await this.scenario.run()) {\n      console.log('Finished!');\n    }\n  }\n\n  pause_download() {\n    this.scenario.pause();\n  }\n}\n","export default class ColourProvider {\n  static DEFAULT_COLOURS = [ '#0d233a', '#2f7ed8', '#8bbc21', '#910000', '#1aadce',\n    '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];\n  static mapping = {};\n  static count = 0;\n\n  static get_colour(id) {\n    let num_colours = this.DEFAULT_COLOURS.length;\n    if (!(id in this.mapping)) {\n      this.mapping[id] = this.count;\n      this.count += 1 ;\n    }\n    let index = this.mapping[id];\n    return this.DEFAULT_COLOURS[index % num_colours];\n  }\n}\n\n","import React, {Component} from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport ColourProvider from \"../utilities/colours\";\n\nexport default class PingChart extends Component {\n  chart_options = {\n    chart: {\n      zoomType: 'x',\n      animation: {\n        duration: 100\n      }\n    },\n    title: {\n      text: 'Latency'\n    },\n    subtitle: {\n      text: document.ontouchstart === undefined ?\n        'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: 'Ping(ms)'\n      },\n      gridLineWidth: 0,\n    },\n    legend: {\n      enabled: false\n    },\n    plotOptions: {\n      area: {\n        marker: {\n          radius: 2\n        },\n        lineWidth: 1,\n        states: {\n          hover: {\n            lineWidth: 1\n          }\n        },\n        threshold: null\n      }\n    },\n\n    series: []\n  };\n\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  render() {\n    return (\n      <>\n        <HighchartsReact\n          ref={this.chartComponent}\n          highcharts={Highcharts}\n          options={this.chart_options}/>\n        <br/>\n\n      </>\n    );\n  }\n\n  series_lookup = {};\n\n  get_series(id, coloured) {\n    const chart = this.chartComponent.current.chart;\n    if (!(id in this.series_lookup)) {\n      this.series_lookup[id] = Object.keys(this.series_lookup).length;\n      chart.addSeries({\n        type: 'area',\n        name: 'latency',\n        data: [],\n        color: coloured ? ColourProvider.get_colour(id) : 'rgb(120,120,120)'\n      });\n    }\n    return chart.series[this.series_lookup[id]];\n  }\n\n  add_point(latency, id, coloured) {\n    let series = this.get_series(id, coloured);\n    series.addPoint([Date.now(), latency]);\n  }\n}\n","import React, {Component} from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport Card from \"react-bootstrap/Card\";\nimport ColourProvider from \"../utilities/colours\";\n\nexport default class BandwidthChart extends Component {\n  chart_options = {\n    chart: {\n      type: 'scatter',\n      height: 100\n    },\n    tooltip: {\n      headerFormat: \"\",\n      pointFormat: \"{series.name}: <b>{point.x}</b><br/>\"\n    },\n    xAxis: {\n      tickInterval: 5,\n      categories: []\n    },\n    title: {\n      floating: true,\n      text: \"\"\n    },\n    yAxis: {\n      width: 0,\n      min: 0.7,\n      max: 1.8,\n      gridLineWidth: 0,\n      tickAmount: 1,\n      title: {\n        reserveSpace: false,\n        text: '',\n        rotation: 0,\n        x: 40,\n        y: -15,\n      },\n      labels: {\n        enabled: false\n      }\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        stacking: 'normal'\n      }\n    },\n    series: [{\n      name: 'Download Speed',\n      data: [],\n      color: 'red'\n    }]\n  };\n\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n    this.chart_options.series[0] = {\n      name: this.props.series_name,\n      data: [],\n      color: ColourProvider.get_colour(this.props.color_id)\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Card>\n          <Card.Body>\n            <Card.Title>{this.props.title}</Card.Title>\n            <HighchartsReact\n              ref={this.chartComponent}\n              highcharts={Highcharts}\n              options={this.chart_options}/>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!prevProps.data) {\n      return;\n    }\n    const datum = prevProps.data.slice(-1).pop();\n    if (!datum) {\n      return;\n    }\n    const chart = this.chartComponent.current.chart;\n    if (chart.series[0].data.length === prevProps.data.length) {\n      return;\n    }\n    chart.series[0].addPoint([parseFloat(datum.rate.toFixed(2)), 1]);\n  }\n}\n","import AppConfiguration from \"../config\";\nimport BandwidthScenario from \"./bandwidth_scenario\";\n\nexport default class UploadScenario extends BandwidthScenario {\n  static get TYPE() {\n    return \"Upload\"\n  }\n\n  constructor(...options) {\n    super(...options);\n    this.type = 'Upload';\n  }\n\n  static get UP_ENDPOINT() {\n    return (AppConfiguration.CONFIG === \"arshan\") ?\n      \"/hello/up\":\n      \"__up\";\n  }\n\n  async measure() {\n    return this.upload();\n  }\n\n  async upload() {\n    const streams = this.num_streams;\n    const url = `${BandwidthScenario.BASE_URL}/${UploadScenario.UP_ENDPOINT}`;\n    let signal = this.controller.signal;\n    let requests = Array(streams)\n      .fill(0)\n      .map(r => new Object())\n      .map((req) => {\n        req.start = Date.now();\n        req.fetch = fetch(`${url}`, {...{\n          method: 'POST',\n          body: '0'.repeat(this.file_size),\n          headers: { 'content-length': this.file_size }\n        }, signal});\n        return req;\n      });\n    await Promise.all(requests.map(req => req.fetch.then(res => res.text().then(t => {\n      req.finish = Date.now();\n    }))));\n    let rates = requests.map(r=>(this.file_size)/(r.finish - r.start));\n    return this.convert_to_mbps(rates.reduce((a, b) => a + b));\n  }\n}\n\n","import React, {Component} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport WaitScenario from \"../scenarios/wait_scenario\";\nimport DownloadScenario from \"../scenarios/download_scenario\";\nimport UploadScenario from \"../scenarios/upload_scenario\";\nimport { saveAs } from 'file-saver';\n\n\nexport default class ScenarioCSVManager extends Component {\n  export_as_csv() {\n    let header_row = [\"type\", \"num_bytes\", \"num_measurements\", \"num_streams\", \"duration\"]\n    let csv_content = \"\";\n    csv_content += header_row.join(\",\") + \"\\r\\n\";\n    this.props.scenarios.forEach(s => {\n      let row = (s.type === WaitScenario.TYPE) ?\n        [s.type, \"\", \"\", \"\", s.duration] :\n        [s.type, s.file_size, s.num_measurements, s.num_streams, \"\"];\n      csv_content += row.join(\",\") + \"\\r\\n\";\n    });\n    let file = new File(\n      [csv_content],\n      \"scenarios.csv\",\n      {type: \"text/plain;charset=utf-8\"});\n    saveAs(file);\n  }\n\n  import_csv(e) {\n    if (e.target.files.length === 0) {\n      return;\n    }\n    let class_lookup = {\n      [WaitScenario.TYPE]: WaitScenario,\n      [DownloadScenario.TYPE]: DownloadScenario,\n      [UploadScenario.TYPE]: UploadScenario\n    };\n    let fr = new FileReader();\n    fr.onload = () => {\n      let lines = fr.result.split(\"\\r\\n\").splice(1);\n      let scenarios = lines.map(l => {\n        let attrs = l.split(\",\");\n        if (attrs.length < 5) {\n          attrs = attrs.concat(\"0\".repeat(5 - attrs.length).split(\"\"));\n        }\n        if (!(attrs[0] in class_lookup)) {\n          return ;\n        }\n        let new_scenario = new class_lookup[attrs[0]]();\n        new_scenario.file_size = parseInt(attrs[1]) || 0;\n        new_scenario.num_measurements = parseInt(attrs[2]) || 0;\n        new_scenario.num_streams = parseInt(attrs[3]) || 0;\n        new_scenario.duration = parseInt(attrs[4]) || 0;\n        return new_scenario;\n      }).filter(s => s);\n      this.props.csv_imported(scenarios);\n    };\n    fr.readAsText(e.target.files[0]);\n  }\n\n\n  render() {\n    return (\n      <>\n        <Button\n          onClick={this.export_as_csv.bind(this)}\n        >\n          Export\n        </Button>\n        {' '}\n        <Form>\n          <Form.Group>\n            <Form.File\n              onChange={this.import_csv.bind(this)}\n              label=\"Load a CSV file\" />\n          </Form.Group>\n        </Form>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport DownloadScenario from \"../scenarios/download_scenario\";\nimport UploadScenario from \"../scenarios/upload_scenario\";\nimport WaitScenario from \"../scenarios/wait_scenario\";\nimport ScenarioCSVManager from \"./scenario_csv_manager\";\n\n\nexport default class ScenarioTable extends Component {\n  async edit(scenario) {\n    let editing = !this.state.scenarios[scenario.id].editing;\n    this.state.scenarios[scenario.id].editing = editing;\n    await this.sync_table();\n  }\n\n  async sync_table(){\n    await this.setState({\n      scenarios: this.state.scenarios\n    });\n    await this.props.table_updated(this.state.scenarios);\n  }\n\n  async add() {\n    this.state.scenarios.push(\n      this.normalize_scenario(new DownloadScenario(20, 1<<17, 1, null))\n    );\n    this.reindex_scenarios();\n    await this.sync_table();\n  }\n\n  async type_changed(scenario, event) {\n    let class_lookup = {\n      [WaitScenario.TYPE]: WaitScenario,\n      [DownloadScenario.TYPE]: DownloadScenario,\n      [UploadScenario.TYPE]: UploadScenario\n    };\n    let new_scenario = new class_lookup[event.target.value]();\n    new_scenario.num_measurements = scenario.num_measurements || 0;\n    new_scenario.num_streams = scenario.num_streams || 0;\n    new_scenario.file_size = scenario.file_size || 0;\n    new_scenario = this.normalize_scenario(new_scenario);\n    new_scenario.editing = true;\n    this.state.scenarios[scenario.id] = new_scenario;\n    await this.reindex_scenarios();\n    await this.sync_table();\n  }\n\n  async delete_row(scenario) {\n    console.log(\"scenario id\", scenario.id);\n    this.state.scenarios = this.state.scenarios.filter((_, i) => i !== scenario.id);\n    this.reindex_scenarios();\n    await this.sync_table();\n  }\n\n  reindex_scenarios() {\n    let count = 0;\n    this.setState({\n      scenarios: this.state.scenarios.map((s) => {\n        s.id = count++;\n        return s;\n      })\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      scenarios: this.normalize_scenarios(props.scenarios)\n    };\n    this.scenario_types = [\n      DownloadScenario.TYPE,\n      UploadScenario.TYPE,\n      WaitScenario.TYPE\n    ]\n  }\n\n  normalize_scenario(scenario) {\n    let num = scenario.file_size;\n    scenario.size_formatted = (scenario.type === WaitScenario.TYPE)?\n      {value: 0, postfix: \"B\"}:\n      this.get_formatted_measurement(num);\n      this.update_size(scenario);\n    return scenario;\n  }\n\n  normalize_scenarios(scenarios) {\n    return scenarios.map(scenario => {\n      return this.normalize_scenario(scenario);\n    })\n  }\n\n  get_formatted_measurement(size) {\n    if (Math.floor(size/(1<<20)) !== 0) {\n      return {\n        value: size/(1<<20),\n        postfix: \"MB\"\n      };\n    }\n    if (Math.floor(size/(1<<10)) !== 0) {\n      return {\n        value: size/(1<<10),\n        postfix: \"KB\"\n      };\n    }\n    return {\n      value: size,\n      postfix: \"B\"\n    };\n  }\n\n  update_size(scenario) {\n    let value_lookup = {\n      \"KB\": 1<<10,\n      \"MB\": 1<<20,\n      \"B\": 1\n    };\n    scenario.label = `${scenario.size_formatted.value}${scenario.size_formatted.postfix}`;\n    scenario.file_size =\n      value_lookup[scenario.size_formatted.postfix]\n      * scenario.size_formatted.value;\n  }\n\n  async csv_imported(scenarios) {\n    this.state.scenarios = this.normalize_scenarios(scenarios);\n    this.reindex_scenarios();\n    await this.sync_table();\n  }\n\n  render() {\n    return(\n      <>\n        <Table striped bordered responsive>\n          <thead>\n          <tr>\n            <th>#</th>\n            <th>Type</th>\n            <th># Bytes</th>\n            <th># Measurements</th>\n            <th># Streams</th>\n            <th>Delete</th>\n          </tr>\n          </thead>\n          <tbody>\n          {this.state.scenarios.map(scenario => (\n            <tr key={scenario.id}>\n              <td>{scenario.id + 1}</td>\n              { scenario.editing ?\n                (<>\n                  <td>\n                    <Form.Group controlId=\"scenarioType\">\n                      <Form.Control as=\"select\"\n                                    defaultValue={scenario.type}\n                                    onChange={(value)=>{this.type_changed(scenario, value)}}>\n                        {this.scenario_types.map(type =>\n                          <option value={type} key={type}>{type}</option>\n                        )}\n                      </Form.Control>\n                    </Form.Group>\n                  </td>\n                  {\n                    (scenario.type === 'Wait') ?\n                      <>\n                        <td colSpan={3}>\n                          <InputGroup>\n                            <Form.Control\n                              type=\"number\"\n                              placeholder=\"Wait amount (in milliseconds)\"\n                              aria-describedby=\"waitAmount\"\n                              name=\"size\"\n                              onChange={(e)=> {scenario.duration = parseInt(e.target.value)}}\n                              defaultValue={scenario.duration}\n                            />\n                            <InputGroup.Append>\n                              <InputGroup.Text>ms</InputGroup.Text>\n                            </InputGroup.Append>\n                          </InputGroup>\n                        </td>\n                      </> :\n                      <>\n                        <td>\n                          <Form.Group\n                            controlId=\"size\"\n                            style={{width:170}}\n                          >\n                            <InputGroup>\n                              <Form.Control\n                                type=\"number\"\n                                placeholder=\"Size\"\n                                name=\"size\"\n                                defaultValue={scenario.size_formatted.value}\n                                onChange={e => {\n                                  scenario.size_formatted.value = e.target.value;\n                                  this.update_size(scenario);\n                                }}\n                              />\n                              <InputGroup.Append>\n                                <Form.Control\n                                  as=\"select\"\n                                  defaultValue={scenario.size_formatted.postfix}\n                                  onChange={(e)=>{\n                                    scenario.size_formatted.postfix = e.target.value;\n                                    this.update_size(scenario);\n                                  }}>\n                                  {['B', 'KB', 'MB'].map(type =>\n                                    <option value={type} key={type}>{type}</option>\n                                  )}\n                                </Form.Control>\n                              </InputGroup.Append>\n                            </InputGroup>\n                          </Form.Group>\n                        </td>\n                        <td>\n                          <Form.Group\n                            style={{width:100}}\n                          >\n                            <InputGroup>\n                              <Form.Control\n                                type=\"number\"\n                                aria-describedby=\"numberOfMeasurements\"\n                                name=\"num_measurements\"\n                                defaultValue={scenario.num_measurements}\n                                onChange={e => {scenario.num_measurements = parseInt(e.target.value)}}\n                              />\n                            </InputGroup>\n                          </Form.Group>\n                        </td>\n                        <td>\n                          <Form.Group\n                            style={{width:100}}\n                          >\n                            <InputGroup>\n                              <Form.Control\n                                type=\"number\"\n                                aria-describedby=\"numberOfStreams\"\n                                name=\"num_streams\"\n                                defaultValue={scenario.num_streams}\n                                onChange={e => {scenario.num_streams = parseInt(e.target.value)}}\n                              />\n                            </InputGroup>\n                          </Form.Group>\n                        </td>\n                      </>\n                  }\n                </>) :\n                (\n                  <>\n                    {\n                      (scenario.type === 'Wait') ?\n                        <>\n                          <td colSpan={4}>{`${scenario.type} ${scenario.duration}ms`}</td>\n                        </> :\n                        <>\n                          <td>{scenario.type}</td>\n                          <td>{`${scenario.size_formatted.value} ${scenario.size_formatted.postfix}`}</td>\n                          <td>{scenario.num_measurements}</td>\n                          <td>{scenario.num_streams}</td>\n                        </>\n                    }\n                  </>\n                )\n              }\n              <td>\n                <Button variant=\"success\" size=\"sm\" type=\"submit\" onClick={()=>{this.edit(scenario)}}>\n                  {scenario.editing ? 'Done' : 'Edit'}\n                </Button>\n                {' '}\n                <Button variant=\"danger\" size=\"sm\" onClick={() => {this.delete_row(scenario)}}>Delete</Button>\n              </td>\n            </tr>\n          ))}\n          </tbody>\n        </Table>\n        <Button variant=\"success\" onClick={this.add.bind(this)}>Add Row</Button>\n        {' '}\n        <ScenarioCSVManager\n          scenarios={this.state.scenarios}\n          csv_imported={async (scenarios) => { await this.csv_imported(scenarios) }}\n        />\n      </>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport PingChart from \"./components/ping_chart\";\nimport BandwidthChart from \"./components/bandwidth_chart\";\nimport WaitScenario from \"./scenarios/wait_scenario\";\nimport DownloadScenario from \"./scenarios/download_scenario\";\nimport AppConfiguration from \"./config\";\nimport UploadScenario from \"./scenarios/upload_scenario\";\nimport ScenarioTable from \"./components/scenario_table\";\n\n\nconst MEASUREMENTS = {\n  DOWNLOAD: \"download_measurements\",\n  UPLOAD: \"upload_measurements\",\n};\n\n\nexport default class App extends Component {\n  reset_values() {\n    return {\n      started: false,\n      paused: true,\n      current_idx: 0,\n      [MEASUREMENTS.DOWNLOAD]: {},\n      [MEASUREMENTS.UPLOAD]: {},\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = this.reset_values();\n    this.ping_timer = null;\n    this.populate_scenarios();\n    this.ping_chart = React.createRef();\n  }\n\n  populate_scenarios() {\n    this.state.scenarios = [\n      new WaitScenario(500),\n      new DownloadScenario(20, 1<<17, 1, this.collect_bandwidth_data.bind(this)),\n      new DownloadScenario(20, 1<<20, 1, this.collect_bandwidth_data.bind(this)),\n      new DownloadScenario(20, 10*(1<<20), 1, this.collect_bandwidth_data.bind(this)),\n      new WaitScenario(500),\n      new UploadScenario(20, 1<<17, 1, this.collect_bandwidth_data.bind(this)),\n      new WaitScenario(500),\n      new UploadScenario(20, 1<<20, 1, this.collect_bandwidth_data.bind(this)),\n      new UploadScenario(20, 10*(1<<20), 1, this.collect_bandwidth_data.bind(this)),\n      new WaitScenario(500),\n    ];\n    this.reindex_scenarios();\n  }\n\n  reindex_scenarios() {\n    let count = 0;\n    this.state.scenarios = this.state.scenarios.map((s) => {\n      s.id = count++;\n      return s;\n    });\n  }\n\n  async table_updated(scenarios) {\n    console.log(\"table has been now updated!!!!\", scenarios);\n    await this.setState({\n      scenarios: scenarios.map(s => {\n        if (s.type !== WaitScenario.TYPE) {\n          s.result_callback = this.collect_bandwidth_data.bind(this)\n        }\n        return s;\n      })\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col lg={12}>\n              <h1>The Khanifar Bufferbloat Test</h1>\n              <p>Best buffer bloat test in the history of mankind, ever™</p>\n            </Col>\n            <Col lg={12}>\n              <h2>Create a scenario</h2>\n              <ScenarioTable\n                scenarios={this.state.scenarios}\n                table_updated={this.table_updated.bind(this)}\n              />\n            </Col>\n            <Col lg={12}>\n              <PingChart\n                ref={this.ping_chart}\n              />\n            </Col>\n            <Col lg={12}>\n              <Button onClick={this.test_control.bind(this)}>{this.state.started ? (this.state.paused ? 'Continue' : 'Pause') : 'Start'}</Button> {' '}\n            </Col>\n            <Col xs={12} md={6}>\n              <span><strong>Download</strong></span>\n            </Col>\n            <Col xs={12} md={6}>\n              <span><strong>Upload</strong></span>\n            </Col>\n            <Col xs={6} md={4}>\n              <span><strong>latency:</strong> {this.state.latest_measurement}</span>\n              <br/>\n              <span><strong>bw:</strong> {this.state.latest_bw_measurement}Mbps</span>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12} md={6}>\n              <span><strong>Download Measurements</strong></span>\n              {Object.keys(this.state[MEASUREMENTS.DOWNLOAD]).map(id => (\n                <BandwidthChart key={id}\n                  data={this.state[MEASUREMENTS.DOWNLOAD][id]}\n                  series_name={'Download'}\n                  color_id={id}\n                  title={this.format_title(this.state[MEASUREMENTS.DOWNLOAD][id], 'Download')}\n                />\n              ))}\n            </Col>\n            <Col xs={12} md={6}>\n              <span><strong>Upload Measurements</strong></span>\n              {Object.keys(this.state[MEASUREMENTS.UPLOAD]).map(id => (\n                <BandwidthChart key={id}\n                  data={this.state[MEASUREMENTS.UPLOAD][id]}\n                  series_name={'Upload'}\n                  color_id={id}\n                  title={this.format_title(this.state[MEASUREMENTS.UPLOAD][id], 'Upload')}\n                />\n              ))}\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  format_title(measurements, direction) {\n    if (measurements.length === 0) {\n      return \"Loading...\";\n    }\n    return `${measurements[0].label} ${direction}: (${measurements.length}/${measurements[0].num_measurements})`\n  }\n\n  async check_if_started_and_toggle_pause() {\n    if (!this.state.started) {\n      await this.setState({\n        started: true,\n        paused: false\n      });\n    } else {\n      await this.setState({\n        paused: !this.state.paused\n      });\n    }\n  }\n\n  async test_control() {\n    await this.check_if_started_and_toggle_pause();\n    if (this.state.paused) {\n      if (this.current_scenario) {\n        this.current_scenario.pause();\n      }\n      this.cancel_ping();\n    } else {\n      this.run_scenarios();\n    }\n  }\n\n  async run_scenarios() {\n    if (this.state.current_idx === this.state.scenarios.length) {\n      console.log(\"Scenarios exhausted\");\n      return;\n    }\n    this.ping(AppConfiguration.PING_INTERVAL);\n    this.current_scenario = this.state.scenarios[this.state.current_idx];\n    while(await this.current_scenario.run()) {\n      await this.setState({\n        current_idx: (this.state.current_idx + 1)\n      });\n      if (this.state.current_idx === this.state.scenarios.length) {\n        console.log(\"Scenarios finished\");\n        this.cancel_ping();\n        return;\n      }\n      this.current_scenario = this.state.scenarios[this.state.current_idx];\n    }\n  }\n\n  async collect_bandwidth_data(rate) {\n    if (this.current_scenario.type === WaitScenario.TYPE){\n      console.error(\"Received rate from a WaitScenario\", rate);\n      return;\n    }\n    await this.ensure_entry_exists();\n    let scenario = this.current_scenario;\n    let measurements = (scenario.type ===  DownloadScenario.TYPE) ?\n      MEASUREMENTS.DOWNLOAD : MEASUREMENTS.UPLOAD;\n    this.state[measurements][scenario.id].push({\n      ...scenario,\n      rate: rate\n    });\n    await this.setState({\n      [measurements]: this.state[measurements]\n    });\n    console.log(\"received download data\", rate);\n  }\n\n  async ensure_entry_exists() {\n    let scenario = this.current_scenario;\n    let measurements = (scenario.type ===  DownloadScenario.TYPE) ?\n      MEASUREMENTS.DOWNLOAD : MEASUREMENTS.UPLOAD;\n    if (!(scenario.id in this.state[measurements])) {\n      this.state[measurements][scenario.id] = [];\n      await this.setState({\n        [measurements]: this.state[measurements]\n      });\n    }\n  }\n\n  collect_latency(latency) {\n    if (this.state.paused) {\n      console.warn(\"Skipping latency Measurement cuz paused...\");\n      return;\n    }\n    console.log('latency', latency);\n    this.setState({\n      latest_measurement: latency\n    });\n\n    this.ping_chart.current.add_point(\n      latency,\n      this.current_scenario.id,\n      (this.current_scenario.type !== WaitScenario.TYPE)\n    );\n  }\n\n  async ping(interval) {\n    let start = Date.now();\n    fetch(\"https://api.github.com/users/arshankhanifar\")\n      .then(res => res.json())\n      .then(async res => {\n        let end = Date.now();\n        let latency = end - start;\n        this.collect_latency(latency);\n      });\n    this.ping_timer = setTimeout(() => this.ping(interval), interval);\n  }\n\n  cancel_ping() {\n    clearTimeout(this.ping_timer);\n    this.ping_timer = null;\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HelloWorldSample from \"./samples/hello_world_sample\";\nimport MultipleUrlsSample from \"./samples/multiple_urls_sample\";\nimport SingleStreamSample from \"./samples/single_stream_sample\";\nimport PingSample from \"./samples/ping_sample\";\nimport HighChartsSample from \"./samples/highcharts_sample\";\nimport DownloadSpeedChartSample from \"./samples/download_speed_chart_sample\";\nimport DownloadScenarioSample from \"./samples/scenario_sample\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}