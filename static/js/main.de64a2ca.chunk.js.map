{"version":3,"sources":["serviceWorker.js","components/latency_stats_component.js","components/latency_stage_report.js","components/latency_box_plot.js","components/measurement_callouts.js","components/latency_results_report.js","utilities/timer.js","tools/latency_collector.js","app_configuration.js","stages/stage.js","stages/latency_measurement_stage.js","tools/downloader.js","stages/downlink_measurement_stage.js","pages/main_page.js","samples/box_plot_sample.js","samples/bitrate_stream_sample.js","index.js","components/box_plot.js","utilities/statistics_utilities.js"],"names":["Boolean","window","location","hostname","match","LatencyStatsComponent","props","data","sorted","this","map","d","value","sort","d3","StatisticsUtilities","calculate_important_values","toFixed","q1","q3","median","min","max","std","setState","jitter","prevProps","prevState","snapshot","console","warn","update","state","Row","style","fontSize","fontWeight","whiteSpace","Col","sm","Component","LatencyStageReport","Card","Body","className","md","xs","marginTop","title","tooltip_html","MeasurementCallouts","textAlign","borderRight","LatencyResultsReport","Timer","ms","Promise","resolve","setTimeout","LatencyCollector","url","interval","interval_cb","done_cb","count","cancelled","i","fetch","then","res","text","perf","performance","getEntriesByName","pop","ttfb","responseStart","requestStart","sleep","AppConfiguration","Stage","LatencyMeasurementStage","data_callback","done_callback","start","Downloader","measurement_callback","controller","AbortController","size","signal","r","streams","measure","n","cancel","total_start","Date","now","counter","total_counter","reset_counter","speed","convert_to_bps","requests","Array","fill","_","req","a","get_http_fetch","reader","body","getReader","pump","read","done","length","all","rate_bps","abort","DownlinkMeasurementStage","bandwidth_callback","collector","downloader","measurement","log","download_for_n_seconds","download_speed","MainPage","stages_configuration","name","page_title","test_running","test_title","current_stage_idx","stages","add_latency_to_current_stage","bind","advance_stage","downlink_measurement","bandwidth","start_test","curr_idx","configuration","run","latency","current_stage","current_data","Header","Object","keys","stage","key","Text","Button","variant","onClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","BoxPlot","TRANSITION_TIME","DOT_COLOUR","chart_component","React","createRef","height","width","scale","margin","top","right","bottom","left","get_chart_parameters","svg","current","append","attr","_svg","update_scale","_points_container","add_tooltip","draw_points","add_line_with_ticks","add_quartile_box_if_it_doesnt_exist","_tooltip","selection","rel_pos","tooltip","component","mouseover","mousemove","e","relative_dist","html","eval","mouseleave","on","x","_x_scale","selectAll","enter","set_circle_attributes","transition","duration","mid_anchor_rel","middle_anchor","_middle_anchor","x_min","x_max","make_tic","at","_quartile_box","add_quartile_box","_quartile_rect","_median_line","range_padding","domain","range","update_points_locations","update_box","datum","push","refresh_chart","ref","sorted_data"],"mappings":"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","file":"static/js/main.de64a2ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App_old is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as d3 from 'd3';\nimport React, {Component} from 'react';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nexport default class LatencyStatsComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.data = this.props.data;\n  }\n\n  update() {\n    let sorted = [...this.data.map(d => d.value)].sort(d3.ascending);\n    let [q1, q3, median, min, max, std] = StatisticsUtilities\n      .calculate_important_values(sorted)\n      .map(d => d.toFixed(1));\n    this.setState({\n      min: min,\n      max: max,\n      q1: q1,\n      q3: q3,\n      median: median,\n      jitter: std\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!prevProps.data) {\n      console.warn('data empty', prevProps.data);\n    }\n    if (this.data === prevProps.data) {\n      return;\n    }\n    this.data = prevProps.data || [];\n    this.update();\n  }\n\n  render() {\n    return (\n      <>\n        {this.state &&\n          (<Row style={{fontSize: 13, fontWeight: 'bold', whiteSpace: 'nowrap'}}>\n            <Col sm={6}>\n              min: {this.state.min}ms<br/>\n              median: {this.state.median}ms<br/>\n              max: {this.state.max}ms\n            </Col>\n            <Col sm={6}>\n              25%: {this.state.min}ms<br/>\n              75%: {this.state.median}ms<br/>\n              jitter: {this.state.jitter}ms\n            </Col>\n          </Row>)\n        }\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport BoxPlot from \"./box_plot\";\nimport LatencyStatsComponent from \"./latency_stats_component\";\nimport './latency_stage_report.scss';\nimport LatencyBoxPlot from \"./latency_box_plot\";\n\n\nexport default class LatencyStageReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className={\"WBBLatencyStageReport\"}>\n          <Row>\n            <Col md={2} xs={2}>\n              <h5 style={{marginTop: 15}}>{this.props.title}</h5>\n            </Col>\n            <Col md={7} xs={10}>\n              <BoxPlot\n                data={this.props.data}\n                tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              />\n            </Col>\n            <Col md={3} xs={12}>\n              <LatencyStatsComponent\n                data={this.props.data}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport BoxPlot from \"./box_plot\";\n\nexport default class LatencyBoxPlot extends Component {\n  render() {\n    return (\n      <BoxPlot\n        {...this.props}\n        scale={[0, 200]}\n      />\n    );\n  }\n\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\n\n\nexport default class MeasurementCallouts extends Component {\n  render() {\n    return (\n      <>\n        <Row style={{textAlign: 'center'}}>\n          <Col sm={4} style={{borderRight: \"1px solid black\"}}>\n            <div className=\"condition\">\n              Unloaded\n            </div>\n            <div className=\"latency\">\n              20 ms\n            </div>\n          </Col>\n          <Col sm={4} style={{borderRight: \"1px solid black\"}}>\n            <div className=\"condition\">\n              ↓Saturated\n            </div>\n            <div className=\"latency\">\n              40 ms\n            </div>\n          </Col>\n          <Col sm={4}>\n            <div className=\"condition\">\n              ↑Saturated\n            </div>\n            <div className=\"latency\">\n              80 ms\n            </div>\n          </Col>\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport MeasurementCallouts from \"./measurement_callouts\";\n\n\nexport default class LatencyResultsReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className=\"WBBLatencySummary\">\n          <Row>\n            <Col sm={12} md={7}>\n              <h4>Latency Results</h4>\n              <p>Bufferbloat is measured by comparing the latency of an Internet connection when it is unloaded to when it is \"saturated.\"</p>\n            </Col>\n            <Col sm={12} md={5}>\n              <MeasurementCallouts/>\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","export default class Timer {\n  static async sleep(ms) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    })\n  }\n}\n","import Timer from \"../utilities/timer\";\n\n\nexport default class LatencyCollector {\n  constructor(url, interval, interval_cb, done_cb, count) {\n    this.url = url;\n    this.interval = interval;\n    this.interval_cb = interval_cb;\n    this.done_cb = done_cb;\n    this.count = count;\n    this.cancelled = false;\n  }\n\n  async start() {\n    let i = 0;\n    while (i++ < this.count) {\n      await fetch(this.url).then(res => res.text());\n      let perf  = performance.getEntriesByName(this.url).pop();\n      let ttfb = perf.responseStart - perf.requestStart;\n      if (this.cancelled) {\n        return ;\n      }\n      this.interval_cb(ttfb);\n      await Timer.sleep(this.interval)\n    }\n    if (this.done_cb) {\n      this.done_cb();\n    }\n  }\n\n  cancel() {\n    this.cancelled = true;\n  }\n}\n","export const AppConfiguration = {\n  PING_INTERVAL: 100,\n};","export default class Stage {\n  async run() {\n\n  }\n}\n","import Stage from \"./stage\";\nimport LatencyCollector from \"../tools/latency_collector\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class LatencyMeasurementStage extends Stage {\n  constructor(data_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    super.run();\n    let urls = [\n      \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2\",\n      \"https://fonts.gstatic.com/l/font?kit=KFOmCnqEu92Fr1Me4GZNCzcPK4I&skey=a0a0114a1dcab3ac&v=v20\",\n      \"https://speed.cloudflare.com/__down?bytes=0\"\n    ];\n    let url = urls[1];\n    let collector = new LatencyCollector(\n      url,\n      AppConfiguration.PING_INTERVAL,\n      this.data_callback,\n      this.done_callback,\n      20\n    );\n    collector.start();\n  }\n}","import Timer from \"../utilities/timer\";\n\nexport default class Downloader {\n  constructor(measurement_callback, done_callback) {\n    this.measurement_callback = measurement_callback || (() => null);\n    this.done_callback = done_callback || (() => null);\n    this.controller = new AbortController();\n  }\n\n  get_http_fetch(size, i) {\n    let signal = this.controller.signal;\n    return fetch(`https://speed${i+1}.arshankhanifar.workers.dev/hi/down?bytes=${size}`, {signal});\n  }\n\n  convert_to_bps(r) {\n    return r*1000*8;\n  }\n\n  async download(size, streams) {\n    return this.measure(size, streams)\n  }\n\n  async download_for_n_seconds(n, streams) {\n    const MAX_DOWNLOAD_SIZE = 100 * 1e6;\n    setTimeout(() => {this.cancel()}, n * 1000);\n    return this.measure(MAX_DOWNLOAD_SIZE, streams);\n  }\n\n  async measure(size, streams) {\n    const window_size = 1e6,\n      total_start = Date.now();\n    let start = Date.now(),\n      counter = 0,\n      total_counter = 0;\n\n    const reset_counter = () => {\n      if (counter < window_size) {\n        return;\n      }\n      let speed = this.convert_to_bps(counter / (Date.now() - start));\n      this.measurement_callback(speed);\n      counter = 0;\n      start = Date.now();\n    };\n\n    let requests = Array(streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map(async (req, i) => {\n        const res = await this.get_http_fetch(size/streams, i),\n          reader = res.body.getReader();\n        return new Promise(async resolve => {\n          try {\n            await pump();\n          } catch (err) {\n            resolve();\n          }\n          function pump() {\n            return reader.read().then(({ done, value }) => {\n              if (done) {\n                resolve();\n                return;\n              }\n              counter += value.length;\n              total_counter += value.length;\n              reset_counter();\n              return pump();\n            });\n          }\n        });\n      });\n    await Promise.all(requests);\n    let rate_bps = this.convert_to_bps(total_counter/(Date.now() - total_start));\n    this.done_callback(rate_bps);\n    return rate_bps;\n  }\n\n  cancel() {\n    this.controller.abort();\n  }\n}","import Stage from \"./stage\";\nimport LatencyCollector from \"../tools/latency_collector\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport Downloader from \"../tools/downloader\";\n\n\nexport default class DownlinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    super.run();\n    let urls = [\n      \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2\",\n      \"https://fonts.gstatic.com/l/font?kit=KFOmCnqEu92Fr1Me4GZNCzcPK4I&skey=a0a0114a1dcab3ac&v=v20\",\n      \"https://speed.cloudflare.com/__down?bytes=0\"\n    ];\n    let url = urls[1];\n    const collector = new LatencyCollector(\n      url,\n      AppConfiguration.PING_INTERVAL,\n      this.data_callback,\n      null,\n      1e5\n    );\n\n    collector.start();\n\n    const meas_callback = (measurement) => {\n        console.log(`realtime rate ${measurement/1e6}mbps`);\n    };\n\n    const downloader = new Downloader(meas_callback);\n    let download_speed = await downloader.download_for_n_seconds(30, 8);\n    collector.cancel();\n    this.bandwidth_callback(download_speed);\n    this.done_callback();\n  }\n}","import React, {Component} from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport '../components/component_styles.scss';\nimport LatencyStageReport from \"../components/latency_stage_report\";\nimport LatencyResultsReport from \"../components/latency_results_report\";\nimport LatencyCollector from \"../tools/latency_collector\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport LatencyMeasurementStage from \"../stages/latency_measurement_stage\";\nimport DownlinkMeasurementStage from \"../stages/downlink_measurement_stage\";\n\n\nexport default class MainPage extends Component {\n  constructor(props) {\n    super(props);\n    this.stages_configuration = [\n      {\n        name: \"unloaded\",\n        title: \"Unloaded\",\n        page_title: \"Measuring Unloaded Latency\"\n      },\n      {\n        name: \"down\",\n        title: \"↓ Saturated\",\n        page_title: \"Measuring Latency With Downlink Saturated\"\n      },\n      {\n        name: \"up\",\n        title: \"↑ Saturated\",\n        page_title: \"Measuring Latency With Uplink Saturated\"\n      }\n    ];\n    this.state = {\n      test_running: false,\n      test_title: 'Bufferbloat Test',\n      current_stage_idx: -1,\n      stages: {}\n    };\n    this.stages = [\n      new LatencyMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new DownlinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.downlink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      )\n    ];\n  }\n\n  downlink_measurement(bandwidth) {\n    console.log(`avg download: ${bandwidth/1e6}mbps`);\n  }\n\n  componentDidMount() {\n    //this.debug();\n  }\n\n  debug() {\n    this.start_test().then(()=> {});\n  }\n\n  async advance_stage() {\n    let curr_idx = this.state.current_stage_idx + 1;\n    if (curr_idx >= this.stages.length) {\n      console.log(\"boom done stages\");\n      return;\n    }\n    await this.setState({\n      current_stage_idx: curr_idx,\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          configuration: this.stages_configuration[curr_idx],\n          data: []\n        }\n      },\n      test_title: `${curr_idx + 1}/${this.stages_configuration.length} ${this.stages_configuration[curr_idx].page_title}`\n    });\n    console.log(this.state.stages);\n    this.stages[curr_idx].run();\n  }\n\n  async start_test() {\n    await this.setState({\n      test_running: true,\n    });\n    this.advance_stage();\n  }\n\n  add_latency_to_current_stage(latency) {\n    let curr_idx = this.state.current_stage_idx,\n      current_stage = this.state.stages[curr_idx],\n      current_data = current_stage.data || [];\n    this.setState({\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          ...current_stage,\n          data: [...current_data, {value: latency}]\n        }\n      }\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Col sm={12}>\n          <Row style={{ marginTop: 40 }}>\n            <Col sm={12}>\n              <Card className=\"WBBCard WBBMainTestCard\">\n                <Card.Header>\n                  <h2>{this.state.test_title}</h2>\n                </Card.Header>\n                { !this.state.test_running ? (\n                  <Card.Body>\n                    <Card.Text>\n                      Click below to start running the test.\n                    </Card.Text>\n                    <Button variant=\"primary\" onClick={this.start_test.bind(this)}>Start Test</Button>\n                  </Card.Body>\n                ) : (\n                  <Card.Body>\n                    <LatencyResultsReport/>\n                    {\n                      Object.keys(this.state.stages).map((i) => {\n                        let stage = this.state.stages[i];\n                        return (<LatencyStageReport\n                          title={stage.configuration.title}\n                          key={stage.configuration.name}\n                          data={stage.data}\n                        />);\n                      })\n                    }\n                  </Card.Body>\n                )}\n              </Card>\n            </Col>\n          </Row>\n        </Col>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport BoxPlot from \"../components/box_plot\";\n\n\nexport default class BoxPlotSample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [1, 2, 3, 4].map((d) => {return {value: d, time: (Date.now() + d)}})\n      //data: []\n    }\n  }\n\n  add_data() {\n    this.i = this.i || 1;\n    this.i++;\n    this.state.data.push({value:this.i});\n    this.setState({\n      data: this.state.data\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Button onClick={this.add_data.bind(this)}>Add Data!</Button>\n          </Row>\n          <Row>\n            <BoxPlot\n              tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              width={800}\n              height={100}\n              data={this.state.data}\n            />\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Downloader from \"../tools/downloader\";\n\n\nexport default class BitrateStreamSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n          <Button onClick={this.download.bind(this)}>download</Button>\n          <Button onClick={this.cancel.bind(this)}>cancel</Button>\n        </Container>\n      </>\n    );\n  }\n\n  async download() {\n    const meas_callback = (measurement) => {\n      console.log(`rate ${measurement/1e6}mbps`);\n    },\n    done_callback = (measurement) => {\n      console.log(`Done rate ${measurement/1e6}mbps`);\n    };\n\n    this.downloader = new Downloader(meas_callback, done_callback)\n    const res = await this.downloader.measure(100*1e6, 4);\n    console.log(\"done with downloading\", res/1e6)\n  }\n\n  cancel() {\n    console.log(\"cancelled\");\n    this.downloader.cancel();\n  }\n\n  async download2() {\n    let size = 100 * 1e6;\n    //let size = 10;\n    let res = await fetch(`https://speed1.arshankhanifar.workers.dev/hi/down?bytes=${size}`);\n    const reader = res.body.getReader();\n    const window_size = 1e6;\n    let window = 0;\n\n    let start = Date.now(),\n      total_start = start;\n\n    const stream = new ReadableStream({\n      start(controller) {\n        return pump();\n        function pump() {\n          return reader.read().then(({ done, value }) => {\n            // When no more data needs to be consumed, close the stream\n            if (done) {\n              console.log(\"shits done\");\n              const total_speed = size/(Date.now() - total_start);\n              const total_speed_mbps = total_speed * 8 / 1000;\n              console.log(\"average speed:\", total_speed_mbps);\n              controller.close();\n              return;\n            }\n            // Enqueue the next data chunk into our target stream\n            window += value.length;\n            if (window > window_size) {\n              let speed = window/(Date.now() - start);\n              let speed_mbitps = speed * 8/ 1000;\n              console.log(`speed: ${speed_mbitps}mbps`);\n              window = 0;\n              start = Date.now();\n            }\n            return pump();\n          });\n        }\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from \"./pages/main_page\";\nimport BoxPlotSample from \"./samples/box_plot_sample\";\nimport BitrateStreamSample from \"./samples/bitrate_stream_sample\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\n\n\nexport default class BoxPlot extends Component {\n  TRANSITION_TIME = 300;\n  DOT_COLOUR = \"#4a90e2\";\n\n  constructor(props) {\n    super(props);\n    this.chart_component = React.createRef();\n    this.data = props.data || [];\n    this.height = props.height || 80;\n    this.width = props.width || 460;\n    this.scale = props.scale;\n    // eslint-disable-next-line no-template-curly-in-string\n    this.tooltip_html = this.props.tooltip_html || 'value: ${d.value}';\n\n  }\n\n  calculate_important_values(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    return StatisticsUtilities.calculate_important_values(sorted);\n  }\n\n  get_chart_parameters() {\n    const margin = {top: 10, right: 30, bottom: 10, left: 40},\n      width = this.width - margin.left - margin.right,\n      height = this.height - margin.top - margin.bottom,\n      point_position_relative_to_top = 3/4 * height,\n      middle_anchor_relative_to_top = 1/4 * height;\n\n    return [margin, width, height, point_position_relative_to_top, middle_anchor_relative_to_top];\n  }\n\n  componentDidMount() {\n    let [margin, width, height] = this.get_chart_parameters();\n\n    let svg = d3.select(this.chart_component.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    this._svg = svg;\n    let data = this.data;\n    this.update_scale(data);\n\n    this._points_container = svg.append(\"g\")\n      .attr(\"id\", \"data_points\");\n\n    this.add_tooltip();\n    this.draw_points(data);\n    this.add_line_with_ticks(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n  }\n\n  add_tooltip() {\n    this._tooltip = d3.select(this.chart_component.current)\n      .append(\"div\")\n      .style(\"opacity\", 0)\n      .attr(\"class\", \"tooltip\")\n      .style(\"border\", \"solid\")\n      .style(\"background-color\", \"white\")\n      .style(\"border-width\", \"2px\")\n      .style(\"border-radius\", \"5px\")\n      .style(\"padding\", \"5px\");\n  }\n\n  set_circle_attributes(selection) {\n    let [,,, rel_pos] = this.get_chart_parameters();\n    let tooltip = this._tooltip;\n    let component = this;\n\n    let mouseover = function(d) {\n      tooltip.style(\"opacity\", 1);\n      d3.select(this)\n        .style(\"stroke\", \"black\")\n        .style(\"opacity\", 1);\n    };\n\n    let mousemove = function(e, d) {\n      let relative_dist = d3.pointer(e, this);\n      tooltip.html(eval(\"`\" + component.tooltip_html + \"`\"))\n        .style(\"left\", (relative_dist[0]) + \"px\")\n        .style(\"top\", (relative_dist[1]) + rel_pos + \"px\");\n    };\n\n    let mouseleave = function(d) {\n      tooltip\n        .style(\"opacity\", 0);\n      d3.select(this)\n        .style(\"stroke\", \"none\")\n        .style(\"opacity\", 0.8);\n    };\n\n    selection.attr(\"cy\", () => rel_pos)\n      .attr(\"r\", 3)\n      .attr(\"fill\", this.DOT_COLOUR)\n      .on(\"mouseover\", mouseover)\n      .on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave);\n  }\n\n  draw_points(data) {\n    let x = this._x_scale;\n    let selection = this._points_container\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) => x(d.value));\n    this.set_circle_attributes(selection);\n  }\n\n  update_points_locations(data) {\n    let circles = this._points_container\n      .selectAll(\"circle\")\n      .data(data);\n\n    circles\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"cx\", d => this._x_scale(d.value));\n  }\n\n  add_line_with_ticks(data) {\n    let indicator_tick_height = 10,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale,\n      svg = this._svg;\n\n    let [,,, min, max,] = this.calculate_important_values(data);\n    let [, width,,, mid_anchor_rel] = this.get_chart_parameters();\n\n    let middle_anchor = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + mid_anchor_rel + \")\");\n\n    this._middle_anchor = middle_anchor;\n\n    let x_min = x(min) || 0,\n        x_max = x(max) || width;\n\n    middle_anchor.append(\"line\")\n      .attr(\"x1\", x_min)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", x_max)\n      .attr(\"y2\", 0)\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    function make_tic(at) {\n      middle_anchor.append(\"line\")\n        .attr(\"x1\", at)\n        .attr(\"y1\", -indicator_tick_height/2)\n        .attr(\"x2\", at)\n        .attr(\"y2\", +indicator_tick_height/2)\n        .attr(\"stroke\", indicator_stroke_colour);\n    }\n\n    make_tic(x_min);\n    make_tic(x_max);\n  }\n\n  add_quartile_box_if_it_doesnt_exist(data) {\n    if (this._quartile_box || data.length < 5) {\n      return\n    }\n    this.add_quartile_box(data);\n  }\n\n  add_quartile_box(data) {\n    let indicator_box_height = 20,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale;\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n\n    this._quartile_box =  this._middle_anchor\n      .append(\"g\")\n      .attr(\"id\", \"quartile_box\");\n\n    this._quartile_rect = this._quartile_box.append(\"rect\")\n      .attr(\"x\", x(q1))\n      .attr(\"y\", -indicator_box_height/2)\n      .attr(\"height\", indicator_box_height)\n      .attr(\"width\", x(q3) - x(q1))\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    this._median_line = this._quartile_box.append(\"line\")\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n      .attr(\"y1\", -indicator_box_height/2)\n      .attr(\"y2\", +indicator_box_height/2)\n      .attr(\"stroke\", indicator_stroke_colour)\n      .attr(\"stroke-width\", 1.5);\n\n  }\n\n  update_scale(data) {\n    let [, width,] = this.get_chart_parameters();\n    if (this.props.scale) {\n      if (!this._x_scale) {\n        let [min, max] = this.props.scale;\n        console.log('scaleee babyy', this.props.scale);\n        let range_padding = (max - min) * 0.05;\n        this._x_scale = d3.scaleLinear()\n          .domain([max + range_padding, min - range_padding])\n          .range([width, 0]);\n      }\n      return;\n    }\n    let [,,, min, max,] = this.calculate_important_values(data),\n    range_padding = (max - min) * 0.05;\n    this._x_scale = d3.scaleLinear()\n      .domain([max + range_padding, min - range_padding])\n      .range([width, 0]);\n  }\n\n  update_box(data) {\n    if (!this._quartile_box) {\n      return;\n    }\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n    let x = this._x_scale;\n    this._quartile_rect\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x\", x(q1))\n      .attr(\"width\", x(q3) - x(q1));\n    this._median_line\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n  }\n\n  refresh_chart() {\n    let data = this.data;\n    this.update_scale(data);\n    this.update_points_locations(data);\n    this.draw_points(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n    this.update_box(data);\n  }\n\n  add_point(datum) {\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.data = prevProps.data || [];\n    this.refresh_chart();\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.chart_component}/>\n      </>\n    );\n  }\n}\n","import * as d3 from 'd3';\n\n\nexport default class StatisticsUtilities {\n  static calculate_important_values(sorted_data) {\n    let q1 = d3.quantile(sorted_data,.25),\n      q3 = d3.quantile(sorted_data,.75),\n      median = d3.quantile(sorted_data,.5),\n      min = sorted_data[0],\n      max = sorted_data[sorted_data.length - 1],\n      std = d3.deviation(sorted_data) || 0;\n    return [q1, q3, median, min, max, std];\n  }\n}"],"sourceRoot":""}