{"version":3,"sources":["app_configuration.js","serviceWorker.js","components/latency_stats_component.js","components/latency_box_plot.js","components/latency_stage_report.js","styles_configuration.js","components/bufferbloat_callouts.js","components/latency_results_report.js","stages/stage.js","utilities/timer.js","tools/generic_latency_collector.js","tools/latency_collector_provider.js","tools/latency_candidates.js","stages/latency_measurement_stage.js","tools/download_measurement_collector.js","stages/downlink_measurement_stage.js","tools/upload_measurement_collector.js","stages/uplink_measurement_stage.js","components/bandwidth_report_component.js","components/card_title_component.js","tools/report_generator.js","pages/main_page.js","samples/upload_websockets_sample.js","samples/guess_upload_sample.js","index.js","utilities/statistics_utilities.js","components/box_plot.js"],"names":["AppConfiguration","PING_INTERVAL","MAX_LATENCY_PLOTTED","DOWNLOAD_NUM_STREAMS","UPLOAD_NUM_STREAMS","IGNORE_TTFB_BELOW","NUM_LATENCY_MEASUREMENTS","DOWNLOAD_DURATION","UPLOAD_DURATION","Boolean","window","location","hostname","match","LatencyStatsComponent","props","Row","style","fontSize","fontWeight","whiteSpace","Col","sm","this","min","median","max","q1","q3","jitter","Component","LatencyBoxPlot","LatencyStageReport","Card","Body","className","md","xs","marginTop","title","data","scale","box_plot_scale","tooltip_html","stats","StylesConfiguration","BufferbloatCallouts","stage","i","measurement","status_class","toFixed","textAlign","Object","keys","stage_data","map","k","key","length","borderLeft","configuration","report_bufferbloat","LatencyResultsReport","Stage","Timer","ms","Promise","resolve","setTimeout","GenericLatencyCollector","url","interval","interval_cb","done_cb","count","cancelled","fetch","then","res","text","entries","performance","getEntriesByName","perf","slice","pop","ttfb","responseStart","requestStart","clearResourceTimings","sleep","LatencyCollectorProvider","data_cb","LatencyMeasurementStage","data_callback","done_callback","collector","provide","start","DownloadMeasurementCollector","measurement_callback","controller","AbortController","size","signal","r","streams","measure_download","n","cancel","num_streams","Array","fill","_","req","get_http_fetch","total_start","Date","now","counter","total_counter","reset_counter","speed","convert_to_bps","requests","make_requests","a","console","log","reader","body","getReader","pump","read","done","value","all","rate_bps","abort","DownlinkMeasurementStage","bandwidth_callback","downloader","download_for_n_seconds","download_speed","UploadMeasurementCollector","started_saturation_cb","method","repeat","headers","response","this_repeats_n_times","threshold","last_bandwidth","bandwidth","measure_bandwidth","Math","abs","j","check","n_seconds","guess_upload_speed","guess_bandwidth_byteps","file_size","UplinkMeasurementStage","uploader","upload","upload_speed","BandwidthReportComponent","CardTitleComponent","category","criteria","criterion","reduce","b","report","grade","marginBottom","categories","name","src","get_picture","alt","ReportGenerator","test_data","downlink","uplink","latency","latency_with_jitter","stages_data","stages","gradings","until","Infinity","latencies","downlink_bb","uplink_bb","combined_bb","measurements","criteria_names","dict","c_name","grading","UploadWebsocketsSample","Navbar","bg","Brand","href","Container","Button","onClick","bind","print_bandwidth","bw","xhr","XMLHttpRequest","addEventListener","e","position","loaded","total","totalSize","floor","start_tmp","last_done","onprogress","onreadystatechange","readyState","open","setRequestHeader","send","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","StatisticsUtilities","sorted_data","d3","BoxPlot","TRANSITION_TIME","DOT_COLOUR","chart_component","React","createRef","filter","d","is_invalid","height","width","sorted","sort","calculate_important_values","margin","top","right","bottom","left","get_chart_parameters","svg","current","append","attr","_svg","update_scale","_points_container","add_tooltip","draw_points","add_line_with_ticks","add_quartile_box_if_it_doesnt_exist","_tooltip","selection","rel_pos","tooltip","component","mouseover","mousemove","relative_dist","html","eval","mouseleave","on","x","_x_scale","selectAll","enter","set_circle_attributes","transition","duration","mid_anchor_rel","middle_anchor","_middle_anchor","x_min","x_max","make_tic","at","main_line","tick_1","tick_2","_quartile_box","add_quartile_box","_quartile_rect","_median_line","domain","range","transition_tick","tick","update_points_locations","update_line_with_ticks","update_box","datum","push","refresh_chart","prevProps","prevState","snapshot","ref"],"mappings":"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","file":"static/js/main.d0650ee0.chunk.js","sourcesContent":["export const AppConfiguration = {\n  PING_INTERVAL: 100,\n  MAX_LATENCY_PLOTTED: 200,\n  DOWNLOAD_NUM_STREAMS: 10,\n  UPLOAD_NUM_STREAMS: 8,\n  IGNORE_TTFB_BELOW: 3,\n  NUM_LATENCY_MEASUREMENTS: 30,\n  DOWNLOAD_DURATION: 5,\n  UPLOAD_DURATION: 5,\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App_old is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nexport default class LatencyStatsComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <>\n        <Row style={{fontSize: 13, fontWeight: 'bold', whiteSpace: 'nowrap'}}>\n          <Col sm={6}>\n            min: {this.props.min}ms<br/>\n            median: {this.props.median}ms<br/>\n            max: {this.props.max}ms\n          </Col>\n          <Col sm={6}>\n            25%: {this.props.q1}ms<br/>\n            75%: {this.props.q3}ms<br/>\n            jitter: {this.props.jitter}ms\n          </Col>\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport BoxPlot from \"./box_plot\";\n\nexport default class LatencyBoxPlot extends Component {\n  render() {\n    return (\n      <BoxPlot\n        {...this.props}\n      />\n    );\n  }\n\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport LatencyStatsComponent from \"./latency_stats_component\";\nimport './latency_stage_report.scss';\nimport LatencyBoxPlot from \"./latency_box_plot\";\n\n\nexport default class LatencyStageReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className={\"WBBLatencyStageReport\"}>\n          <Row>\n            <Col md={2} xs={2}>\n              <h5 style={{marginTop: 15}}>{this.props.title}</h5>\n            </Col>\n            <Col md={7} xs={10}>\n              <LatencyBoxPlot\n                data={this.props.data}\n                scale={this.props.box_plot_scale}\n                tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              />\n            </Col>\n            <Col md={3} xs={12}>\n              <LatencyStatsComponent\n                data={this.props.data}\n                {...this.props.stats}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","export const StylesConfiguration = {\n  DIVIDER_BORDERS: \"1px solid #979797\",\n};\n\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {StylesConfiguration} from \"../styles_configuration\";\n\n\nexport default class BufferbloatCallouts extends Component {\n  constructor(props) {\n    super(props);\n    this.median = 0;\n  }\n\n  report_bufferbloat(stage, i) {\n    if (!stage.stats) {\n      return ;\n    }\n    const BAD_MEASUREMENT_THRESHOLD = 50;\n    let measurement = 0, status_class=\"\";\n    if (i === 0) {\n      measurement = stage.stats.median;\n      this.median = measurement;\n    } else {\n      measurement = stage.stats.median - this.median;\n      measurement = (measurement >= 0) ? measurement : 0;\n      measurement = `+${measurement.toFixed(2)}`;\n      status_class = (measurement < BAD_MEASUREMENT_THRESHOLD) ? \"good\" : \"bad\";\n    }\n    measurement += \" ms\";\n    return (\n      <div className={`latency ${status_class}`}>\n        {\n          measurement\n        }\n      </div>\n    )\n  }\n\n\n  render() {\n    return (\n      <>\n        <Row style={{textAlign: 'center'}}>\n          {Object.keys(this.props.stage_data).map((k, i) => {\n            const stage = this.props.stage_data[k];\n            return (\n              <Col\n                key={k}\n                sm={12/this.props.stage_data.length}\n                style={ (i !== 0) ? {borderLeft: StylesConfiguration.DIVIDER_BORDERS}: {}}>\n                <div className=\"condition\">\n                  {stage.configuration.title}\n                </div>\n                {\n                  this.report_bufferbloat(stage, i)\n                }\n              </Col>\n            )\n          })}\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport BufferbloatCallouts from \"./bufferbloat_callouts\";\n\n\nexport default class LatencyResultsReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className=\"WBBLatencySummary\">\n          <Row>\n            <Col sm={12} md={7}>\n              <h4>Latency Results</h4>\n              <p>Bufferbloat is measured by comparing the latency of an Internet connection when it is unloaded to when it is \"saturated.\"</p>\n            </Col>\n            <Col sm={12} md={5}>\n              <BufferbloatCallouts\n                stage_data={this.props.stage_data}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","export default class Stage {\n  async run() {\n\n  }\n}\n","export default class Timer {\n  static async sleep(ms) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    })\n  }\n}\n","import Timer from \"../utilities/timer\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class GenericLatencyCollector {\n  constructor(url, interval, interval_cb, done_cb, count) {\n    this.url = url;\n    this.interval = interval;\n    this.interval_cb = interval_cb;\n    this.done_cb = done_cb;\n    this.count = count;\n    this.cancelled = false;\n  }\n\n  async start() {\n    let i = 0;\n    while (i++ < this.count) {\n      await fetch(this.url).then(res => res.text());\n      let entries = performance.getEntriesByName(this.url);\n      let perf  = entries.slice(-1).pop();\n      let ttfb = perf.responseStart - perf.requestStart;\n      if (this.cancelled) {\n        return ;\n      }\n      if (ttfb < AppConfiguration.IGNORE_TTFB_BELOW) {\n        continue\n      }\n      this.interval_cb(ttfb);\n      performance.clearResourceTimings();\n      await Timer.sleep(this.interval)\n    }\n    if (this.done_cb) {\n      this.done_cb();\n    }\n  }\n\n  cancel() {\n    this.cancelled = true;\n  }\n}\n","import {AppConfiguration} from \"../app_configuration\";\nimport GenericLatencyCollector from \"./generic_latency_collector\";\nimport {main_candidate} from \"./latency_candidates\";\n\nexport default class LatencyCollectorProvider {\n  static provide(data_cb, done_cb, count) {\n    return new GenericLatencyCollector(\n      main_candidate,\n      AppConfiguration.PING_INTERVAL,\n      data_cb,\n      done_cb,\n      count\n    );\n  }\n}","let urls = [\n  \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2\",\n  \"https://fonts.gstatic.com/l/font?kit=KFOmCnqEu92Fr1Me4GZNCzcPK4I&skey=a0a0114a1dcab3ac&v=v20\",\n  \"https://speed.cloudflare.com/__down?bytes=0\"\n], main_candidate = urls[1];\n\nexport {main_candidate}\n","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class LatencyMeasurementStage extends Stage {\n  constructor(data_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    super.run();\n    const collector = LatencyCollectorProvider\n      .provide(this.data_callback, this.done_callback, AppConfiguration.NUM_LATENCY_MEASUREMENTS);\n    await collector.start();\n  }\n}","import Timer from \"../utilities/timer\";\n\nexport default class DownloadMeasurementCollector {\n  constructor(measurement_callback, done_callback) {\n    this.measurement_callback = measurement_callback || (() => null);\n    this.done_callback = done_callback || (() => null);\n    this.controller = new AbortController();\n  }\n\n  get_http_fetch(size, i) {\n    let signal = this.controller.signal;\n    return fetch(`https://speed${i+1}.arshankhanifar.workers.dev/hi/down?bytes=${size}`, {signal});\n  }\n\n  convert_to_bps(r) {\n    return r*1000*8;\n  }\n\n  async download(size, streams) {\n    return this.measure_download(size, streams)\n  }\n\n  async download_for_n_seconds(n, streams) {\n    const MAX_DOWNLOAD_SIZE = 500 * 1e6;\n    setTimeout(() => {this.cancel()}, n * 1000);\n    return this.measure_download(MAX_DOWNLOAD_SIZE, streams);\n  }\n\n  make_requests(num_streams, size) {\n    return Array(num_streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map((req, i) => {\n        req.fetch = () => this.get_http_fetch(size, i);\n        return req;\n      })\n  }\n\n  async measure_download(size, streams) {\n    const window_size = 1e6,\n      total_start = Date.now();\n    let start = Date.now(),\n      counter = 0,\n      total_counter = 0;\n\n    const reset_counter = () => {\n      if (counter < window_size) {\n        return;\n      }\n      let speed = this.convert_to_bps(counter / (Date.now() - start));\n      this.measurement_callback(speed);\n      counter = 0;\n      start = Date.now();\n    };\n\n    let requests = this.make_requests(streams, size)\n      .map(async (req, i) => {\n        let res = null;\n        try {\n          res = await req.fetch();\n        } catch (e) {\n          console.log(`download request:${i} unsuccessful`, e);\n          return Promise.resolve();\n        }\n        const reader = res.body.getReader();\n        return new Promise(async resolve => {\n          try {\n            await pump();\n          } catch (err) {\n            resolve();\n          }\n          function pump() {\n            return reader.read().then(({ done, value }) => {\n              if (done) {\n                resolve();\n                return;\n              }\n              counter += value.length;\n              total_counter += value.length;\n              reset_counter();\n              return pump();\n            });\n          }\n        });\n      });\n    await Promise.all(requests);\n    let rate_bps = this.convert_to_bps(total_counter/(Date.now() - total_start));\n    this.done_callback(rate_bps);\n    return rate_bps;\n  }\n\n  cancel() {\n    this.controller.abort();\n  }\n}","import Stage from \"./stage\";\nimport DownloadMeasurementCollector from \"../tools/download_measurement_collector\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class DownlinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    const meas_callback = (measurement) => {\n        console.log(`realtime rate ${measurement/1e6}mbps`);\n    };\n    const downloader = new DownloadMeasurementCollector(meas_callback);\n    let download_speed = await downloader.download_for_n_seconds(\n      AppConfiguration.DOWNLOAD_DURATION,\n      AppConfiguration.DOWNLOAD_NUM_STREAMS\n    );\n    collector.cancel();\n    this.bandwidth_callback(download_speed);\n    this.done_callback();\n  }\n}","export default class UploadMeasurementCollector {\n  constructor(started_saturation_cb) {\n    this.started_saturation_cb = started_saturation_cb || (() => {});\n  }\n\n  get_http_fetch(size, i) {\n    let url = `https://speed${i + 1}.arshankhanifar.workers.dev/hi/up`;\n    return fetch(`${url}`, {\n        method: 'POST',\n        body: '0'.repeat(size),\n        headers: { 'content-length': size }\n    });\n  }\n\n  async measure_bandwidth(i) {\n    let start = Date.now();\n    let response = await this.get_http_fetch(i, 1);\n    await response.text();\n    return (i/(Date.now() - start));\n  }\n\n  async guess_upload_speed() {\n    let this_repeats_n_times = async (n, threshold, last_bandwidth, size) => {\n      let bandwidth = null;\n      for (let i = 0; i < n; i++) {\n        bandwidth = await this.measure_bandwidth(size);\n        console.log('bw', bandwidth * 8 / 1e3);\n        let relative_growth = Math.abs(bandwidth - last_bandwidth)/bandwidth;\n        if (relative_growth > threshold) {\n          return [false, bandwidth];\n        }\n      }\n      return [true, bandwidth];\n    };\n    let threshold = 0.2;\n    let last_bandwidth = 0;\n    for (let j = 1; j < 30; j++) {\n      let size = 1 << j;\n      let [check, bandwidth] = await this_repeats_n_times(2, threshold, last_bandwidth, size);\n      if (check) {\n        return bandwidth * 1e3; // Bytes per second\n      }\n      last_bandwidth = bandwidth;\n    }\n    return last_bandwidth;\n  }\n\n  async upload(n_seconds, streams) {\n    let guess_bandwidth_byteps = await this.guess_upload_speed();\n    this.started_saturation_cb();\n    let file_size = n_seconds * guess_bandwidth_byteps / streams;\n    let start = Date.now();\n    let requests = Array(streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map((req, i) => {\n        req.fetch = () => this.get_http_fetch(file_size, i);\n        return req;\n      });\n    await Promise.all(requests.map(req=>req.fetch().then(res=>res.text())));\n    console.log(`total time took:${(Date.now() - start)/1000}`);\n    return ((file_size * streams * 1000 * 8)/(Date.now() - start));\n  }\n}","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport UploadMeasurementCollector from \"../tools/upload_measurement_collector\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class UplinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    let uploader = new UploadMeasurementCollector(() => {\n      collector.start();\n    });\n    let upload_speed = await uploader.upload(AppConfiguration.UPLOAD_DURATION, AppConfiguration.UPLOAD_NUM_STREAMS);\n    collector.cancel();\n    this.bandwidth_callback(upload_speed);\n    this.done_callback();\n  }\n}","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {StylesConfiguration} from \"../styles_configuration\";\n\n\nexport default class BandwidthReportComponent extends Component {\n  render() {\n    return (\n      <>\n        {\n          (this.props.download_speed || this.props.upload_speed) &&\n          (\n            <Row>\n              <Col sm={0} md={3}></Col>\n              <Col sm={12} md={3}>\n                <h4 style={{marginTop: 10}}>Speed Test Results:</h4>\n              </Col>\n              <Col sm={12} md={3} style={{textAlign: 'center'}}>\n                <Row>\n                  {\n                    this.props.download_speed &&\n                    (<Col sm={6}>\n                      <div>\n                        ↓ Download\n                      </div>\n                      <div style={{fontSize: 20}}>\n                        {(this.props.download_speed/1e6).toFixed(2)}Mbps\n                      </div>\n                    </Col>)\n                  }\n                  {\n                    this.props.upload_speed &&\n                    (<Col sm={6} style={{borderLeft: StylesConfiguration.DIVIDER_BORDERS}}>\n                      <div>\n                        ↑ Upload\n                      </div>\n                      <div style={{fontSize: 20}}>\n                        {(this.props.upload_speed/1e6).toFixed(2)}Mbps\n                      </div>\n                    </Col>)\n                  }\n                </Row>\n              </Col>\n            </Row>\n          )\n        }\n      </>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {StylesConfiguration} from \"../styles_configuration\";\n\n\nexport default class CardTitleComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  get_picture(category) {\n    const criteria = Object.keys(category.criteria);\n    let met_criteria = criteria.map(criterion => category.criteria[criterion]).reduce((a, b) => a && b);\n    return (met_criteria) ? \"shield.svg\" : \"bad.svg\";\n  }\n\n  render() {\n    return (\n      <>\n        {\n          this.props.report ? (\n            <div className={\"WBBCardTitle WBBTestingDone\"}>\n              <h2>\n                Your Bufferbloat Grade: {this.props.report.grade}\n              </h2>\n              <Row style={{marginTop: 15, marginBottom: 15}}>\n                {this.props.report.categories.map(category => (\n                  <div className={\"indicator\"} key={category.name}>\n                    <img src={this.get_picture(category)} alt=\"indicator-good\"/>\n                       {' '}\n                       <strong>\n                         {category.name}\n                       </strong>\n                       {' '}\n                  </div>\n                ))}\n              </Row>\n            </div>\n          ):(\n            <div className={\"WBBCardTitle\"}>\n              <h2>{this.props.title}</h2>\n            </div>\n          )\n        }\n      </>\n    )\n  }\n}\n","export default class ReportGenerator {\n  static generate_report(test_data) {\n    const LARGER_THAN = \"LARGER_THAN\",\n      SMALLER_THAN = \"SMALLER_THAN\";\n    const categories = [\n      // sources:\n      // 1. https://broadbandnow.com/guides/how-much-internet-speed-do-i-need\n      // 2. https://www.phone.com/much-bandwidth-need-voip/\n      // 3. https://www.lifewire.com/what-is-latency-and-how-it-can-be-reduced-3426314#:~:text=Latency%20is%20measured%20in%20milliseconds,higher%2C%20latency%20becomes%20completely%20unacceptable.\n      // 4. https://www.highspeedinternet.com/resources/how-much-speed-do-i-need-for-online-gaming\n      {\n        name: \"Web Browsing\",\n        criteria: {\n          downlink: [LARGER_THAN, 1],\n          uplink: [LARGER_THAN, 1],\n          latency: null,\n          latency_with_jitter: null,\n        }\n      },\n      {\n        name: \"Audio Calls\",\n        criteria: {\n          downlink: [LARGER_THAN, 3],\n          uplink: [LARGER_THAN, 3],\n          latency: [SMALLER_THAN, 150],\n          latency_with_jitter: [SMALLER_THAN, 200],\n        }\n      },\n      {\n        name: \"4K Video Streaming\",\n        criteria: {\n          downlink: [LARGER_THAN, 40],\n          uplink: null,\n          latency: null,\n          latency_with_jitter: null,\n        }\n      },\n      {\n        name: \"Video Conferencing\",\n        criteria: {\n          downlink: [LARGER_THAN, 2.5],\n          uplink: [LARGER_THAN, 2.5],\n          latency: [SMALLER_THAN, 150],\n          latency_with_jitter: [SMALLER_THAN, 200],\n        }\n      },\n      {\n        name: \"Online Gaming\",\n        criteria: {\n          downlink: [LARGER_THAN, 3],\n          uplink: [LARGER_THAN, 0.5],\n          latency: [SMALLER_THAN, 100],\n          latency_with_jitter: [SMALLER_THAN, 150],\n        }\n      }\n    ];\n\n    let [downlink, uplink] = [test_data.download_speed/1e6, test_data.upload_speed/1e6],\n      stages_data = Object.keys(test_data.stages).map(k => test_data.stages[k]),\n      latency = Math.max(...stages_data.map(stage_data => stage_data.stats.median)),\n      latency_with_jitter = Math.max(\n      ...stages_data.map(\n        stage_data => stage_data.stats.median + stage_data.stats.jitter\n      )\n    );\n\n    const gradings =  [\n      {\n        until: 5,\n        grade: \"A+\"\n      },\n      {\n        until: 30,\n        grade: \"A\"\n      },\n      {\n        until: 60,\n        grade: \"B\"\n      },\n      {\n        until: 200,\n        grade: \"C\"\n      },\n      {\n        until: 400,\n        grade: \"D\"\n      },\n      {\n        until: Infinity ,\n        grade: \"F\"\n      }\n    ];\n\n    const latencies = test_data.stages.map(stage_data => stage_data.stats.median);\n    let  downlink_bb = (latencies[1] - latencies[0]),\n      uplink_bb = latencies[2] - latencies[0];\n    downlink_bb = (downlink_bb > 0) ? downlink_bb : 0;\n    uplink_bb = (downlink_bb > 0) ? uplink_bb : 0;\n    const combined_bb = (downlink_bb + uplink_bb)/2;\n    const measurements = {\n      downlink: downlink,\n      uplink: uplink,\n      latency: latency,\n      latency_with_jitter: latency_with_jitter,\n    };\n\n    function grade(combined_bb) {\n      for (let i in gradings) {\n        let grading = gradings[i];\n        if (combined_bb < grading.until) {\n          return grading.grade;\n        }\n      }\n      return gradings.slice(-1).pop().grade;\n    }\n\n    return {\n      categories: categories.map(category => {\n        const criteria = category.criteria,\n          criteria_names = Object.keys(criteria);\n        const report = {\n          name: category.name,\n          criteria: criteria_names.reduce((dict, c_name) => {\n            if (criteria[c_name] === null) {\n              dict[c_name] = true;\n              return dict;\n            }\n            if (criteria[c_name][0] === LARGER_THAN) {\n              dict[c_name] = measurements[c_name] > criteria[c_name][1];\n              return dict;\n            }\n            dict[c_name] = measurements[c_name] < criteria[c_name][1];\n            return dict;\n          }, {})\n        };\n        return report;\n\n      }),\n      grade: grade(combined_bb)\n    }\n  }\n}","import * as d3 from 'd3';\nimport React, {Component} from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport '../components/component_styles.scss';\nimport LatencyStageReport from \"../components/latency_stage_report\";\nimport LatencyResultsReport from \"../components/latency_results_report\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport LatencyMeasurementStage from \"../stages/latency_measurement_stage\";\nimport DownlinkMeasurementStage from \"../stages/downlink_measurement_stage\";\nimport UplinkMeasurementStage from \"../stages/uplink_measurement_stage\";\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport {DEBUG_STATE} from \"../test/debug_state\";\nimport BandwidthReportComponent from \"../components/bandwidth_report_component\";\nimport CardTitleComponent from \"../components/card_title_component\";\nimport ReportGenerator from \"../tools/report_generator\";\n\n\nexport default class MainPage extends Component {\n  BOX_PLOT_SCALE_DEFAULT = [4, 10];\n  constructor(props) {\n    super(props);\n    this.stages_configuration = [\n      {\n        name: \"unloaded\",\n        title: \"Unloaded\",\n        page_title: \"Measuring Unloaded Latency\"\n      },\n      {\n        name: \"down\",\n        title: \"↓ Saturated\",\n        page_title: \"Measuring Latency With Downlink Saturated\"\n      },\n      {\n        name: \"up\",\n        title: \"↑ Saturated\",\n        page_title: \"Measuring Latency With Uplink Saturated\"\n      }\n    ];\n    this.stage_context = null;\n    this.state = {\n      test_running: false,\n      test_title: 'Bufferbloat Test',\n      current_stage_idx: -1,\n      stages: {},\n      box_plot_scale: this.BOX_PLOT_SCALE_DEFAULT,\n      download_speed: null,\n      upload_speed: null,\n    };\n    this.stages = [\n      new LatencyMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new DownlinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.downlink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new UplinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.uplink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      )\n    ];\n  }\n\n\n  downlink_measurement(bandwidth) {\n    this.setState({\n      download_speed: bandwidth\n    });\n  }\n\n  uplink_measurement(bandwidth) {\n    this.setState({\n      upload_speed: bandwidth\n    });\n  }\n\n  componentDidMount() {\n    this.debug().then(()=>{});\n\n  }\n\n  async debug() {\n    //await this.start_test();\n    //await this.setState({\n    //  ...DEBUG_STATE[4],\n    //  current_stage_idx: 4\n    //});\n    //await this.advance_stage();\n  }\n\n  async advance_stage() {\n    let curr_idx = this.state.current_stage_idx + 1;\n    if (curr_idx >= this.stages.length) {\n      console.log(\"done running all the tests\");\n      console.log(\"state\", JSON.stringify(this.state));;\n      let stages_flattened = this.state.stages;\n      stages_flattened = Object.keys(stages_flattened).map(k => stages_flattened[k]);\n      await this.setState({\n        report: ReportGenerator.generate_report({\n          stages: stages_flattened,\n          download_speed: this.state.download_speed,\n          upload_speed: this.state.upload_speed,\n        })\n      });\n      return;\n    }\n    await this.setState({\n      current_stage_idx: curr_idx,\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          configuration: this.stages_configuration[curr_idx],\n          data: []\n        }\n      },\n      test_title: `${curr_idx + 1}/${this.stages_configuration.length} ${this.stages_configuration[curr_idx].page_title}`\n    });\n    this.stages[curr_idx].run(this.stage_context);\n  }\n\n  async start_test() {\n    await this.setState({\n      test_running: true,\n    });\n    this.advance_stage();\n  }\n\n  adjust_scale(latency) {\n    if (latency > AppConfiguration.MAX_LATENCY_PLOTTED) {\n      return;\n    }\n    if (latency > this.state.box_plot_scale[1]) {\n      this.setState({\n        box_plot_scale: [0, latency]\n      })\n    }\n  }\n\n  add_latency_to_current_stage(latency) {\n    this.adjust_scale(latency);\n    let curr_idx = this.state.current_stage_idx,\n      current_stage = this.state.stages[curr_idx],\n      current_data = current_stage.data || [],\n      new_data = [...current_data, {value: latency}];\n    this.setState({\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          ...current_stage,\n          data: new_data,\n          stats: {\n            ...this.calculate_stats(new_data)\n          }\n        }\n      }\n    })\n  }\n\n  calculate_stats(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    let [q1, q3, median, min, max, std] = StatisticsUtilities\n      .calculate_important_values(sorted)\n      .map(d => parseFloat(d.toFixed(1)));\n    return {\n      min: min,\n      max: max,\n      q1: q1,\n      q3: q3,\n      median: median,\n      jitter: std\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <p>version: 1.07</p>\n        <Col sm={12}>\n          <Container>\n            <Row style={{ marginTop: 40 }}>\n              <Col sm={12}>\n                <Card className=\"WBBCard WBBMainTestCard\">\n                  <Card.Header>\n                    <CardTitleComponent\n                      title={this.state.test_title}\n                      report={this.state.report}\n                    />\n                  </Card.Header>\n                  { !this.state.test_running ? (\n                    <Card.Body>\n                      <Card.Text>\n                        Click below to start running the test.\n                      </Card.Text>\n                      <Button variant=\"primary\" onClick={this.start_test.bind(this)}>Start Test</Button>\n                    </Card.Body>\n                  ) : (\n                    <Card.Body>\n                      <LatencyResultsReport\n                        stage_data={this.state.stages}\n                      />\n                      {\n                        Object.keys(this.state.stages).map((i) => {\n                          let stage = this.state.stages[i];\n                          return (\n                            <div key={stage.configuration.name}>\n                              {\n                                (parseInt(i) !== 0) ?\n                                  (<Col sm={12}>\n                                    <div className={\"spacer\"}/>\n                                  </Col>)\n                                  : (<></>)\n                              }\n                              <LatencyStageReport\n                                box_plot_scale={this.state.box_plot_scale}\n                                title={stage.configuration.title}\n                                key={stage.configuration.name}\n                                data={stage.data}\n                                stats={stage.stats}\n                              />\n                            </div>\n                          )\n                        })\n                      }\n                      <BandwidthReportComponent\n                        download_speed={this.state.download_speed}\n                        upload_speed={this.state.upload_speed}\n                      />\n                    </Card.Body>\n                  )}\n                </Card>\n              </Col>\n            </Row>\n          </Container>\n        </Col>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport UploadMeasurementCollector from \"../tools/upload_measurement_collector\";\n\n\nexport default class UploadWebsocketsSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n          <Button onClick={this.upload.bind(this)}>Upload</Button>\n        </Container>\n      </>\n    );\n  }\n\n  async upload() {\n    //let size = 100 * 1e6;\n    let size = 100 * 1e6;\n    //let size = 1e5;\n    let url = `https://speed1.arshankhanifar.workers.dev/hi/up`;\n    //let url = `http://127.0.0.1:8787/hi/up?`;\n    let body = \"0\".repeat(size);\n    //let headers = { 'content-length': size };\n    //let res = await fetch(url, {\n    //  method: 'POST',\n    //  body: body,\n    //  headers: headers\n    //});\n    //await res.text();\n    //return ;\n\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener('progress', function(e) {\n      var done = e.position || e.loaded, total = e.totalSize || e.total;\n      console.log('xhr progress: ' + (Math.floor(done/total*1000)/10) + '%');\n    }, false);\n\n    let start = Date.now(), start_tmp = start;\n    let last_done = 0;\n\n    function print_bandwidth(bw) {\n      console.log(\"bandwidth\", (bw * 8)/1e3);\n    }\n\n    xhr.upload.onprogress = function(e) {\n      var done = e.position || e.loaded, total = e.totalSize || e.total;\n      let bandwidth = (done - last_done)/(Date.now() - start_tmp);\n      console.log(\"diff\", done - last_done);\n      print_bandwidth(bandwidth);\n      last_done = done;\n      start_tmp = Date.now();\n      //console.log('xhr.upload progress: ' + done + ' / ' + total + ' = ' + (Math.floor(done/total*1000)/10) + '%');\n    };\n\n    xhr.onreadystatechange = function(e) {\n      let bandwidth = (size)/(Date.now() - start);\n      console.log(\"doneeee\");\n      print_bandwidth(bandwidth);\n      if ( 4 === this.readyState ) {\n        console.log(['xhr upload complete', e]);\n      }\n    };\n\n    xhr.open(\"POST\", url, true);\n    xhr.setRequestHeader(\"Content-Type\", \"text/plain\");\n    xhr.send(body);\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport UploadMeasurementCollector from \"../tools/upload_measurement_collector\";\n\n\nexport default class GuessUploadSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n          <Button onClick={this.upload.bind(this)}>Upload</Button>\n        </Container>\n      </>\n    );\n  }\n\n  async upload() {\n    let bandwidth = await new UploadMeasurementCollector().upload(5, 8);\n    console.log(`measured bandwidth: ${bandwidth * 8 / 1e3}`);\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from \"./pages/main_page\";\nimport GuessUploadSample from \"./samples/guess_upload_sample\";\nimport UploadWebsocketsSample from \"./samples/upload_websockets_sample\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <UploadWebsocketsSample />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as d3 from 'd3';\n\n\nexport default class StatisticsUtilities {\n  static calculate_important_values(sorted_data) {\n    let q1 = d3.quantile(sorted_data,.25),\n      q3 = d3.quantile(sorted_data,.75),\n      median = d3.quantile(sorted_data,.5),\n      min = sorted_data[0],\n      max = sorted_data[sorted_data.length - 1],\n      std = d3.deviation(sorted_data) || 0;\n    return [q1, q3, median, min, max, std];\n  }\n}","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class BoxPlot extends Component {\n  TRANSITION_TIME = 300;\n  DOT_COLOUR = \"#4a90e2\";\n\n  constructor(props) {\n    super(props);\n    this.chart_component = React.createRef();\n    this.data = props.data.filter(d => !this.is_invalid(d)) || [];\n    this.height = props.height || 80;\n    this.width = props.width || 460;\n    this.scale = props.scale;\n    // eslint-disable-next-line no-template-curly-in-string\n    this.tooltip_html = this.props.tooltip_html || 'value: ${d.value}';\n\n  }\n\n  calculate_important_values(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    return StatisticsUtilities.calculate_important_values(sorted);\n  }\n\n  get_chart_parameters() {\n    const margin = {top: 10, right: 10, bottom: 10, left: 10},\n      width = this.width - margin.left - margin.right,\n      height = this.height - margin.top - margin.bottom,\n      point_position_relative_to_top = 3/4 * height,\n      middle_anchor_relative_to_top = 1/4 * height;\n    return [margin, width, height, point_position_relative_to_top, middle_anchor_relative_to_top];\n  }\n\n  componentDidMount() {\n    let [margin, width, height] = this.get_chart_parameters();\n\n    let svg = d3.select(this.chart_component.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    this._svg = svg;\n    let data = this.data;\n    this.update_scale(data);\n\n    this._points_container = svg.append(\"g\")\n      .attr(\"id\", \"data_points\");\n\n    this.add_tooltip();\n    this.draw_points(data);\n    this.add_line_with_ticks(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n  }\n\n  add_tooltip() {\n    this._tooltip = d3.select(this.chart_component.current)\n      .append(\"div\")\n      .style(\"opacity\", 0)\n      .attr(\"class\", \"tooltip\")\n      .style(\"border\", \"solid\")\n      .style(\"background-color\", \"white\")\n      .style(\"border-width\", \"2px\")\n      .style(\"border-radius\", \"5px\")\n      .style(\"padding\", \"5px\");\n  }\n\n  set_circle_attributes(selection) {\n    let [,,, rel_pos] = this.get_chart_parameters();\n    let tooltip = this._tooltip;\n    let component = this;\n\n    let mouseover = function(d) {\n      tooltip.style(\"opacity\", 1);\n      d3.select(this)\n        .style(\"stroke\", \"black\")\n        .style(\"opacity\", 1);\n    };\n\n    let mousemove = function(e, d) {\n      let relative_dist = d3.pointer(e, this);\n      tooltip.html(eval(\"`\" + component.tooltip_html + \"`\"))\n        .style(\"left\", (relative_dist[0]) + \"px\")\n        .style(\"top\", (relative_dist[1]) + rel_pos + \"px\");\n    };\n\n    let mouseleave = function(d) {\n      tooltip\n        .style(\"opacity\", 0);\n      d3.select(this)\n        .style(\"stroke\", \"none\")\n        .style(\"opacity\", 0.8);\n    };\n\n    selection.attr(\"cy\", () => rel_pos)\n      .attr(\"r\", 3)\n      .attr(\"fill\", this.DOT_COLOUR)\n      .on(\"mouseover\", mouseover)\n      .on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave);\n  }\n\n  draw_points(data) {\n    let x = this._x_scale;\n    let selection = this._points_container\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) => x(d.value));\n    this.set_circle_attributes(selection);\n  }\n\n  update_points_locations(data) {\n    let circles = this._points_container\n      .selectAll(\"circle\")\n      .data(data);\n\n    circles\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"cx\", d => this._x_scale(d.value));\n  }\n\n  add_line_with_ticks(data) {\n    let indicator_tick_height = 10,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale,\n      svg = this._svg;\n\n    let [,,, min, max,] = this.calculate_important_values(data);\n    let [, width,,, mid_anchor_rel] = this.get_chart_parameters();\n\n    let middle_anchor = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + mid_anchor_rel + \")\");\n\n    this._middle_anchor = middle_anchor;\n\n    let x_min = x(min) || 0,\n        x_max = x(max) || width;\n\n    this.main_line = middle_anchor.append(\"line\")\n      .attr(\"x1\", x_min)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", x_max)\n      .attr(\"y2\", 0)\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    function make_tic(at) {\n      return middle_anchor.append(\"line\")\n        .attr(\"x1\", at)\n        .attr(\"y1\", -indicator_tick_height/2)\n        .attr(\"x2\", at)\n        .attr(\"y2\", +indicator_tick_height/2)\n        .attr(\"stroke\", indicator_stroke_colour);\n    }\n\n    this.tick_1 = make_tic(x_min);\n    this.tick_2 = make_tic(x_max);\n  }\n\n  add_quartile_box_if_it_doesnt_exist(data) {\n    if (this._quartile_box || data.length < 5) {\n      return\n    }\n    this.add_quartile_box(data);\n  }\n\n  add_quartile_box(data) {\n    let indicator_box_height = 20,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale;\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n\n    this._quartile_box =  this._middle_anchor\n      .append(\"g\")\n      .attr(\"id\", \"quartile_box\");\n\n    this._quartile_rect = this._quartile_box.append(\"rect\")\n      .attr(\"x\", x(q1))\n      .attr(\"y\", -indicator_box_height/2)\n      .attr(\"height\", indicator_box_height)\n      .attr(\"width\", x(q3) - x(q1))\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    this._median_line = this._quartile_box.append(\"line\")\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n      .attr(\"y1\", -indicator_box_height/2)\n      .attr(\"y2\", +indicator_box_height/2)\n      .attr(\"stroke\", indicator_stroke_colour)\n      .attr(\"stroke-width\", 1.5);\n\n  }\n\n  update_scale(data) {\n    let [, width,] = this.get_chart_parameters();\n    if (this.props.scale) {\n      let [min, max] = this.props.scale;\n      this._x_scale = d3.scaleLinear()\n        .domain([max, min])\n        .range([width, 0]);\n      return;\n    }\n    let [,,, min, max,] = this.calculate_important_values(data);\n    this._x_scale = d3.scaleLinear()\n      .domain([max, min])\n      .range([width, 0]);\n  }\n\n  update_line_with_ticks(data) {\n    let [,,, min, max,] = this.calculate_important_values(data),\n      x = this._x_scale,\n      x_min = x(min),\n      x_max = x(max);\n    const transition_tick = (tick, x) => {\n      tick.transition()\n        .duration(this.TRANSITION_TIME)\n        .attr(\"x1\", x)\n        .attr(\"x2\", x);\n    };\n    this.main_line.transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x_min)\n      .attr(\"x2\", x_max);\n    transition_tick(this.tick_1, x_min);\n    transition_tick(this.tick_2, x_max);\n  }\n\n  update_box(data) {\n    if (!this._quartile_box) {\n      return;\n    }\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n    let x = this._x_scale;\n    this._quartile_rect\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x\", x(q1))\n      .attr(\"width\", x(q3) - x(q1));\n    this._median_line\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n  }\n\n  refresh_chart() {\n    let data = this.data;\n    this.update_scale(data);\n    this.update_points_locations(data);\n    this.draw_points(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n    this.update_line_with_ticks(data);\n    this.update_box(data);\n  }\n\n  add_point(datum) {\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  is_invalid(datum) {\n    return !datum || (datum.value > AppConfiguration.MAX_LATENCY_PLOTTED);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.data.length === prevProps.data.length) {\n      this.refresh_chart();\n      return;\n    }\n    let datum = prevProps.data.slice(-1).pop();\n    if (this.is_invalid(datum)) {\n      return;\n    }\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.chart_component}/>\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}