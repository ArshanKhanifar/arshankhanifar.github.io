{"version":3,"sources":["app_configuration.js","serviceWorker.js","test/debug_state.js","tools/test_results_manager.js","utilities/time_utility.js","components/latency_stats_component.js","components/latency_box_plot.js","components/latency_stage_report.js","styles_configuration.js","components/bufferbloat_callouts.js","components/latency_results_report.js","stages/stage.js","utilities/runtime_environment.js","tools/generic_latency_collector.js","tools/latency_collector_provider.js","tools/latency_candidates.js","stages/latency_measurement_stage.js","utilities/bandwidth_measurement_utilities.js","tools/download_measurement_collector.js","stages/downlink_measurement_stage.js","tools/upload_based_on_guess.js","stages/uplink_measurement_stage.js","components/bandwidth_report_component.js","components/card_title_component.js","tools/report_generator.js","components/share_results_component.js","components/buffer_bloat_test_component.js","pages/main_page.js","index.js","utilities/statistics_utilities.js","components/box_plot.js"],"names":["AppConfiguration","PING_INTERVAL","MAX_LATENCY_PLOTTED","DOWNLOAD_NUM_STREAMS","UPLOAD_NUM_STREAMS","IGNORE_TTFB_BELOW","NUM_LATENCY_MEASUREMENTS","DOWNLOAD_DURATION","UPLOAD_DURATION","RESOURCE_TIMING_BUFFER_SIZE","STATIC_RESOURCES_PATH","TEST_ID_QUERY","Boolean","window","location","hostname","match","DEBUG_STATE","TestResultsManager","test_id","fetch","this","get_test_link","method","res","json","test_results","TESTS_ENDPOINT","body","JSON","stringify","text","URL","TimeUtility","d","Date","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","ms","Promise","resolve","setTimeout","resource_name","performance","getEntriesByName","slice","pop","perf","_get_entry","serverTiming","duration","console","log","Infinity","responseStart","requestStart","LatencyStatsComponent","props","Row","style","fontSize","whiteSpace","Col","sm","min","median","max","q1","q3","jitter","Component","LatencyBoxPlot","LatencyStageReport","get_size_based_on_window_size","width","height","window_size","visualViewport","className","spacer_before","md","xs","marginTop","title","data","scale","box_plot_scale","tooltip_html","stats","StylesConfiguration","BufferbloatCallouts","stage","i","measurement","status_class","toFixed","textAlign","Object","keys","stage_data","map","k","length","key","borderLeft","configuration","report_bufferbloat","LatencyResultsReport","Stage","RuntimeEnvironment","test","navigator","userAgent","GenericLatencyCollector","url","interval","interval_cb","done_cb","count","cancelled","start","now","headers","diff","get_ttfb_for","intervals","_get_ttfb","ttfb","push","sleep","LatencyCollectorProvider","data_cb","LatencyMeasurementStage","data_callback","done_callback","collector","provide","BandwidthMeasurementUtilities","byte_tracker","first_time","formatted","entry","x","y","StatisticsUtilities","get_linear_regression","bytes_info","measured","to_bps","get_reg","bytes","get_regression_from_upload_progress","sliced","reg","rSquared","a","warn","Math","bw","DownloadMeasurementCollector","measurement_callback","controller","AbortController","size","signal","n","streams","running","cancel","measure_download","num_streams","Array","fill","_","req","get_http_fetch","tracking","this_time","this_data","last_time","total","measurements","self","requests","make_requests","pump","reader","read","then","done","value","bandwidth_from_last_n_samples","getReader","all","rate","collect_good_measurements","abort","DownlinkMeasurementStage","bandwidth_callback","downloader","download_for_n_seconds","download_speed","UploadBasedOnGuess","downlink_speed","upload_url","get_upload_size","file_size","num_measurements","repeat","calculate_performance_for_entry","total_upload","time_difference","get_server_timing_for","UplinkMeasurementStage","context","uploader","upload_based_on_downlink_guess","upload_measurements","BandwidthReportComponent","upload_speed","CardTitleComponent","category","met_criteria","criteria","criterion","reduce","b","fix_bb_link","report","grade","href","categories","name","src","get_picture","alt","ReportGenerator","test_data","downlink","uplink","latency","latency_with_jitter","stages_data","stages","gradings","until","latencies","downlink_bb","uplink_bb","combined_bb","criteria_names","dict","c_name","grading","ShareResultsComponent","e","document","querySelector","select","execCommand","Form","inline","FormGroup","controlId","ControlLabel","FormControl","type","origin","create_url","Button","onClick","copy_to_clipboard","bind","bsStyle","test_again","BufferBloatTestComponent","BOX_PLOT_SCALE_DEFAULT","stages_configuration","page_title","stage_context","state","_get_initial_state","setResourceTimingBufferSize","add_latency_to_current_stage","advance_stage","downlink_measurement","uplink_measurement","test_running","test_title","current_stage_idx","bandwidth","setState","update_current_state","start_test","curr_idx","stages_flattened","generate_report","post_results","run","adjust_scale","current_stage","current_data","new_data","calculate_stats","sorted","sort","d3","calculate_important_values","parseFloat","test_result","test_view","parseInt","running_new_test","TEST_NOT_FOUND","QueryParamsExtractor","history","buffer_bloat","React","createRef","URLSearchParams","search","get","load_state","get_test_results","current","ref","QueryParamsExtractorWithRouter","withRouter","MainPage","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","message","sorted_data","d3Regression","linearRegression","BoxPlot","TRANSITION_TIME","DOT_COLOUR","chart_component","filter","is_invalid","margin","top","right","bottom","left","get_chart_parameters","svg","append","attr","_svg","update_scale","_points_container","add_tooltip","draw_points","add_line_with_ticks","add_quartile_box_if_it_doesnt_exist","_tooltip","selection","rel_pos","tooltip","component","mouseover","mousemove","relative_dist","html","eval","mouseleave","on","_x_scale","selectAll","enter","set_circle_attributes","transition","indicator_tick_height","get_indicator_height","mid_anchor_rel","middle_anchor","_middle_anchor","x_min","x_max","make_tic","at","main_line","tick_1","tick_2","_quartile_box","add_quartile_box","indicator_box_height","_quartile_rect","_median_line","domain","range","transition_tick","tick","update_points_locations","update_line_with_ticks","update_box","datum","refresh_chart","prevProps","prevState","snapshot"],"mappings":"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","file":"static/js/main.22ab9160.chunk.js","sourcesContent":["export const AppConfiguration = {\n  PING_INTERVAL: 200,\n  MAX_LATENCY_PLOTTED: 200,\n  DOWNLOAD_NUM_STREAMS: 1,\n  UPLOAD_NUM_STREAMS: 8,\n  IGNORE_TTFB_BELOW: 0,\n  NUM_LATENCY_MEASUREMENTS: 40,\n  //NUM_LATENCY_MEASUREMENTS: 5,\n  DOWNLOAD_DURATION: 10,\n  UPLOAD_DURATION: 3,\n  RESOURCE_TIMING_BUFFER_SIZE: 1e5,\n  //STATIC_RESOURCES_PATH: \"http://localhost:8000/\",\n  //STATIC_RESOURCES_PATH: \"/dev-arshan/\"\n  STATIC_RESOURCES_PATH: \"\",\n  TEST_ID_QUERY: \"test-id\"\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App_old is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const DEBUG_STATE = [\n  {\"test_running\":true,\"test_title\":\"3/3 Measuring Latency With Uplink Saturated\",\"current_stage_idx\":2,\"stages\":{\"0\":{\"configuration\":{\"name\":\"unloaded\",\"title\":\"Unloaded\",\"page_title\":\"Measuring Unloaded Latency\"},\"data\":[{\"value\":4.39000001642853},{\"value\":4.885000002104789},{\"value\":4.760000039823353},{\"value\":4.46999998530373},{\"value\":4.420000012032688},{\"value\":5.085000011604279},{\"value\":5.479999992530793},{\"value\":81.0850000125356},{\"value\":5.959999980404973},{\"value\":4.379999998491257},{\"value\":4.439999989699572},{\"value\":4.544999974314123},{\"value\":4.880000022239983},{\"value\":5.330000014510006},{\"value\":4.2749999556690454},{\"value\":55.04500004462898},{\"value\":4.725000006146729},{\"value\":4.079999984242022},{\"value\":4.175000009126961},{\"value\":4.409999994095415},{\"value\":554.584999976214},{\"value\":121.40000000363216},{\"value\":5.705000017769635},{\"value\":158.11999997822568},{\"value\":58.78000002121553},{\"value\":17.15999998850748},{\"value\":140.09999996051192},{\"value\":282.41499996511266},{\"value\":99.41999998409301},{\"value\":54.64000004576519}],\"stats\":{\"min\":4.1,\"max\":554.6,\"q1\":4.4,\"q3\":57.8,\"median\":5.2,\"jitter\":113.8}},\"1\":{\"configuration\":{\"name\":\"down\",\"title\":\"↓ Saturated\",\"page_title\":\"Measuring Latency With Downlink Saturated\"},\"data\":[{\"value\":111.13500001374632},{\"value\":270.35000000614673},{\"value\":73.4400000073947},{\"value\":102.85999998450279},{\"value\":162.6549999928102},{\"value\":380.0599999958649},{\"value\":129.58499998785555},{\"value\":7.370000006631017},{\"value\":10.320000001229346},{\"value\":81.28500002203509},{\"value\":68.40999994892627},{\"value\":70.23499999195337},{\"value\":102.75499999988824},{\"value\":734.4000000157394},{\"value\":63.774999987799674},{\"value\":13.845000008586794},{\"value\":177.30000003939494},{\"value\":4.465000005438924},{\"value\":4.945000051520765},{\"value\":4.66999999480322}],\"stats\":{\"min\":4.5,\"max\":734.4,\"q1\":13,\"q3\":137.9,\"median\":77.4,\"jitter\":171.7}},\"2\":{\"configuration\":{\"name\":\"up\",\"title\":\"↑ Saturated\",\"page_title\":\"Measuring Latency With Uplink Saturated\"},\"data\":[{\"value\":7.000000041443855},{\"value\":27.58000005269423},{\"value\":33.77499995986},{\"value\":26.42000000923872},{\"value\":18.114999984391034},{\"value\":5.730000033508986},{\"value\":5.460000014863908},{\"value\":10.294999985489994},{\"value\":17.070000001695007},{\"value\":24.019999953452498},{\"value\":5.545000021811575},{\"value\":29.590000049211085},{\"value\":23.54000002378598},{\"value\":18.05499999318272},{\"value\":93.5450000106357},{\"value\":12.820000003557652},{\"value\":33.99999998509884},{\"value\":9.029999957419932},{\"value\":4.554999992251396},{\"value\":11.655000038444996},{\"value\":20.23999998345971},{\"value\":4.935000033583492},{\"value\":12.700000021141022},{\"value\":25.08500003023073},{\"value\":12.184999999590218},{\"value\":14.939999964553863},{\"value\":10.364999994635582},{\"value\":20.979999972041696},{\"value\":26.4850000385195},{\"value\":56.35999998776242},{\"value\":24.74000002257526},{\"value\":30.144999967887998},{\"value\":23.69499998167157},{\"value\":14.565000019501895},{\"value\":8.20499996189028},{\"value\":5.754999991040677}],\"stats\":{\"min\":4.6,\"max\":93.5,\"q1\":10,\"q3\":25.4,\"median\":17.6,\"jitter\":16.7}}},\"box_plot_scale\":[0,177.30000003939494],\"download_speed\":23930664.538016364,\"upload_speed\":42570553.910578504},\n  {\"test_running\":true,\"test_title\":\"3/3 Measuring Latency With Uplink Saturated\",\"current_stage_idx\":2,\"stages\":{\"0\":{\"configuration\":{\"name\":\"unloaded\",\"title\":\"Unloaded\",\"page_title\":\"Measuring Unloaded Latency\"},\"data\":[{\"value\":28.670000028796494},{\"value\":38.915000041015446},{\"value\":5.454999976791441},{\"value\":4.569999990053475},{\"value\":4.520000016782433},{\"value\":4.565000010188669},{\"value\":4.940000013448298},{\"value\":69.38499998068437},{\"value\":5.594999995082617},{\"value\":6.944999971892685},{\"value\":5.530000024009496},{\"value\":5.550000001676381},{\"value\":5.694999999832362},{\"value\":5.330000014510006},{\"value\":6.594999984372407},{\"value\":63.56500001857057},{\"value\":5.899999989196658},{\"value\":4.584999987855554},{\"value\":4.505000018980354},{\"value\":5.204999994020909},{\"value\":5.5550000397488475},{\"value\":5.439999978989363},{\"value\":4.184999968856573},{\"value\":56.394999963231385},{\"value\":4.6999999904073775},{\"value\":5.115000007208437},{\"value\":4.500000039115548},{\"value\":4.6449999790638685},{\"value\":4.605000023730099},{\"value\":4.249999998137355}],\"stats\":{\"min\":4.2,\"max\":69.4,\"q1\":4.6,\"q3\":5.8,\"median\":5.4,\"jitter\":18.7}},\"1\":{\"configuration\":{\"name\":\"down\",\"title\":\"↓ Saturated\",\"page_title\":\"Measuring Latency With Downlink Saturated\"},\"data\":[{\"value\":7.989999954588711},{\"value\":29.09999998519197},{\"value\":6.124999956227839},{\"value\":4.55000001238659},{\"value\":5.3949999855831265},{\"value\":5.635000008624047},{\"value\":4.635000019334257},{\"value\":14.940000022761524},{\"value\":4.665000014938414},{\"value\":58.849999972153455},{\"value\":5.92500000493601},{\"value\":9.030000015627593},{\"value\":5.620000010821968},{\"value\":5.275000003166497},{\"value\":11.200000008102506},{\"value\":4.725000006146729},{\"value\":5.040000018198043},{\"value\":33.04000000935048},{\"value\":6.669999973382801},{\"value\":5.554999981541187},{\"value\":7.035000016912818},{\"value\":6.00500003201887},{\"value\":5.000000004656613},{\"value\":4.854999948292971},{\"value\":8.999999961815774},{\"value\":45.15499999979511},{\"value\":5.7700000470504165},{\"value\":6.60500000230968},{\"value\":19.504999974742532},{\"value\":5.980000016279519},{\"value\":5.8250000001862645},{\"value\":4.810000013094395},{\"value\":13.390000036451966},{\"value\":15.755000000353903},{\"value\":4.950000031385571},{\"value\":116.35500000556931},{\"value\":6.105000036768615}],\"stats\":{\"min\":4.6,\"max\":116.4,\"q1\":5.3,\"q3\":11.2,\"median\":6,\"jitter\":21}},\"2\":{\"configuration\":{\"name\":\"up\",\"title\":\"↑ Saturated\",\"page_title\":\"Measuring Latency With Uplink Saturated\"},\"data\":[{\"value\":6.059999985154718},{\"value\":4.474999965168536},{\"value\":24.36500001931563},{\"value\":17.434999987017363},{\"value\":24.90999997826293},{\"value\":26.574999967124313},{\"value\":24.600000004284084},{\"value\":99.2349999723956},{\"value\":5.940000002738088},{\"value\":30.95500002382323},{\"value\":11.564999993424863},{\"value\":5.040000018198043},{\"value\":20.840000011958182},{\"value\":34.38500000629574},{\"value\":87.5450000166893},{\"value\":10.400000028312206},{\"value\":19.03000002494082},{\"value\":22.320000047329813},{\"value\":6.0949999606236815},{\"value\":4.584999987855554},{\"value\":15.26499999454245},{\"value\":11.929999978747219},{\"value\":19.540000008419156},{\"value\":13.685000012628734},{\"value\":19.674999988637865},{\"value\":14.909999968949705},{\"value\":39.250000030733645},{\"value\":21.844999981112778},{\"value\":20.360000024084002},{\"value\":65.85999997332692},{\"value\":22.81499997479841},{\"value\":24.674999993294477},{\"value\":12.075000035110861},{\"value\":21.420000004582107},{\"value\":7.280000019818544},{\"value\":7.870000030379742},{\"value\":7.964999997057021},{\"value\":14.395000005606562},{\"value\":11.150000034831464},{\"value\":4.445000027772039},{\"value\":4.714999988209456}],\"stats\":{\"min\":4.4,\"max\":99.2,\"q1\":8,\"q3\":24.4,\"median\":17.4,\"jitter\":20.3}}},\"box_plot_scale\":[0,116.35500000556931],\"download_speed\":48319904.172489524,\"upload_speed\":38357513.85603622},\n  {\"test_running\":true,\"test_title\":\"3/3 Measuring Latency With Uplink Saturated\",\"current_stage_idx\":2,\"stages\":{\"0\":{\"configuration\":{\"name\":\"unloaded\",\"title\":\"Unloaded\",\"page_title\":\"Measuring Unloaded Latency\"},\"data\":[{\"value\":19.325000001117587},{\"value\":6.48500001989305},{\"value\":24.89999996032566},{\"value\":6.545000011101365},{\"value\":8.28499998897314},{\"value\":7.42000003810972},{\"value\":5.990000034216791},{\"value\":4.980000026989728},{\"value\":6.6300000180490315},{\"value\":6.110000016633421},{\"value\":54.379999986849725},{\"value\":5.854999995790422},{\"value\":8.13999999081716},{\"value\":6.3649999792687595},{\"value\":6.755000038538128},{\"value\":5.680000002030283},{\"value\":7.819999998901039},{\"value\":5.844999977853149},{\"value\":52.0700000342913},{\"value\":5.210000032093376},{\"value\":5.230000009760261},{\"value\":32.230000011622906},{\"value\":6.099999998696148},{\"value\":6.340000021737069},{\"value\":8.845000003930181},{\"value\":6.004999973811209},{\"value\":65.93499996233732},{\"value\":6.074999982956797},{\"value\":14.084999973420054},{\"value\":7.024999998975545}],\"stats\":{\"min\":5,\"max\":65.9,\"q1\":6,\"q3\":8.7,\"median\":6.6,\"jitter\":16.2}},\"1\":{\"configuration\":{\"name\":\"down\",\"title\":\"↓ Saturated\",\"page_title\":\"Measuring Latency With Downlink Saturated\"},\"data\":[{\"value\":7.110000005923212},{\"value\":5.495000048540533},{\"value\":5.969999998342246},{\"value\":7.800000021234155},{\"value\":7.464999973308295},{\"value\":10.789999971166253},{\"value\":5.724999995436519},{\"value\":10.4750000173226},{\"value\":5.059999995864928},{\"value\":4.46999998530373},{\"value\":7.775000005494803},{\"value\":730.8750000083819},{\"value\":5.034999980125576},{\"value\":5.215000011958182},{\"value\":4.810000013094395},{\"value\":5.104999989271164},{\"value\":6.430000008549541},{\"value\":17.010000010486692},{\"value\":6.289999990258366},{\"value\":5.9849999961443245},{\"value\":7.9150000237859786},{\"value\":7.565000036265701},{\"value\":143.85499997297302},{\"value\":26.00499999243766},{\"value\":5.690000019967556},{\"value\":119.49000001186505},{\"value\":4.505000018980354},{\"value\":6.025000009685755},{\"value\":10.959999985061586},{\"value\":33.69000001111999},{\"value\":4.895000020042062}],\"stats\":{\"min\":4.5,\"max\":730.9,\"q1\":5.4,\"q3\":10.6,\"median\":6.4,\"jitter\":132.1}},\"2\":{\"configuration\":{\"name\":\"up\",\"title\":\"↑ Saturated\",\"page_title\":\"Measuring Latency With Uplink Saturated\"},\"data\":[{\"value\":7.6500000432133675},{\"value\":8.864999981597066},{\"value\":10.615000035613775},{\"value\":27.905000024475157},{\"value\":40.27500003576279},{\"value\":47.0050000003539},{\"value\":7.470000011380762},{\"value\":9.279999998398125},{\"value\":19.644999993033707},{\"value\":16.210000030696392},{\"value\":33.42499997233972},{\"value\":19.429999985732138},{\"value\":16.095000028144568},{\"value\":25.719999975990504},{\"value\":21.43000002251938},{\"value\":308.0399999744259},{\"value\":67.80000001890585},{\"value\":5.390000005718321}],\"stats\":{\"min\":5.4,\"max\":308,\"q1\":9.6,\"q3\":32,\"median\":19.5,\"jitter\":69.2}}},\"box_plot_scale\":[0,143.85499997297302],\"download_speed\":50703789.347695984,\"upload_speed\":34864210.66631201},\n  {\"test_running\":true,\"test_title\":\"3/3 Measuring Latency With Uplink Saturated\",\"current_stage_idx\":2,\"stages\":{\"0\":{\"configuration\":{\"name\":\"unloaded\",\"title\":\"Unloaded\",\"page_title\":\"Measuring Unloaded Latency\"},\"data\":[{\"value\":26.06000000378117},{\"value\":4.584999987855554},{\"value\":5.245000007562339},{\"value\":4.499999980907887},{\"value\":5.744999973103404},{\"value\":19.07000003848225},{\"value\":4.605000023730099},{\"value\":5.204999994020909},{\"value\":7.230000046547502},{\"value\":6.769999978132546},{\"value\":4.50999999884516},{\"value\":5.444999958854169},{\"value\":4.1600000113248825},{\"value\":4.3249999871477485},{\"value\":4.689999972470105},{\"value\":5.454999976791441},{\"value\":4.55000001238659},{\"value\":86.46000002045184},{\"value\":4.275000013876706},{\"value\":5.539999983739108},{\"value\":5.330000014510006},{\"value\":7.149999961256981},{\"value\":5.115000007208437},{\"value\":5.590000015217811},{\"value\":4.069999966304749},{\"value\":72.95000000158325},{\"value\":4.085000022314489},{\"value\":5.654999986290932},{\"value\":5.674999963957816},{\"value\":6.494999979622662}],\"stats\":{\"min\":4.1,\"max\":86.5,\"q1\":4.6,\"q3\":6.3,\"median\":5.4,\"jitter\":19.2}},\"1\":{\"configuration\":{\"name\":\"down\",\"title\":\"↓ Saturated\",\"page_title\":\"Measuring Latency With Downlink Saturated\"},\"data\":[{\"value\":5.790000024717301},{\"value\":5.304999998770654},{\"value\":5.479999992530793},{\"value\":48.53999998886138},{\"value\":4.205000004731119},{\"value\":5.324999976437539},{\"value\":4.779999959282577},{\"value\":4.820000031031668},{\"value\":5.209999973885715},{\"value\":4.919999977573752},{\"value\":44.144999992568046},{\"value\":43.96999999880791},{\"value\":4.124999977648258},{\"value\":4.570000048261136},{\"value\":4.959999991115183},{\"value\":13.37000000057742},{\"value\":18.634999985806644},{\"value\":4.954999953042716},{\"value\":5.879999953322113},{\"value\":8.975000004284084},{\"value\":15.094999980647117},{\"value\":5.754999991040677},{\"value\":4.179999988991767},{\"value\":4.359999962616712},{\"value\":24.7100000269711},{\"value\":5.255000025499612},{\"value\":4.6449999790638685},{\"value\":6.9549999898299575},{\"value\":9.395000000949949},{\"value\":4.435000009834766},{\"value\":5.680000002030283},{\"value\":4.405000014230609},{\"value\":127.67000001622364},{\"value\":6.80500001180917},{\"value\":59.729999979026616},{\"value\":4.365000000689179},{\"value\":5.1750000566244125}],\"stats\":{\"min\":4.1,\"max\":127.7,\"q1\":4.8,\"q3\":9.4,\"median\":5.3,\"jitter\":23.7}},\"2\":{\"configuration\":{\"name\":\"up\",\"title\":\"↑ Saturated\",\"page_title\":\"Measuring Latency With Uplink Saturated\"},\"data\":[{\"value\":4.099999961908907},{\"value\":12.749999994412065},{\"value\":54.15999999968335},{\"value\":26.91499999491498},{\"value\":5.919999966863543},{\"value\":34.219999972265214},{\"value\":13.055000046733767},{\"value\":23.954999982379377},{\"value\":10.405000008177012},{\"value\":21.140000026207417},{\"value\":87.08999998634681},{\"value\":18.524999963119626},{\"value\":39.089999976567924},{\"value\":24.56499997060746},{\"value\":24.34000000357628},{\"value\":6.869999982882291},{\"value\":24.639999959617853},{\"value\":78.35000002523884},{\"value\":13.23499996215105},{\"value\":16.515000024810433},{\"value\":29.255000001285225},{\"value\":5.7749999687075615},{\"value\":5.434999999124557},{\"value\":14.504999970085919},{\"value\":4.919999977573752},{\"value\":4.614999983459711},{\"value\":4.564999951981008},{\"value\":5.60500001301989},{\"value\":4.580000007990748},{\"value\":20.684999995864928},{\"value\":19.23999999416992},{\"value\":6.215000001247972},{\"value\":5.375000007916242},{\"value\":20.044999953825027},{\"value\":5.415000021457672}],\"stats\":{\"min\":4.1,\"max\":87.1,\"q1\":5.7,\"q3\":24.5,\"median\":14.5,\"jitter\":19.5}}},\"box_plot_scale\":[0,127.67000001622364],\"download_speed\":47866162.63736264,\"upload_speed\":38612197.40320953},\n  {\"test_running\":true,\"test_title\":\"3/3 Measuring Latency With Uplink Saturated\",\"current_stage_idx\":2,\"stages\":{\"0\":{\"configuration\":{\"name\":\"unloaded\",\"title\":\"Unloaded\",\"page_title\":\"Measuring Unloaded Latency\"},\"data\":[{\"value\":56.834999995771796},{\"value\":7.130000041797757},{\"value\":80.72999998694286},{\"value\":5.430000019259751},{\"value\":7.8699999721720815},{\"value\":5.700000037904829},{\"value\":5.6149999727495015},{\"value\":5.980000016279519},{\"value\":5.490000010468066},{\"value\":21.260000008624047},{\"value\":59.225000033620745},{\"value\":5.66999998409301},{\"value\":6.735000002663583},{\"value\":6.150000030174851},{\"value\":4.894999961834401},{\"value\":15.804999973624945},{\"value\":6.970000045839697},{\"value\":5.530000024009496},{\"value\":61.8300000205636},{\"value\":5.440000037197024},{\"value\":5.675000022165477},{\"value\":5.390000005718321},{\"value\":5.619999952614307},{\"value\":6.4199999906122684},{\"value\":5.490000010468066},{\"value\":5.599999974947423},{\"value\":79.25000000977889},{\"value\":190.1499999803491},{\"value\":7.2749999817460775},{\"value\":156.844999990426}],\"stats\":{\"min\":4.9,\"max\":190.1,\"q1\":5.6,\"q3\":19.9,\"median\":6.3,\"jitter\":46.1}},\"1\":{\"configuration\":{\"name\":\"down\",\"title\":\"↓ Saturated\",\"page_title\":\"Measuring Latency With Downlink Saturated\"},\"data\":[{\"value\":46.54500004835427},{\"value\":10.759999975562096},{\"value\":6.475000001955777},{\"value\":87.38500002073124},{\"value\":6.935000012163073},{\"value\":249.89999999525025},{\"value\":106.339999998454},{\"value\":520.9950000280514},{\"value\":16.154999961145222},{\"value\":6.300000008195639},{\"value\":32.90500002913177},{\"value\":306.40000000130385},{\"value\":251.82000000495464},{\"value\":363.1450000102632},{\"value\":405.4850000538863},{\"value\":136.4249999751337},{\"value\":271.39000000897795}],\"stats\":{\"min\":6.3,\"max\":521,\"q1\":16.2,\"q3\":271.4,\"median\":106.3,\"jitter\":164.5}},\"2\":{\"configuration\":{\"name\":\"up\",\"title\":\"↑ Saturated\",\"page_title\":\"Measuring Latency With Uplink Saturated\"},\"data\":[{\"value\":6.9249999942258},{\"value\":8.384999993722886},{\"value\":7.3850000044330955},{\"value\":12.220000033266842},{\"value\":18.525000021327287},{\"value\":22.24500000011176},{\"value\":14.220000011846423},{\"value\":12.395000027026981},{\"value\":24.410000012721866},{\"value\":12.57000002078712},{\"value\":23.274999985005707},{\"value\":32.81000000424683},{\"value\":11.880000005476177},{\"value\":14.099999971222132},{\"value\":23.479999974370003},{\"value\":18.129999982193112},{\"value\":18.500000005587935},{\"value\":206.66999998502433},{\"value\":16.894999949727207},{\"value\":27.255000022705644},{\"value\":5.439999978989363},{\"value\":18.994999991264194},{\"value\":18.604999990202487},{\"value\":6.530000013299286},{\"value\":4.460000025574118},{\"value\":10.614999977406114},{\"value\":5.439999978989363},{\"value\":10.584999981801957},{\"value\":30.89999995427206},{\"value\":4.890000040177256}],\"stats\":{\"min\":4.5,\"max\":206.7,\"q1\":8.9,\"q3\":21.4,\"median\":14.2,\"jitter\":35.8}}},\"box_plot_scale\":[0,190.1499999803491],\"download_speed\":17906504.097541474,\"upload_speed\":42152088.01148194},\n  {\"test_running\":true,\"test_title\":\"3/3 Measuring Latency With Uplink Saturated\",\"current_stage_idx\":2,\"stages\":{\"0\":{\"configuration\":{\"name\":\"unloaded\",\"title\":\"Unloaded\",\"page_title\":\"Measuring Unloaded Latency\"},\"data\":[{\"value\":5.235000004176982},{\"value\":3.9649999962421134},{\"value\":8.34000000031665},{\"value\":8.085000001301523},{\"value\":8.350000003702007},{\"value\":8.604999995441176},{\"value\":13.29000000259839},{\"value\":9.91500000236556},{\"value\":8.224999997764826},{\"value\":15.744999996968545},{\"value\":7.970000006025657},{\"value\":8.325000002514571},{\"value\":23.760000003676396},{\"value\":8.109999995213002},{\"value\":9.285000000090804},{\"value\":8.449999993899837},{\"value\":4.605000001902226},{\"value\":9.500000000116415},{\"value\":8.594999999331776},{\"value\":4.240000002027955},{\"value\":8.34499999473337},{\"value\":9.400000002642628},{\"value\":4.925000001094304},{\"value\":13.169999998353887},{\"value\":7.855000003473833},{\"value\":8.11499999690568},{\"value\":7.05500000185566},{\"value\":10.269999998854473},{\"value\":9.729999997944105},{\"value\":8.240000002842862},{\"value\":5.004999999073334},{\"value\":5.990000005112961},{\"value\":12.210000000777654},{\"value\":6.405000000086147},{\"value\":4.524999996647239},{\"value\":9.494999998423737},{\"value\":8.574999999837019},{\"value\":16.055000000051223},{\"value\":11.479999993753154},{\"value\":9.31000000127824}],\"stats\":{\"min\":4,\"max\":23.8,\"q1\":7.7,\"q3\":9.6,\"median\":8.3,\"jitter\":3.7}},\"1\":{\"configuration\":{\"name\":\"down\",\"title\":\"↓ Saturated\",\"page_title\":\"Measuring Latency With Downlink Saturated\"},\"data\":[{\"value\":5.469999996421393},{\"value\":6.055000005289912},{\"value\":82.70499999343883},{\"value\":7.550000002083834},{\"value\":47.46000000159256},{\"value\":58.29000000085216},{\"value\":26.42500000365544},{\"value\":22.89500000188127},{\"value\":24.099999995087273},{\"value\":86.00000000296859},{\"value\":41.81000000244239},{\"value\":64.20500000240281},{\"value\":21.205000004556496},{\"value\":31.534999994619284},{\"value\":20.665000003646128},{\"value\":31.47000000171829},{\"value\":43.169999997189734},{\"value\":14.220000004570466},{\"value\":86.30500000435859},{\"value\":58.98999999772059},{\"value\":33.43000000313623},{\"value\":9.039999997185078},{\"value\":37.76500000094529},{\"value\":24.969999998575076},{\"value\":19.00500000192551},{\"value\":55.695000002742745},{\"value\":43.31500000262167},{\"value\":12.159999998402782},{\"value\":57.31000000378117},{\"value\":12.425000000803266},{\"value\":66.23499999841442},{\"value\":26.52999999554595},{\"value\":50.145000001066364},{\"value\":60.2500000022701},{\"value\":34.514999999373686},{\"value\":60.440000001108274}],\"stats\":{\"min\":5.5,\"max\":86.3,\"q1\":21.1,\"q3\":57.6,\"median\":34,\"jitter\":23.1}},\"2\":{\"configuration\":{\"name\":\"up\",\"title\":\"↑ Saturated\",\"page_title\":\"Measuring Latency With Uplink Saturated\"},\"data\":[{\"value\":4.13999999727821},{\"value\":168.37500000110595},{\"value\":110.4300000006333},{\"value\":38.38499999983469},{\"value\":132.09500000084518},{\"value\":25.175000002491288},{\"value\":482.90499999711756},{\"value\":79.08000000315951},{\"value\":122.96500000229571},{\"value\":312.78999999631196},{\"value\":9.69500000064727},{\"value\":29.90499999577878},{\"value\":198.3699999982491},{\"value\":7.259999998495914},{\"value\":67.94500000250991},{\"value\":130.61999999627005},{\"value\":156.6549999988638},{\"value\":230.15500000474276},{\"value\":17.325000000710133},{\"value\":115.83499999687774},{\"value\":56.46000000706408},{\"value\":18.77500000409782},{\"value\":121.07000000105472},{\"value\":5.740000000514556},{\"value\":136.52999999612803},{\"value\":5.230000002484303}],\"stats\":{\"min\":4.1,\"max\":482.9,\"q1\":20.4,\"q3\":135.4,\"median\":94.8,\"jitter\":110.4}}},\"box_plot_scale\":[0,198.3699999982491],\"download_speed\":50457463.06873191,\"upload_speed\":39702150.498549215},\n  {\"test_running\":true,\"test_title\":\"3/3 Measuring Latency With Uplink Saturated\",\"current_stage_idx\":2,\"stages\":{\"0\":{\"configuration\":{\"name\":\"unloaded\",\"title\":\"Unloaded\",\"page_title\":\"Measuring Unloaded Latency\"},\"data\":[{\"value\":31.000000002677552},{\"value\":9.709999998449348},{\"value\":6.52500000433065},{\"value\":9.964999997464474},{\"value\":19.049999995331746},{\"value\":27.074999998148996},{\"value\":12.31499999994412},{\"value\":8.34000000031665},{\"value\":10.13000000239117},{\"value\":18.499999998311978},{\"value\":13.700000003154855},{\"value\":9.104999997362029},{\"value\":8.48000000405591},{\"value\":14.564999997674022},{\"value\":9.139999994658865},{\"value\":9.38000000314787},{\"value\":10.099999999511056},{\"value\":4.424999999173451},{\"value\":10.464999999385327},{\"value\":8.329999996931292},{\"value\":8.515000001352746},{\"value\":5.219999999098945},{\"value\":8.41000000218628},{\"value\":9.944999997969717},{\"value\":8.644999994430691},{\"value\":11.064999998779967},{\"value\":8.614999998826534},{\"value\":9.285000000090804},{\"value\":9.675000001152512},{\"value\":8.93000000360189},{\"value\":14.255000001867302},{\"value\":12.159999998402782},{\"value\":10.284999996656552},{\"value\":8.464999998977873},{\"value\":8.865000003424939},{\"value\":4.274999999324791},{\"value\":4.73000000056345},{\"value\":4.5699999973294325},{\"value\":11.489999997138511},{\"value\":4.345000001194421}],\"stats\":{\"min\":4.3,\"max\":31,\"q1\":8.5,\"q3\":11.2,\"median\":9.3,\"jitter\":5.4}},\"1\":{\"configuration\":{\"name\":\"down\",\"title\":\"↓ Saturated\",\"page_title\":\"Measuring Latency With Downlink Saturated\"},\"data\":[{\"value\":5.504999993718229},{\"value\":6.1700000005657785},{\"value\":4.624999994121026},{\"value\":62.04499999876134},{\"value\":36.990000000514556},{\"value\":71.8200000046636},{\"value\":73.66499999625375},{\"value\":50.1799999983632},{\"value\":24.48000000003958},{\"value\":48.3749999984866},{\"value\":87.37999999721069},{\"value\":15.040000005683396},{\"value\":46.41500000434462},{\"value\":34.070000001520384},{\"value\":88.14500000153203},{\"value\":47.91000000113854},{\"value\":10.849999998754356},{\"value\":30.94000000419328},{\"value\":86.95499999885214},{\"value\":28.394999993906822},{\"value\":30.614999996032566},{\"value\":51.50500000308966},{\"value\":41.39500000019325},{\"value\":21.755000001576263},{\"value\":69.19999999809079},{\"value\":45.109999999112915},{\"value\":34.749999998894054},{\"value\":35.22499999962747},{\"value\":22.550000001501758},{\"value\":47.46000000159256},{\"value\":73.78500000049826},{\"value\":24.875000002793968},{\"value\":49.375000002328306},{\"value\":69.09499999892432},{\"value\":69.38499999523629}],\"stats\":{\"min\":4.6,\"max\":88.1,\"q1\":26.6,\"q3\":65.6,\"median\":45.1,\"jitter\":24}},\"2\":{\"configuration\":{\"name\":\"up\",\"title\":\"↑ Saturated\",\"page_title\":\"Measuring Latency With Uplink Saturated\"},\"data\":[{\"value\":4.885000002104789},{\"value\":117.28500000026543},{\"value\":104.82999999658205},{\"value\":7.845000000088476},{\"value\":131.18500000564381},{\"value\":12.140000006183982},{\"value\":117.90500000643078},{\"value\":89.81499999936204},{\"value\":87.4100000000908},{\"value\":68.67500000225846},{\"value\":96.8600000051083},{\"value\":61.475000002246816},{\"value\":115.42000000190455},{\"value\":70.9599999972852},{\"value\":157.0350000038161},{\"value\":14.750000002095476},{\"value\":6.1700000005657785},{\"value\":60.29500000295229},{\"value\":6.46499999857042},{\"value\":41.6449999975157},{\"value\":69.13999999960652},{\"value\":73.45500000519678},{\"value\":60.25500000396278}],\"stats\":{\"min\":4.9,\"max\":157,\"q1\":28.2,\"q3\":100.8,\"median\":69.1,\"jitter\":44.8}}},\"box_plot_scale\":[0,157.0350000038161],\"download_speed\":42895545.76902223,\"upload_speed\":39030368.3871674},\n  {\n    \"test_running\": true,\n    \"test_title\": \"3/3 Measuring Latency With Uplink Saturated\",\n    \"current_stage_idx\": 3,\n    \"stages\": {\n      \"0\": {\n        \"configuration\": {\n          \"name\": \"unloaded\",\n          \"title\": \"Unloaded\",\n          \"page_title\": \"Measuring Unloaded Latency\"\n        },\n        \"data\": [\n          {\n            \"value\": 5.975000007310882\n          },\n          {\n            \"value\": 5.384999996749684\n          },\n          {\n            \"value\": 4.569999990053475\n          },\n          {\n            \"value\": 4.814999992959201\n          },\n          {\n            \"value\": 4.929999995511025\n          },\n          {\n            \"value\": 5.054999986896291\n          },\n          {\n            \"value\": 4.740000003948808\n          },\n          {\n            \"value\": 5.384999996749684\n          },\n          {\n            \"value\": 8.640000014565885\n          },\n          {\n            \"value\": 5.784999986644834\n          },\n          {\n            \"value\": 4.649999988032505\n          },\n          {\n            \"value\": 4.954999982146546\n          },\n          {\n            \"value\": 4.759999981615692\n          },\n          {\n            \"value\": 7.480000000214204\n          },\n          {\n            \"value\": 5.059999995864928\n          },\n          {\n            \"value\": 5.065000004833564\n          },\n          {\n            \"value\": 4.6199999924283475\n          },\n          {\n            \"value\": 6.554999999934807\n          },\n          {\n            \"value\": 4.614999983459711\n          },\n          {\n            \"value\": 4.87000000430271\n          },\n          {\n            \"value\": 5.174999998416752\n          },\n          {\n            \"value\": 5.089999991469085\n          },\n          {\n            \"value\": 5.815000011352822\n          },\n          {\n            \"value\": 4.954999982146546\n          },\n          {\n            \"value\": 6.150000001071021\n          },\n          {\n            \"value\": 5.015000002458692\n          },\n          {\n            \"value\": 4.875000013271347\n          },\n          {\n            \"value\": 4.175000009126961\n          },\n          {\n            \"value\": 5.104999989271164\n          },\n          {\n            \"value\": 4.684999992605299\n          },\n          {\n            \"value\": 4.645000008167699\n          },\n          {\n            \"value\": 7.665000011911616\n          },\n          {\n            \"value\": 4.560000001220033\n          },\n          {\n            \"value\": 6.274999992456287\n          },\n          {\n            \"value\": 4.294999991543591\n          },\n          {\n            \"value\": 4.4000000052619725\n          },\n          {\n            \"value\": 4.74999999278225\n          },\n          {\n            \"value\": 4.555000021355227\n          },\n          {\n            \"value\": 4.740000003948808\n          },\n          {\n            \"value\": 5.919999995967373\n          }\n        ],\n        \"stats\": {\n          \"min\": 4.2,\n          \"max\": 8.6,\n          \"q1\": 4.7,\n          \"q3\": 5.5,\n          \"median\": 5,\n          \"jitter\": 1\n        }\n      },\n      \"1\": {\n        \"configuration\": {\n          \"name\": \"down\",\n          \"title\": \"↓ Saturated\",\n          \"page_title\": \"Measuring Latency With Downlink Saturated\"\n        },\n        \"data\": [\n          {\n            \"value\": 4.465000005438924\n          },\n          {\n            \"value\": 5.390000005718321\n          },\n          {\n            \"value\": 6.5799999865703285\n          },\n          {\n            \"value\": 113.45000000437722\n          },\n          {\n            \"value\": 6.0649999941233546\n          },\n          {\n            \"value\": 6.034999998519197\n          },\n          {\n            \"value\": 5.524999985937029\n          },\n          {\n            \"value\": 5.0199999823234975\n          },\n          {\n            \"value\": 5.5299999949056655\n          },\n          {\n            \"value\": 4.704999999376014\n          },\n          {\n            \"value\": 4.9900000158231705\n          },\n          {\n            \"value\": 4.719999997178093\n          },\n          {\n            \"value\": 112.51499998616055\n          },\n          {\n            \"value\": 5.275000003166497\n          },\n          {\n            \"value\": 6.4950000087264925\n          },\n          {\n            \"value\": 5.590000015217811\n          },\n          {\n            \"value\": 4.664999985834584\n          },\n          {\n            \"value\": 6.109999987529591\n          },\n          {\n            \"value\": 5.460000014863908\n          },\n          {\n            \"value\": 5.080000002635643\n          },\n          {\n            \"value\": 7.749999989755452\n          },\n          {\n            \"value\": 114.58000002312474\n          },\n          {\n            \"value\": 4.6950000105425715\n          },\n          {\n            \"value\": 5.734999984269962\n          },\n          {\n            \"value\": 5.164999980479479\n          },\n          {\n            \"value\": 6.590000004507601\n          },\n          {\n            \"value\": 4.734999994980171\n          },\n          {\n            \"value\": 4.87000000430271\n          },\n          {\n            \"value\": 6.014999991748482\n          },\n          {\n            \"value\": 4.610000003594905\n          },\n          {\n            \"value\": 5.76500000897795\n          },\n          {\n            \"value\": 4.979999997885898\n          },\n          {\n            \"value\": 8.405000000493601\n          },\n          {\n            \"value\": 4.71000000834465\n          }\n        ],\n        \"stats\": {\n          \"min\": 4.5,\n          \"max\": 114.6,\n          \"q1\": 4.9,\n          \"q3\": 6.1,\n          \"median\": 5.5,\n          \"jitter\": 31.1\n        }\n      },\n      \"2\": {\n        \"configuration\": {\n          \"name\": \"up\",\n          \"title\": \"↑ Saturated\",\n          \"page_title\": \"Measuring Latency With Uplink Saturated\"\n        },\n        \"data\": [\n          {\n            \"value\": 5.76500000897795\n          },\n          {\n            \"value\": 24.344999983441085\n          },\n          {\n            \"value\": 7.970000006025657\n          },\n          {\n            \"value\": 7.094999979017302\n          },\n          {\n            \"value\": 5.7450000022072345\n          },\n          {\n            \"value\": 4.904999979771674\n          },\n          {\n            \"value\": 5.104999989271164\n          },\n          {\n            \"value\": 9.449999983189628\n          },\n          {\n            \"value\": 9.265000000596046\n          },\n          {\n            \"value\": 10.165000014239922\n          },\n          {\n            \"value\": 4.974999988917261\n          },\n          {\n            \"value\": 11.910000001080334\n          },\n          {\n            \"value\": 4.860000015469268\n          },\n          {\n            \"value\": 15.094999980647117\n          },\n          {\n            \"value\": 15.034999989438802\n          },\n          {\n            \"value\": 16.419999999925494\n          },\n          {\n            \"value\": 19.530000019585714\n          },\n          {\n            \"value\": 30.31500001088716\n          },\n          {\n            \"value\": 20.955000014510006\n          },\n          {\n            \"value\": 23.704999999608845\n          },\n          {\n            \"value\": 23.769999999785796\n          },\n          {\n            \"value\": 25.02000000094995\n          }\n        ],\n        \"stats\": {\n          \"min\": 4.9,\n          \"max\": 30.3,\n          \"q1\": 6.1,\n          \"q3\": 20.6,\n          \"median\": 11,\n          \"jitter\": 8.1\n        }\n      }\n    },\n    \"box_plot_scale\": [\n      0,\n      114.58000002312474\n    ],\n    \"download_speed\": 64881487.663562395,\n    \"upload_speed\": 54522241.2830685,\n    \"report\": {\n      \"categories\": [\n        {\n          \"name\": \"Web Browsing\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"Audio Calls\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"4K Video Streaming\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"Video Conferencing\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"Online Gaming\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        }\n      ],\n      \"grade\": \"A+\"\n    }\n  },\n  {\n    \"test_running\": true,\n    \"test_title\": \"3/3 Measuring Latency With Uplink Saturated\",\n    \"current_stage_idx\": 2,\n    \"stages\": {\n      \"0\": {\n        \"configuration\": {\n          \"name\": \"unloaded\",\n          \"title\": \"Unloaded\",\n          \"page_title\": \"Measuring Unloaded Latency\"\n        },\n        \"data\": [\n          {\n            \"value\": 5.180000007385388\n          },\n          {\n            \"value\": 4.979999997885898\n          },\n          {\n            \"value\": 4.574999999022111\n          },\n          {\n            \"value\": 4.690000001573935\n          },\n          {\n            \"value\": 4.0250000020023435\n          },\n          {\n            \"value\": 5.230000009760261\n          },\n          {\n            \"value\": 4.434999980730936\n          },\n          {\n            \"value\": 5.004999984521419\n          },\n          {\n            \"value\": 4.574999999022111\n          },\n          {\n            \"value\": 4.214999993564561\n          },\n          {\n            \"value\": 4.849999997531995\n          },\n          {\n            \"value\": 4.4049999851267785\n          },\n          {\n            \"value\": 4.2950000206474215\n          },\n          {\n            \"value\": 5.839999997988343\n          },\n          {\n            \"value\": 4.799999995157123\n          },\n          {\n            \"value\": 4.504999989876524\n          },\n          {\n            \"value\": 4.335000005085021\n          },\n          {\n            \"value\": 4.584999987855554\n          },\n          {\n            \"value\": 4.70999997924082\n          },\n          {\n            \"value\": 4.385000007459894\n          },\n          {\n            \"value\": 4.465000005438924\n          },\n          {\n            \"value\": 4.530000005615875\n          },\n          {\n            \"value\": 4.424999991897494\n          },\n          {\n            \"value\": 5.410000012489036\n          },\n          {\n            \"value\": 6.140000012237579\n          },\n          {\n            \"value\": 4.235000000335276\n          },\n          {\n            \"value\": 4.060000006575137\n          },\n          {\n            \"value\": 4.059999977471307\n          },\n          {\n            \"value\": 4.504999989876524\n          },\n          {\n            \"value\": 4.95000000228174\n          },\n          {\n            \"value\": 4.3500000028871\n          },\n          {\n            \"value\": 4.300000000512227\n          },\n          {\n            \"value\": 5.335000023478642\n          },\n          {\n            \"value\": 5.514999997103587\n          },\n          {\n            \"value\": 4.385000007459894\n          },\n          {\n            \"value\": 4.450000007636845\n          },\n          {\n            \"value\": 4.385000007459894\n          },\n          {\n            \"value\": 4.715000017313287\n          },\n          {\n            \"value\": 4.249999998137355\n          },\n          {\n            \"value\": 4.459999996470287\n          }\n        ],\n        \"stats\": {\n          \"min\": 4,\n          \"max\": 6.1,\n          \"q1\": 4.4,\n          \"q3\": 4.9,\n          \"median\": 4.5,\n          \"jitter\": 0.5\n        }\n      },\n      \"1\": {\n        \"configuration\": {\n          \"name\": \"down\",\n          \"title\": \"↓ Saturated\",\n          \"page_title\": \"Measuring Latency With Downlink Saturated\"\n        },\n        \"data\": [\n          {\n            \"value\": 5.465000023832545\n          },\n          {\n            \"value\": 4.489999992074445\n          },\n          {\n            \"value\": 5.049999977927655\n          },\n          {\n            \"value\": 9.044999984325841\n          },\n          {\n            \"value\": 6.194999994477257\n          },\n          {\n            \"value\": 114.03500000596978\n          },\n          {\n            \"value\": 9.985000011511147\n          },\n          {\n            \"value\": 4.704999999376014\n          },\n          {\n            \"value\": 4.225000011501834\n          },\n          {\n            \"value\": 6.395000003976747\n          },\n          {\n            \"value\": 4.805000004125759\n          },\n          {\n            \"value\": 4.844999988563359\n          },\n          {\n            \"value\": 4.355000011855736\n          },\n          {\n            \"value\": 111.86500001349486\n          },\n          {\n            \"value\": 5.280000012135133\n          },\n          {\n            \"value\": 111.5249999857042\n          },\n          {\n            \"value\": 5.675000022165477\n          },\n          {\n            \"value\": 7.3850000044330955\n          },\n          {\n            \"value\": 5.760000000009313\n          },\n          {\n            \"value\": 5.204999994020909\n          },\n          {\n            \"value\": 4.3899999873247\n          },\n          {\n            \"value\": 4.809999983990565\n          },\n          {\n            \"value\": 4.744999983813614\n          },\n          {\n            \"value\": 4.71000000834465\n          },\n          {\n            \"value\": 4.66999999480322\n          },\n          {\n            \"value\": 5.340000003343448\n          },\n          {\n            \"value\": 5.919999995967373\n          },\n          {\n            \"value\": 4.90999998874031\n          },\n          {\n            \"value\": 5.490000010468066\n          },\n          {\n            \"value\": 4.935000004479662\n          },\n          {\n            \"value\": 5.715000006603077\n          },\n          {\n            \"value\": 5.955000000540167\n          },\n          {\n            \"value\": 4.820000001927838\n          },\n          {\n            \"value\": 4.899999999906868\n          },\n          {\n            \"value\": 4.635000019334257\n          },\n          {\n            \"value\": 4.985000006854534\n          }\n        ],\n        \"stats\": {\n          \"min\": 4.2,\n          \"max\": 114,\n          \"q1\": 4.8,\n          \"q3\": 5.9,\n          \"median\": 5.1,\n          \"jitter\": 30\n        }\n      },\n      \"2\": {\n        \"configuration\": {\n          \"name\": \"up\",\n          \"title\": \"↑ Saturated\",\n          \"page_title\": \"Measuring Latency With Uplink Saturated\"\n        },\n        \"data\": [\n          {\n            \"value\": 4.159999982221052\n          },\n          {\n            \"value\": 5.1499999826774\n          },\n          {\n            \"value\": 4.1049999999813735\n          },\n          {\n            \"value\": 5.015000002458692\n          },\n          {\n            \"value\": 4.129999986616895\n          },\n          {\n            \"value\": 4.719999997178093\n          },\n          {\n            \"value\": 4.425000021001324\n          },\n          {\n            \"value\": 4.464999976335093\n          },\n          {\n            \"value\": 4.22999999136664\n          },\n          {\n            \"value\": 9.029999986523762\n          },\n          {\n            \"value\": 13.344999984838068\n          },\n          {\n            \"value\": 12.604999996256083\n          },\n          {\n            \"value\": 15.594999975292012\n          },\n          {\n            \"value\": 4.5350000145845115\n          },\n          {\n            \"value\": 18.089999997755513\n          },\n          {\n            \"value\": 17.689999978756532\n          },\n          {\n            \"value\": 4.319999978179112\n          },\n          {\n            \"value\": 23.155000002589077\n          },\n          {\n            \"value\": 23.92499998677522\n          },\n          {\n            \"value\": 4.334999975981191\n          },\n          {\n            \"value\": 4.340000014053658\n          },\n          {\n            \"value\": 4.120000026887283\n          },\n          {\n            \"value\": 21.08500001486391\n          }\n        ],\n        \"stats\": {\n          \"min\": 4.1,\n          \"max\": 23.9,\n          \"q1\": 4.3,\n          \"q3\": 14.5,\n          \"median\": 4.7,\n          \"jitter\": 7\n        }\n      }\n    },\n    \"box_plot_scale\": [\n      0,\n      114.03500000596978\n    ],\n    \"download_speed\": 66381444.71369106,\n    \"upload_speed\": 55626902.762657,\n    \"report\": {\n      \"categories\": [\n        {\n          \"name\": \"Web Browsing\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"Audio Calls\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"4K Video Streaming\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"Video Conferencing\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        },\n        {\n          \"name\": \"Online Gaming\",\n          \"criteria\": {\n            \"downlink\": true,\n            \"uplink\": true,\n            \"latency\": true,\n            \"latency_with_jitter\": true\n          }\n        }\n      ],\n      \"grade\": \"A+\"\n    }\n  }\n];","export default class TestResultsManager {\n  static URL = \"https://speed1.waveform.workers.dev\";\n  static TESTS_ENDPOINT = `${TestResultsManager.URL}/test-results`;\n  static get_test_link = (test_id) => `${TestResultsManager.TESTS_ENDPOINT}?test-id=${test_id}`;\n\n  static async get_test_results(test_id) {\n    let res = await fetch(this.get_test_link(test_id), {\n      method: \"GET\"\n    });\n    return await res.json();\n  }\n\n  static async post_results(test_results) {\n    let res = await fetch(TestResultsManager.TESTS_ENDPOINT, {\n      method: \"POST\",\n      body: JSON.stringify(test_results)\n    });\n    return await res.text();\n  }\n}\n","export default class TimeUtility {\n  static get_current_date() {\n    let d = new Date();\n    return `${d.getFullYear()}-${d.getMonth()}-${d.getDay()}-${d.getHours()}-${d.getMinutes()}-${d.getSeconds()}`;\n  };\n\n  static async sleep(ms) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    })\n  }\n\n  static _get_entry(resource_name) {\n    let entries = performance.getEntriesByName(resource_name);\n    return entries.slice(-1).pop();\n  }\n\n  static get_server_timing_for(resource_name) {\n    let perf = TimeUtility._get_entry(resource_name);\n    if (!perf) {\n      console.log(\"ERROR: no performance entry found found for this resource\", resource_name, perf);\n      return Infinity;\n    }\n    return perf.serverTiming[0].duration;\n  }\n\n  static get_ttfb_for(resource_name) {\n    let perf = TimeUtility._get_entry(resource_name);\n    if (!perf) {\n      console.log(\"ERROR: no performance entry found found for this resource\", resource_name, perf);\n      return Infinity;\n    }\n    return perf.responseStart - perf.requestStart;\n  }\n}\n","import React, {Component} from 'react';\nimport {Row, Col} from 'react-bootstrap';\n\n\nexport default class LatencyStatsComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <>\n        <Row style={{fontSize: 13, whiteSpace: 'nowrap'}}>\n          <Col sm={6}>\n            min: {this.props.min}ms<br/>\n            median: {this.props.median}ms<br/>\n            max: {this.props.max}ms\n          </Col>\n          <Col sm={6}>\n            25%: {this.props.q1}ms<br/>\n            75%: {this.props.q3}ms<br/>\n            jitter: {this.props.jitter}ms\n          </Col>\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport BoxPlot from \"./box_plot\";\n\nexport default class LatencyBoxPlot extends Component {\n  render() {\n    return (\n      <BoxPlot\n        {...this.props}\n      />\n    );\n  }\n\n}\n","import React, {Component} from 'react';\nimport {Row, Col} from 'react-bootstrap';\nimport LatencyStatsComponent from \"./latency_stats_component\";\nimport './latency_stage_report.scss';\nimport LatencyBoxPlot from \"./latency_box_plot\";\n\n\nexport default class LatencyStageReport extends Component {\n  constructor(props) {\n    super(props);\n    [this.width, this.height] = this.get_size_based_on_window_size();\n  }\n\n  get_size_based_on_window_size() {\n    const BOOTSTRAP_SM = 768;\n    const BOOTSTRAP_MD = 992;\n    let window_size = window.visualViewport.width;\n    if (window_size < BOOTSTRAP_SM) {\n      return [window_size * 8/12, 70];\n    }\n    if (window_size < BOOTSTRAP_MD) {\n      return [window_size * 5/12, 70];\n    }\n    return [null, null];\n  }\n\n  render() {\n    return (\n      <>\n        <div className={\"WBBLatencyStageReport\"}>\n          <Row>\n            {\n              (this.props.spacer_before) ?\n                (<Col sm={12} className={\"spacer\"}>\n                </Col>)\n                : (<></>)\n            }\n            <Col sm={2} md={2} xs={3} className={\"title\"}>\n              <h5 style={{marginTop: 15}}>{this.props.title}</h5>\n            </Col>\n            <Col sm={7} md={7} xs={9} className={\"WBBBoxPlotContainer\"}>\n              <LatencyBoxPlot\n                width={this.width}\n                height={this.height}\n                data={this.props.data}\n                scale={this.props.box_plot_scale}\n                tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              />\n            </Col>\n            <Col sm={3} md={3} xs={12} className={\"WBBStageLatencyStats\"} >\n              <LatencyStatsComponent\n                data={this.props.data}\n                {...this.props.stats}\n              />\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n","export const StylesConfiguration = {\n  DIVIDER_BORDERS: \"1px solid #979797\",\n};\n\n","import React, {Component} from 'react';\nimport {Row, Col} from \"react-bootstrap\";\nimport {StylesConfiguration} from \"../styles_configuration\";\n\n\nexport default class BufferbloatCallouts extends Component {\n  constructor(props) {\n    super(props);\n    this.median = 0;\n  }\n\n  report_bufferbloat(stage, i) {\n    if (!stage.stats) {\n      return ;\n    }\n    const BAD_MEASUREMENT_THRESHOLD = 50;\n    let measurement = 0, status_class=\"\";\n    if (i === 0) {\n      measurement = stage.stats.median;\n      this.median = measurement;\n    } else {\n      measurement = stage.stats.median - this.median;\n      measurement = (measurement >= 0) ? measurement : 0;\n      measurement = `+${measurement.toFixed(2)}`;\n      status_class = (measurement < BAD_MEASUREMENT_THRESHOLD) ? \"good\" : \"bad\";\n    }\n    measurement += \" ms\";\n    return (\n      <div className={`latency ${status_class}`}>\n        {\n          measurement\n        }\n      </div>\n    )\n  }\n\n\n  render() {\n    return (\n      <>\n        <Row style={{textAlign: 'center'}}>\n          {Object.keys(this.props.stage_data).map((k, i) => {\n            const stage = this.props.stage_data[k];\n            const length = Object.keys(this.props.stage_data).length;\n            return (\n              <Col\n                className={\"callout\"}\n                key={k}\n                xs={12/length}\n                style={ (i !== 0) ? {borderLeft: StylesConfiguration.DIVIDER_BORDERS}: {}}>\n                <div className=\"condition\">\n                  {stage.configuration.title}\n                </div>\n                {\n                  this.report_bufferbloat(stage, i)\n                }\n              </Col>\n            )\n          })}\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport {Row, Col} from 'react-bootstrap';\nimport BufferbloatCallouts from \"./bufferbloat_callouts\";\n\n\nexport default class LatencyResultsReport extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"WBBLatencySummary\">\n          <Row>\n            <Col xs={12} sm={7}>\n              <h3>Latency Results</h3>\n              <p>Bufferbloat is measured by comparing the latency of an Internet connection when it is unloaded to when it is \"saturated.\"</p>\n            </Col>\n            <Col xs={12} sm={5} className={\"WBBMeasurementsCalloutsContainer\"}>\n              <BufferbloatCallouts\n                stage_data={this.props.stage_data}\n              />\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n","export default class Stage {\n  async run() {\n\n  }\n}\n","export const RuntimeEnvironment = {\n  is_mobile: (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\n};","import TimeUtility from \"../utilities/time_utility\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport {RuntimeEnvironment} from \"../utilities/runtime_environment\";\n\n\nexport default class GenericLatencyCollector {\n  constructor(url, interval, interval_cb, done_cb, count) {\n    this.url = url;\n    this.interval = interval;\n    this.interval_cb = interval_cb;\n    this.done_cb = done_cb;\n    this.count = count;\n    this.cancelled = false;\n  }\n\n  async _get_ttfb() {\n    let start = Date.now();\n    let res = await fetch(this.url, {\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    });\n    let diff = Date.now() - start;\n    await res.text();\n    return (RuntimeEnvironment.is_mobile) ? diff : TimeUtility.get_ttfb_for(this.url);\n  }\n\n  async start() {\n    let intervals = [];\n    let i = 0;\n    while (i < this.count) {\n      const ttfb = await this._get_ttfb();\n      if (this.cancelled) {\n        return ;\n      }\n      if (ttfb < AppConfiguration.IGNORE_TTFB_BELOW) {\n        continue\n      }\n      i++;\n      intervals.push(ttfb);\n      this.interval_cb(ttfb);\n      await TimeUtility.sleep(this.interval)\n    }\n    if (this.done_cb) {\n      this.done_cb();\n    }\n    console.log('intervals', intervals.length);\n  }\n\n  cancel() {\n    this.cancelled = true;\n  }\n}\n","import {AppConfiguration} from \"../app_configuration\";\nimport GenericLatencyCollector from \"./generic_latency_collector\";\nimport {main_candidate} from \"./latency_candidates\";\n\nexport default class LatencyCollectorProvider {\n  static provide(data_cb, done_cb, count) {\n    return new GenericLatencyCollector(\n      main_candidate,\n      AppConfiguration.PING_INTERVAL,\n      data_cb,\n      done_cb,\n      count\n    );\n  }\n}","let urls = [\n  \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2\",\n  \"https://fonts.gstatic.com/l/font?kit=KFOmCnqEu92Fr1Me4GZNCzcPK4I&skey=a0a0114a1dcab3ac&v=v20\",\n  \"https://speed.cloudflare.com/__down?bytes=0\"\n], main_candidate = urls[1];\n\nexport {main_candidate}\n","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class LatencyMeasurementStage extends Stage {\n  constructor(data_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    super.run();\n    const collector = LatencyCollectorProvider\n      .provide(this.data_callback, this.done_callback, AppConfiguration.NUM_LATENCY_MEASUREMENTS);\n    await collector.start();\n  }\n}","import StatisticsUtilities from \"./statistics_utilities\";\n\nexport default class BandwidthMeasurementUtilities {\n  static get_regression_from_upload_progress(byte_tracker) {\n    let first_time = byte_tracker[0][0];\n    let formatted = byte_tracker.map(entry => {\n      return {\n        x: entry[0] - first_time,\n        y: entry[1]\n      }\n    });\n    return StatisticsUtilities.get_linear_regression(formatted);\n  }\n\n  static collect_good_measurements(bytes_info) {\n    const THRESHOLD_NUM_DATA = 50,\n      THRESHOLD_ACCEPTANCE_CONFIDENCE = 0.99;\n    let i = 1;\n    let measured = [];\n    const to_bps = BandwidthMeasurementUtilities.to_bps;\n    const get_reg = (bytes) => BandwidthMeasurementUtilities.get_regression_from_upload_progress(bytes);\n    while (i < bytes_info.length/2) {\n      let sliced = bytes_info.slice(i, -i);\n      if (sliced.length < THRESHOLD_NUM_DATA) {\n        break;\n      }\n      let reg = get_reg(sliced);\n      if (reg.rSquared > THRESHOLD_ACCEPTANCE_CONFIDENCE) {\n        measured.push(to_bps(reg.a));\n      }\n      i+=10;\n    }\n    if (measured.length === 0) {\n      console.warn(\"Download data too noisy, internet connection might not be stable\");\n      let reg = get_reg(bytes_info);\n      return to_bps(reg.a);\n    }\n    return Math.max(...measured)\n  }\n\n  static to_bps(bw) {\n    return bw * 8 * 1e3;\n  }\n}","import TimeUtility from \"../utilities/time_utility\";\nimport BandwidthMeasurementUtilities from \"../utilities/bandwidth_measurement_utilities\";\nimport DebugTools from \"../test/debug_tools\";\n\nexport default class DownloadMeasurementCollector {\n  constructor(measurement_callback, done_callback) {\n    this.measurement_callback = measurement_callback || (() => null);\n    this.done_callback = done_callback || (() => null);\n    this.controller = new AbortController();\n  }\n\n  get_http_fetch(size, i) {\n    let signal = this.controller.signal;\n    //return fetch(`https://speed${i+1}.arshankhanifar.workers.dev/hi/down?bytes=${size}`, {signal});\n    return fetch(`https://speed.cloudflare.com/__down?bytes=${size}`, {signal});\n  }\n\n  async download_for_n_seconds(n, streams) {\n    this.running = true;\n    const MAX_DOWNLOAD_SIZE = 1e8;\n    setTimeout(() => {this.cancel()}, n * 1000);\n    return this.measure_download(MAX_DOWNLOAD_SIZE, streams);\n  }\n\n  make_requests(num_streams, size) {\n    return Array(num_streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map((req, i) => {\n        req.fetch = () => this.get_http_fetch(size, i);\n        return req;\n      })\n  }\n\n  bandwidth_from_last_n_samples(tracking, n) {\n    if (tracking.length < n) {\n      return 0;\n    }\n    let [this_time, this_data] = tracking.slice(-1).pop();\n    let [last_time, last_data] = tracking.slice(-n, -n + 1).pop();\n    let bw = ((this_data - last_data )/(this_time - last_time) * 8 / 1e3);\n    return bw;\n  }\n\n  async measure_download(size, streams) {\n    let total = 0;\n    let bytes = [[Date.now(), total]];\n    let measurements = [];\n    let self = this;\n    let requests = this.make_requests(streams, size)\n      .map(async (req, i) => {\n        return new Promise(async resolve => {\n          let res = null;\n          while (this.running) {\n            try {\n              res = await req.fetch();\n            } catch (e) {\n              console.log('err1', e);\n              return resolve();\n            }\n            const reader = res.body.getReader();\n            try {\n              await pump();\n            } catch (err) {\n              console.log('err2', err);\n              resolve();\n            }\n            function pump() {\n              return reader.read().then(({ done, value }) => {\n                if (done) {\n                  return;\n                }\n                total += value.length;\n                bytes.push([Date.now(), total]);\n                measurements.push(self.bandwidth_from_last_n_samples(bytes, 10));\n                return pump();\n              });\n            }\n          }\n          resolve();\n        });\n      });\n    await Promise.all(requests);\n    let rate = BandwidthMeasurementUtilities.collect_good_measurements(bytes);\n    this.done_callback(rate);\n    return rate;\n  }\n\n  cancel() {\n    this.running = false;\n    this.controller.abort();\n  }\n}","import Stage from \"./stage\";\nimport DownloadMeasurementCollector from \"../tools/download_measurement_collector\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class DownlinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    const meas_callback = (measurement) => {\n        console.log(`realtime rate ${measurement/1e6}mbps`);\n    };\n    const downloader = new DownloadMeasurementCollector(meas_callback);\n    let download_speed = await downloader.download_for_n_seconds(\n      AppConfiguration.DOWNLOAD_DURATION,\n      AppConfiguration.DOWNLOAD_NUM_STREAMS\n    );\n    collector.cancel();\n    this.bandwidth_callback(download_speed);\n    this.done_callback();\n  }\n}","import TimeUtility from \"../utilities/time_utility\";\nimport BandwidthMeasurementUtilities from \"../utilities/bandwidth_measurement_utilities\";\nimport {RuntimeEnvironment} from \"../utilities/runtime_environment\";\n\nexport default class UploadBasedOnGuess {\n  async upload_based_on_downlink_guess(downlink_speed, duration) {\n    const upload_url = (i) => `https://speed.cloudflare.com/__up?uuid=${i}`;\n    const [file_size, num_measurements] = this.get_upload_size(downlink_speed, duration);\n    console.log(\"num measurements\", num_measurements);\n    let measurements = [];\n    for (let i in [...Array(num_measurements).keys()]) {\n      const url = upload_url(i);\n      let res = await fetch(url, {\n        method: 'POST',\n        body: \"0\".repeat(file_size),\n      });\n      await res.text();\n      let measurement = this.calculate_performance_for_entry(file_size, url);\n      console.log(\"calculated measurement\", measurement);\n      measurements.push(measurement);\n    }\n    console.log(\"all measurements\", measurements);\n    return measurements;\n  }\n\n  get_upload_size(downlink_speed, duration) {\n    const MAX_FILE_SIZE = 1e8;\n    let total_upload = duration * downlink_speed / 8;\n    let num_measurements = 10;\n    let file_size = total_upload/num_measurements;\n    if (file_size > MAX_FILE_SIZE) {\n      file_size = MAX_FILE_SIZE;\n      num_measurements = total_upload/file_size;\n    }\n    return [file_size, num_measurements];\n  }\n\n  calculate_performance_for_entry(size, url) {\n    const time_difference = (RuntimeEnvironment.is_mobile) ?\n      TimeUtility.get_ttfb_for(url):\n      TimeUtility.get_server_timing_for(url);\n    return BandwidthMeasurementUtilities.to_bps(size/time_difference);\n  }\n}\n","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport GuessBasedUploader from \"../tools/guess_based_uploader\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport UploadBasedOnGuess from \"../tools/upload_based_on_guess\";\n\n\nexport default class UplinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run(context) {\n    const downlink_speed = context.downlink_speed;\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    let uploader = new UploadBasedOnGuess();\n    let upload_measurements = await uploader.upload_based_on_downlink_guess(\n      downlink_speed,\n      AppConfiguration.UPLOAD_DURATION\n    );\n    collector.cancel();\n    this.bandwidth_callback(Math.max(...upload_measurements));\n    this.done_callback();\n  }\n}","import React, {Component} from 'react';\nimport {Row, Col} from \"react-bootstrap\";\nimport {StylesConfiguration} from \"../styles_configuration\";\nimport './bandwidth_report_component.scss';\n\n\nexport default class BandwidthReportComponent extends Component {\n  render() {\n    return (\n      <>\n        {\n          (this.props.download_speed || this.props.upload_speed) &&\n          (\n            <Row className=\"WBBBandwidthReportComponent\" style={{marginTop: 15}}>\n              <Col xs={0} sm={1} md={2}></Col>\n              <Col className=\"WBBSpeedTestResults\" xs={12} sm={4} md={4}>\n                <h4>Speed Test Results:</h4>\n              </Col>\n              <Col className={\"WBBSpeedMeasurementPlaceholder\"} xs={12} sm={5} md={4}>\n                <div>\n                  {\n                    this.props.download_speed &&\n                    (<Col xs={6} className={\"WBBDownload\"}>\n                      <div>\n                        ↓ Download\n                      </div>\n                      <div className={\"WBBValue\"}>\n                        {(this.props.download_speed/1e6).toFixed(2)}Mbps\n                      </div>\n                    </Col>)\n                  }\n                  {\n                    this.props.upload_speed &&\n                    (<Col xs={6} className={\"WBBUpload\"} style={{borderLeft: StylesConfiguration.DIVIDER_BORDERS}}>\n                      <div>\n                        ↑ Upload\n                      </div>\n                      <div className={\"WBBValue\"}>\n                        {(this.props.upload_speed/1e6).toFixed(2)}Mbps\n                      </div>\n                    </Col>)\n                  }\n                </div>\n              </Col>\n            </Row>\n          )\n        }\n      </>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport {Row, Col} from \"react-bootstrap\";\nimport {StylesConfiguration} from \"../styles_configuration\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport \"./card_title_component.scss\";\n\n\nexport default class CardTitleComponent extends Component {\n  get_picture(category) {\n    const criteria = Object.keys(category.criteria);\n    let met_criteria = criteria.map(criterion => category.criteria[criterion]).reduce((a, b) => a && b);\n    let path = AppConfiguration.STATIC_RESOURCES_PATH + ((met_criteria) ? \"shield.svg\" : \"bad.svg\");\n    return  path;\n  }\n\n  render() {\n    const fix_bb_link = \"https://www.bufferbloat.net/projects/bloat/wiki/What_can_I_do_about_Bufferbloat/\";\n\n    return (\n      <>\n        {\n          this.props.report ? (\n            <div className={\"WBBCardTitle WBBTestingDone\"}>\n              <Row className={\"WBBYourGrade\"}>\n                <h2>\n                  Your Bufferbloat Grade: {this.props.report.grade}\n                </h2>\n                <p>Read about <a href={fix_bb_link}>how to fix bufferbloat issues.</a></p>\n              </Row>\n              <Row className={\"WBBCategoryContainer\"}>\n                {this.props.report.categories.map(category => (\n                  <Col className={\"indicator\"} key={category.name}>\n                    <img src={this.get_picture(category)} alt=\"indicator-good\"/>\n                       {' '}\n                       <strong>\n                         {category.name}\n                       </strong>\n                       {' '}\n                  </Col>\n                ))}\n              </Row>\n              <a className={\"WBBHowToFixSmallScreen\"} href={fix_bb_link}>How to fix bufferbloat issues.</a>\n            </div>\n          ):(\n            <div className={\"WBBCardTitle\"}>\n              <h2>{this.props.title}</h2>\n            </div>\n          )\n        }\n      </>\n    )\n  }\n}\n","export default class ReportGenerator {\n  static generate_report(test_data) {\n    const LARGER_THAN = \"LARGER_THAN\",\n      SMALLER_THAN = \"SMALLER_THAN\";\n    const categories = [\n      // sources:\n      // 1. https://broadbandnow.com/guides/how-much-internet-speed-do-i-need\n      // 2. https://www.phone.com/much-bandwidth-need-voip/\n      // 3. https://www.lifewire.com/what-is-latency-and-how-it-can-be-reduced-3426314#:~:text=Latency%20is%20measured%20in%20milliseconds,higher%2C%20latency%20becomes%20completely%20unacceptable.\n      // 4. https://www.highspeedinternet.com/resources/how-much-speed-do-i-need-for-online-gaming\n      {\n        name: \"Web Browsing\",\n        criteria: {\n          downlink: [LARGER_THAN, 1],\n          uplink: [LARGER_THAN, 1],\n          latency: null,\n          latency_with_jitter: null,\n        }\n      },\n      {\n        name: \"Audio Calls\",\n        criteria: {\n          downlink: [LARGER_THAN, 3],\n          uplink: [LARGER_THAN, 3],\n          latency: [SMALLER_THAN, 150],\n          latency_with_jitter: [SMALLER_THAN, 200],\n        }\n      },\n      {\n        name: \"4K Video Streaming\",\n        criteria: {\n          downlink: [LARGER_THAN, 40],\n          uplink: null,\n          latency: null,\n          latency_with_jitter: null,\n        }\n      },\n      {\n        name: \"Video Conferencing\",\n        criteria: {\n          downlink: [LARGER_THAN, 2.5],\n          uplink: [LARGER_THAN, 2.5],\n          latency: [SMALLER_THAN, 150],\n          latency_with_jitter: [SMALLER_THAN, 200],\n        }\n      },\n      {\n        name: \"Online Gaming\",\n        criteria: {\n          downlink: [LARGER_THAN, 3],\n          uplink: [LARGER_THAN, 0.5],\n          latency: [SMALLER_THAN, 100],\n          latency_with_jitter: [SMALLER_THAN, 150],\n        }\n      }\n    ];\n\n    let [downlink, uplink] = [test_data.download_speed/1e6, test_data.upload_speed/1e6],\n      stages_data = Object.keys(test_data.stages).map(k => test_data.stages[k]),\n      latency = Math.max(...stages_data.map(stage_data => stage_data.stats.median)),\n      latency_with_jitter = Math.max(\n      ...stages_data.map(\n        stage_data => stage_data.stats.median + stage_data.stats.jitter\n      )\n    );\n\n    const gradings =  [\n      {\n        until: 5,\n        grade: \"A+\"\n      },\n      {\n        until: 30,\n        grade: \"A\"\n      },\n      {\n        until: 60,\n        grade: \"B\"\n      },\n      {\n        until: 200,\n        grade: \"C\"\n      },\n      {\n        until: 400,\n        grade: \"D\"\n      },\n      {\n        until: Infinity ,\n        grade: \"F\"\n      }\n    ];\n\n    const latencies = test_data.stages.map(stage_data => stage_data.stats.median);\n    let  downlink_bb = (latencies[1] - latencies[0]),\n      uplink_bb = latencies[2] - latencies[0];\n    downlink_bb = (downlink_bb > 0) ? downlink_bb : 0;\n    uplink_bb = (downlink_bb > 0) ? uplink_bb : 0;\n    const combined_bb = (downlink_bb + uplink_bb)/2;\n    const measurements = {\n      downlink: downlink,\n      uplink: uplink,\n      latency: latency,\n      latency_with_jitter: latency_with_jitter,\n    };\n\n    function grade(combined_bb) {\n      for (let i in gradings) {\n        let grading = gradings[i];\n        if (combined_bb < grading.until) {\n          return grading.grade;\n        }\n      }\n      return gradings.slice(-1).pop().grade;\n    }\n\n    return {\n      categories: categories.map(category => {\n        const criteria = category.criteria,\n          criteria_names = Object.keys(criteria);\n        const report = {\n          name: category.name,\n          criteria: criteria_names.reduce((dict, c_name) => {\n            if (criteria[c_name] === null) {\n              dict[c_name] = true;\n              return dict;\n            }\n            if (criteria[c_name][0] === LARGER_THAN) {\n              dict[c_name] = measurements[c_name] > criteria[c_name][1];\n              return dict;\n            }\n            dict[c_name] = measurements[c_name] < criteria[c_name][1];\n            return dict;\n          }, {})\n        };\n        return report;\n\n      }),\n      grade: grade(combined_bb)\n    }\n  }\n}","import React, {Component} from 'react';\nimport {FormGroup, Row, Col, ControlLabel, FormControl, Form, Button} from \"react-bootstrap\";\nimport TestResultsManager from \"../tools/test_results_manager\";\nimport \"./share_results_component.scss\"\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class ShareResultsComponent extends Component {\n  copy_to_clipboard(e) {\n    document.querySelector('#shareResults').select();\n    document.execCommand('copy');\n  }\n\n  render() {\n    const create_url = (test_id) => `${window.location.origin}?${AppConfiguration.TEST_ID_QUERY}=${test_id}`;\n    let test_id = this.props.test_id;\n    return (\n      <div className={`WBBFooter ${test_id ? \"WBBResultsLink\" : \"\"}`}>\n        {(test_id) ?\n          (<>\n            <Row>\n              <Col xs={12} className={\"WBBNoPadding\"}>\n                <Form inline>\n                  <FormGroup controlId=\"shareResults\">\n                    <ControlLabel>\n                      Share<span> Your Results</span>:\n                    </ControlLabel>\n                    <FormControl type=\"text\" value={create_url(this.props.test_id)}/>\n                    <Button className={\"copy-button\"} onClick={this.copy_to_clipboard.bind(this)}>\n                      Copy\n                      <img src=\"copy.svg\" alt=\"copy-icon\"/>\n                    </Button>\n                    <div className={\"test-again\"}>\n                      <Button bsStyle=\"primary\" onClick={this.props.test_again}>\n                        Test Again\n                      </Button>\n                    </div>\n                  </FormGroup>\n                </Form>\n              </Col>\n            </Row>\n          </>): (<></>)}\n      </div>\n    )\n  }\n}","import * as d3 from 'd3';\nimport React, {Component} from \"react\";\nimport {Button, Row, Col, Navbar} from \"react-bootstrap\";\nimport '../components/component_styles.scss';\nimport LatencyStageReport from \"../components/latency_stage_report\";\nimport LatencyResultsReport from \"../components/latency_results_report\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport LatencyMeasurementStage from \"../stages/latency_measurement_stage\";\nimport DownlinkMeasurementStage from \"../stages/downlink_measurement_stage\";\nimport UplinkMeasurementStage from \"../stages/uplink_measurement_stage\";\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport {DEBUG_STATE} from \"../test/debug_state\";\nimport BandwidthReportComponent from \"../components/bandwidth_report_component\";\nimport CardTitleComponent from \"../components/card_title_component\";\nimport ReportGenerator from \"../tools/report_generator\";\nimport TestResultsManager from \"../tools/test_results_manager\";\nimport ShareResultsComponent from \"../components/share_results_component\";\n\n\nexport default class BufferBloatTestComponent extends Component {\n  static TEST_NOT_FOUND = \"not found\";\n  BOX_PLOT_SCALE_DEFAULT = [0, 5];\n\n  _get_initial_state() {\n    return {\n      test_running: false,\n      test_title: 'Bufferbloat Test',\n      current_stage_idx: -1,\n      stages: {},\n      test_id: null,\n      report: null,\n      box_plot_scale: this.BOX_PLOT_SCALE_DEFAULT,\n      download_speed: null,\n      upload_speed: null,\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.stages_configuration = [\n      {\n        name: \"unloaded\",\n        title: \"Unloaded\",\n        page_title: \"Measuring Unloaded Latency\"\n      },\n      {\n        name: \"down\",\n        title: \"↓ Saturated\",\n        page_title: \"Measuring Latency With Downlink Saturated\"\n      },\n      {\n        name: \"up\",\n        title: \"↑ Saturated\",\n        page_title: \"Measuring Latency With Uplink Saturated\"\n      }\n    ];\n    this.stage_context = null;\n    this.state = this._get_initial_state();\n    performance.setResourceTimingBufferSize(AppConfiguration.RESOURCE_TIMING_BUFFER_SIZE);\n    this.stages = [\n      new LatencyMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new DownlinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.downlink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new UplinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.uplink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      )\n    ];\n  }\n\n  downlink_measurement(bandwidth) {\n    console.log(\"downlink bandwidth\", bandwidth);\n    this.setState({\n      download_speed: bandwidth\n    });\n    this.stage_context = {\n      downlink_speed: bandwidth\n    };\n  }\n\n  uplink_measurement(bandwidth) {\n    console.log(\"uplink bandwidth\", bandwidth);\n    this.setState({\n      upload_speed: bandwidth\n    });\n  }\n\n  async test_again() {\n    await this.update_current_state({\n      ...this._get_initial_state()\n    });\n    await this.start_test();\n  }\n\n  async debug() {\n    //await this.start_test();\n    await this.setState({\n      ...DEBUG_STATE[6],\n      current_stage_idx: 3\n    });\n    await this.advance_stage();\n  }\n\n  async advance_stage() {\n    let curr_idx = this.state.current_stage_idx + 1;\n    if (curr_idx >= this.stages.length) {\n      let stages_flattened = this.state.stages;\n      stages_flattened = Object.keys(stages_flattened).map(k => stages_flattened[k]);\n      await this.setState({\n        report: ReportGenerator.generate_report({\n          stages: stages_flattened,\n          download_speed: this.state.download_speed,\n          upload_speed: this.state.upload_speed,\n          current_stage_idx: curr_idx,\n        })\n      });\n      let test_id = await TestResultsManager.post_results(this.state);\n      await this.setState({\n        test_id: test_id\n      });\n      return;\n    }\n    await this.setState({\n      current_stage_idx: curr_idx,\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          configuration: this.stages_configuration[curr_idx],\n          data: []\n        }\n      },\n      test_title: `${curr_idx + 1}/${this.stages_configuration.length} ${this.stages_configuration[curr_idx].page_title}`\n    });\n    this.stages[curr_idx].run(this.stage_context);\n  }\n\n  async start_test() {\n    await this.setState({\n      test_running: true,\n    });\n    this.advance_stage();\n  }\n\n  adjust_scale(latency) {\n    if (latency > AppConfiguration.MAX_LATENCY_PLOTTED) {\n      return;\n    }\n    if (latency > this.state.box_plot_scale[1]) {\n      this.setState({\n        box_plot_scale: [0, latency]\n      })\n    }\n  }\n\n  async add_latency_to_current_stage(latency) {\n    this.adjust_scale(latency);\n    let curr_idx = this.state.current_stage_idx,\n      current_stage = this.state.stages[curr_idx],\n      current_data = current_stage.data || [],\n      new_data = [...current_data, {value: latency}];\n    await this.setState({\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          ...current_stage,\n          data: new_data,\n          stats: {\n            ...this.calculate_stats(new_data)\n          }\n        }\n      }\n    })\n  }\n\n  calculate_stats(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    let [q1, q3, median, min, max, std] = StatisticsUtilities\n      .calculate_important_values(sorted)\n      .map(d => parseFloat(d.toFixed(1)));\n    return {\n      min: min,\n      max: max,\n      q1: q1,\n      q3: q3,\n      median: median,\n      jitter: std\n    };\n  }\n\n  async update_current_state(state) {\n    this.test_result = state;\n    this.setState({\n      ...state\n    });\n  }\n\n  render() {\n    const test_view = (\n      <div className=\"card-body\">\n        <LatencyResultsReport\n          stage_data={this.state.stages}\n        />\n        {\n          Object.keys(this.state.stages).map((i) => {\n            let stage = this.state.stages[i];\n            return (\n              <div key={stage.configuration.name}>\n                <LatencyStageReport\n                  box_plot_scale={this.state.box_plot_scale}\n                  title={stage.configuration.title}\n                  key={stage.configuration.name}\n                  data={stage.data}\n                  stats={stage.stats}\n                  spacer_before={parseInt(i) !== 0}\n                />\n              </div>\n            )\n          })\n        }\n        <BandwidthReportComponent\n          download_speed={this.state.download_speed}\n          upload_speed={this.state.upload_speed}\n        />\n      </div>\n    );\n\n    const get_view = () =>  {\n      if (this.props.running_new_test) {\n        if (this.state.test_running) {\n          return test_view;\n        } else {\n          return (\n            <div className=\"card-body WBBStartRunningTheTest\">\n              <div>\n                Click below to start running the test.\n              </div>\n              <Button bsStyle=\"primary\" onClick={this.start_test.bind(this)}>Start Test</Button>\n            </div>\n          )\n        }\n      }\n      if (this.test_result === BufferBloatTestComponent.TEST_NOT_FOUND) {\n        return (\n          <div className=\"card-body\">\n            <div>\n              Test was not found.\n            </div>\n          </div>\n        )\n      }\n      if (this.test_result) {\n        return test_view;\n      } else {\n        return (\n          <div className=\"card-body\">\n            <div>\n              Loading.\n            </div>\n          </div>\n        )\n      }\n    };\n\n    return (\n      <>\n        <div className=\"container WBBContainer\">\n          <div className=\"WBBCard WBBMainTestCard\">\n            <div className=\"card-header\">\n              <CardTitleComponent\n                title={this.state.test_title}\n                report={this.state.report}\n              />\n            </div>\n            {\n              get_view()\n            }\n            <ShareResultsComponent\n              test_again={this.test_again.bind(this)}\n              test_id={this.state.test_id}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import {\n  BrowserRouter as Router,\n  Link,\n  useLocation,\n  withRouter\n} from \"react-router-dom\";\n\nimport React, {Component} from \"react\";\nimport {DEBUG_STATE} from \"../test/debug_state\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport TestResultsManager from \"../tools/test_results_manager\";\nimport TimeUtility from \"../utilities/time_utility\";\nimport BufferBloatTestComponent from \"../components/buffer_bloat_test_component\";\n\n\nclass QueryParamsExtractor extends Component {\n  constructor(props) {\n    super(props);\n    const { match, location, history } = this.props;\n    this.buffer_bloat = React.createRef();\n    let query = new URLSearchParams(location.search);\n    const test_id = query.get(AppConfiguration.TEST_ID_QUERY);\n    const running_new_test = (test_id || \"\").length === 0;\n    this.state = {\n      test_result: null,\n      running_new_test: running_new_test,\n      test_id: test_id\n    }\n  }\n  componentDidMount() {\n    this.load_state().then(()=>{});\n  }\n\n  async load_state() {\n    if (this.state.running_new_test) {\n      return;\n    }\n    let state = null;\n    try {\n      state = await TestResultsManager.get_test_results(this.state.test_id);\n    } catch (e) {\n      state = BufferBloatTestComponent.TEST_NOT_FOUND;\n    }\n    this.buffer_bloat.current.update_current_state(state);\n  }\n\n  render() {\n    return (\n      <BufferBloatTestComponent\n        ref={this.buffer_bloat}\n        running_new_test={this.state.running_new_test}\n        test_result={this.state.test_result}\n      />\n    )\n  }\n}\n\nconst QueryParamsExtractorWithRouter = withRouter(QueryParamsExtractor);\n\nexport default class MainPage extends Component {\n  render() {\n    return (\n      <Router>\n        <QueryParamsExtractorWithRouter/>\n      </Router>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from \"./pages/main_page\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as d3 from 'd3';\nimport * as d3Regression from 'd3-regression';\n\n\nexport default class StatisticsUtilities {\n  static calculate_important_values(sorted_data) {\n    let q1 = d3.quantile(sorted_data,.25),\n      q3 = d3.quantile(sorted_data,.75),\n      median = d3.quantile(sorted_data,.5),\n      min = sorted_data[0],\n      max = sorted_data[sorted_data.length - 1],\n      std = d3.deviation(sorted_data) || 0;\n    return [q1, q3, median, min, max, std];\n  }\n\n  static get_linear_regression(data) {\n    let linearRegression = d3Regression.regressionLinear()\n      .x(d => d.x)\n      .y(d => d.y);\n    return linearRegression(data);\n  }\n\n\n}","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class BoxPlot extends Component {\n  TRANSITION_TIME = 300;\n  DOT_COLOUR = \"#4a90e2\";\n\n  constructor(props) {\n    super(props);\n    this.chart_component = React.createRef();\n    this.data = props.data.filter(d => !this.is_invalid(d)) || [];\n    this.height = props.height || 80;\n    this.width = props.width || 460;\n    this.scale = props.scale;\n    // eslint-disable-next-line no-template-curly-in-string\n    this.tooltip_html = this.props.tooltip_html || 'value: ${d.value}';\n\n  }\n\n  calculate_important_values(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    return StatisticsUtilities.calculate_important_values(sorted);\n  }\n\n  get_chart_parameters() {\n    const margin = {top: 10, right: 10, bottom: 10, left: 10},\n      width = this.width - margin.left - margin.right,\n      height = this.height - margin.top - margin.bottom,\n      point_position_relative_to_top = 3/4 * height,\n      middle_anchor_relative_to_top = 1/4 * height;\n    return [margin, width, height, point_position_relative_to_top, middle_anchor_relative_to_top];\n  }\n\n  componentDidMount() {\n    let [margin, width, height] = this.get_chart_parameters();\n\n    let svg = d3.select(this.chart_component.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    this._svg = svg;\n    let data = this.data;\n    this.update_scale(data);\n\n    this._points_container = svg.append(\"g\")\n      .attr(\"id\", \"data_points\");\n\n    this.add_tooltip();\n    this.draw_points(data);\n    this.add_line_with_ticks(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n  }\n\n  add_tooltip() {\n    this._tooltip = d3.select(this.chart_component.current)\n      .append(\"div\")\n      .style(\"opacity\", 0)\n      .attr(\"class\", \"tooltip\")\n      .style(\"border\", \"solid\")\n      .style(\"background-color\", \"white\")\n      .style(\"border-width\", \"2px\")\n      .style(\"border-radius\", \"5px\")\n      .style(\"padding\", \"5px\");\n  }\n\n  set_circle_attributes(selection) {\n    let [,,, rel_pos] = this.get_chart_parameters();\n    let tooltip = this._tooltip;\n    let component = this;\n\n    let mouseover = function(d) {\n      tooltip.style(\"opacity\", 1);\n      d3.select(this)\n        .style(\"stroke\", \"black\")\n        .style(\"opacity\", 1);\n    };\n\n    let mousemove = function(e, d) {\n      let relative_dist = d3.pointer(e, this);\n      tooltip.html(eval(\"`\" + component.tooltip_html + \"`\"))\n        .style(\"left\", (relative_dist[0]) + \"px\")\n        .style(\"top\", (relative_dist[1]) + rel_pos + \"px\");\n    };\n\n    let mouseleave = function(d) {\n      tooltip\n        .style(\"opacity\", 0);\n      d3.select(this)\n        .style(\"stroke\", \"none\")\n        .style(\"opacity\", 0.8);\n    };\n\n    selection.attr(\"cy\", () => rel_pos)\n      .attr(\"r\", 3)\n      .attr(\"fill\", this.DOT_COLOUR)\n      .on(\"mouseover\", mouseover)\n      .on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave);\n  }\n\n  draw_points(data) {\n    let x = this._x_scale;\n    let selection = this._points_container\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) => x(d.value));\n    this.set_circle_attributes(selection);\n  }\n\n  get_indicator_height() {\n    if (this.width < 300) {\n      return this.width/15;\n    }\n    if (this.width < 500) {\n      return this.width/30;\n    }\n    return 20;\n  }\n\n  update_points_locations(data) {\n    let circles = this._points_container\n      .selectAll(\"circle\")\n      .data(data);\n\n    circles\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"cx\", d => this._x_scale(d.value));\n  }\n\n  add_line_with_ticks(data) {\n    let indicator_tick_height = this.get_indicator_height()/2,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale,\n      svg = this._svg;\n\n    let [,,, min, max,] = this.calculate_important_values(data);\n    let [, width,,, mid_anchor_rel] = this.get_chart_parameters();\n\n    let middle_anchor = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + mid_anchor_rel + \")\");\n\n    this._middle_anchor = middle_anchor;\n\n    let x_min = x(min) || 0,\n        x_max = x(max) || width;\n\n    this.main_line = middle_anchor.append(\"line\")\n      .attr(\"x1\", x_min)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", x_max)\n      .attr(\"y2\", 0)\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    function make_tic(at) {\n      return middle_anchor.append(\"line\")\n        .attr(\"x1\", at)\n        .attr(\"y1\", -indicator_tick_height/2)\n        .attr(\"x2\", at)\n        .attr(\"y2\", +indicator_tick_height/2)\n        .attr(\"stroke\", indicator_stroke_colour);\n    }\n\n    this.tick_1 = make_tic(x_min);\n    this.tick_2 = make_tic(x_max);\n  }\n\n  add_quartile_box_if_it_doesnt_exist(data) {\n    if (this._quartile_box || data.length < 5) {\n      return\n    }\n    this.add_quartile_box(data);\n  }\n\n  add_quartile_box(data) {\n    let indicator_box_height = this.get_indicator_height(),\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale;\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n\n    this._quartile_box =  this._middle_anchor\n      .append(\"g\")\n      .attr(\"id\", \"quartile_box\");\n\n    this._quartile_rect = this._quartile_box.append(\"rect\")\n      .attr(\"x\", x(q1))\n      .attr(\"y\", -indicator_box_height/2)\n      .attr(\"height\", indicator_box_height)\n      .attr(\"width\", x(q3) - x(q1))\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    this._median_line = this._quartile_box.append(\"line\")\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n      .attr(\"y1\", -indicator_box_height/2)\n      .attr(\"y2\", +indicator_box_height/2)\n      .attr(\"stroke\", indicator_stroke_colour)\n      .attr(\"stroke-width\", 1.5);\n\n  }\n\n  update_scale(data) {\n    let [, width,] = this.get_chart_parameters();\n    if (this.props.scale) {\n      let [min, max] = this.props.scale;\n      this._x_scale = d3.scaleLinear()\n        .domain([max, min])\n        .range([width, 0]);\n      return;\n    }\n    let [,,, min, max,] = this.calculate_important_values(data);\n    this._x_scale = d3.scaleLinear()\n      .domain([max, min])\n      .range([width, 0]);\n  }\n\n  update_line_with_ticks(data) {\n    let [,,, min, max,] = this.calculate_important_values(data),\n      x = this._x_scale,\n      x_min = x(min),\n      x_max = x(max);\n    const transition_tick = (tick, x) => {\n      tick.transition()\n        .duration(this.TRANSITION_TIME)\n        .attr(\"x1\", x)\n        .attr(\"x2\", x);\n    };\n    this.main_line.transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x_min)\n      .attr(\"x2\", x_max);\n    transition_tick(this.tick_1, x_min);\n    transition_tick(this.tick_2, x_max);\n  }\n\n  update_box(data) {\n    if (!this._quartile_box) {\n      return;\n    }\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n    let x = this._x_scale;\n    this._quartile_rect\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x\", x(q1))\n      .attr(\"width\", x(q3) - x(q1));\n    this._median_line\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n  }\n\n  refresh_chart() {\n    let data = this.data;\n    this.update_scale(data);\n    this.update_points_locations(data);\n    this.draw_points(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n    this.update_line_with_ticks(data);\n    this.update_box(data);\n  }\n\n  add_point(datum) {\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  is_invalid(datum) {\n    return !datum || (datum.value > AppConfiguration.MAX_LATENCY_PLOTTED);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.data.length === prevProps.data.length) {\n      this.refresh_chart();\n      return;\n    }\n    let datum = prevProps.data.slice(-1).pop();\n    if (this.is_invalid(datum)) {\n      return;\n    }\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.chart_component}/>\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}