{"version":3,"sources":["serviceWorker.js","components/latency_stats_component.js","components/latency_box_plot.js","components/latency_stage_report.js","components/measurement_callouts.js","components/latency_results_report.js","stages/stage.js","utilities/timer.js","tools/generic_latency_collector.js","tools/latency_collector_provider.js","tools/latency_candidates.js","stages/latency_measurement_stage.js","tools/download_measurement_collector.js","stages/downlink_measurement_stage.js","tools/upload_measurement_collector.js","stages/uplink_measurement_stage.js","pages/main_page.js","samples/guess_upload_sample.js","index.js","app_configuration.js","utilities/statistics_utilities.js","components/box_plot.js"],"names":["Boolean","window","location","hostname","match","LatencyStatsComponent","props","Row","style","fontSize","fontWeight","whiteSpace","Col","sm","this","min","median","max","q1","q3","jitter","Component","LatencyBoxPlot","LatencyStageReport","Card","Body","className","md","xs","marginTop","title","data","scale","box_plot_scale","tooltip_html","stats","MeasurementCallouts","textAlign","Object","keys","stage_data","map","k","i","stage","key","length","borderLeft","configuration","LatencyResultsReport","Stage","Timer","ms","Promise","resolve","setTimeout","GenericLatencyCollector","url","interval","interval_cb","done_cb","count","cancelled","fetch","then","res","text","entries","performance","getEntriesByName","perf","slice","pop","ttfb","responseStart","requestStart","AppConfiguration","IGNORE_TTFB_BELOW","clearResourceTimings","sleep","LatencyCollectorProvider","data_cb","PING_INTERVAL","LatencyMeasurementStage","data_callback","done_callback","NUM_MEASUREMENTS","collector","provide","start","DownloadMeasurementCollector","measurement_callback","controller","AbortController","size","signal","r","streams","measure_download","n","cancel","num_streams","Array","fill","_","req","get_http_fetch","total_start","Date","now","counter","total_counter","reset_counter","speed","convert_to_bps","requests","make_requests","a","console","log","reader","body","getReader","pump","read","done","value","all","rate_bps","abort","DownlinkMeasurementStage","bandwidth_callback","downloader","measurement","download_for_n_seconds","DOWNLOAD_DURATION","DOWNLOAD_NUM_STREAMS","download_speed","UploadMeasurementCollector","method","repeat","headers","response","this_repeats_n_times","threshold","last_bandwidth","bandwidth","measure_bandwidth","Math","abs","j","check","n_seconds","guess_upload_speed","guess_bandwidth_byteps","file_size","UplinkMeasurementStage","uploader","upload","UPLOAD_DURATION","UPLOAD_NUM_STREAMS","upload_speed","MainPage","BOX_PLOT_SCALE_DEFAULT","stages_configuration","name","page_title","state","test_running","test_title","current_stage_idx","stages","add_latency_to_current_stage","bind","advance_stage","downlink_measurement","uplink_measurement","start_test","curr_idx","setState","run","latency","MAX_LATENCY_PLOTTED","adjust_scale","current_stage","current_data","new_data","calculate_stats","sorted","d","sort","d3","StatisticsUtilities","calculate_important_values","toFixed","Container","Header","parseInt","Text","Button","variant","onClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","sorted_data","BoxPlot","TRANSITION_TIME","DOT_COLOUR","chart_component","React","createRef","height","width","margin","top","right","bottom","left","get_chart_parameters","svg","current","append","attr","_svg","update_scale","_points_container","add_tooltip","draw_points","add_line_with_ticks","add_quartile_box_if_it_doesnt_exist","_tooltip","selection","rel_pos","tooltip","component","mouseover","mousemove","e","relative_dist","html","eval","mouseleave","on","x","_x_scale","selectAll","enter","set_circle_attributes","transition","duration","mid_anchor_rel","middle_anchor","_middle_anchor","x_min","x_max","make_tic","at","main_line","tick_1","tick_2","_quartile_box","add_quartile_box","_quartile_rect","_median_line","domain","range","transition_tick","tick","update_points_locations","update_line_with_ticks","update_box","datum","push","refresh_chart","prevProps","prevState","snapshot","is_invalid","ref"],"mappings":"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","file":"static/js/main.354c6e5a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App_old is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nexport default class LatencyStatsComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <>\n        <Row style={{fontSize: 13, fontWeight: 'bold', whiteSpace: 'nowrap'}}>\n          <Col sm={6}>\n            min: {this.props.min}ms<br/>\n            median: {this.props.median}ms<br/>\n            max: {this.props.max}ms\n          </Col>\n          <Col sm={6}>\n            25%: {this.props.q1}ms<br/>\n            75%: {this.props.q3}ms<br/>\n            jitter: {this.props.jitter}ms\n          </Col>\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport BoxPlot from \"./box_plot\";\n\nexport default class LatencyBoxPlot extends Component {\n  render() {\n    return (\n      <BoxPlot\n        {...this.props}\n      />\n    );\n  }\n\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport LatencyStatsComponent from \"./latency_stats_component\";\nimport './latency_stage_report.scss';\nimport LatencyBoxPlot from \"./latency_box_plot\";\n\n\nexport default class LatencyStageReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className={\"WBBLatencyStageReport\"}>\n          <Row>\n            <Col md={2} xs={2}>\n              <h5 style={{marginTop: 15}}>{this.props.title}</h5>\n            </Col>\n            <Col md={7} xs={10}>\n              <LatencyBoxPlot\n                data={this.props.data}\n                scale={this.props.box_plot_scale}\n                tooltip_html={\"latency: ${d.value}</br>timestamp: ${d.time}\"}\n              />\n            </Col>\n            <Col md={3} xs={12}>\n              <LatencyStatsComponent\n                data={this.props.data}\n                {...this.props.stats}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nexport default class MeasurementCallouts extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <>\n        <Row style={{textAlign: 'center'}}>\n          {Object.keys(this.props.stage_data).map((k, i) => {\n            const stage = this.props.stage_data[k];\n            return (\n              <Col\n                key={k}\n                sm={12/this.props.stage_data.length}\n                style={ (i !== 0) ? {borderLeft: \"1px solid black\"}: {}}>\n                <div className=\"condition\">\n                  {stage.configuration.title}\n                </div>\n                <div className=\"latency\">\n                  {\n                    stage.stats &&\n                    stage.stats.median\n                  }\n                </div>\n              </Col>\n            )\n          })}\n        </Row>\n      </>\n    )\n  }\n}","import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport MeasurementCallouts from \"./measurement_callouts\";\n\n\nexport default class LatencyResultsReport extends Component {\n  render() {\n    return (\n      <>\n        <Card.Body className=\"WBBLatencySummary\">\n          <Row>\n            <Col sm={12} md={7}>\n              <h4>Latency Results</h4>\n              <p>Bufferbloat is measured by comparing the latency of an Internet connection when it is unloaded to when it is \"saturated.\"</p>\n            </Col>\n            <Col sm={12} md={5}>\n              <MeasurementCallouts\n                stage_data={this.props.stage_data}\n              />\n            </Col>\n          </Row>\n        </Card.Body>\n      </>\n    );\n  }\n}\n","export default class Stage {\n  async run() {\n\n  }\n}\n","export default class Timer {\n  static async sleep(ms) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    })\n  }\n}\n","import Timer from \"../utilities/timer\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class GenericLatencyCollector {\n  constructor(url, interval, interval_cb, done_cb, count) {\n    this.url = url;\n    this.interval = interval;\n    this.interval_cb = interval_cb;\n    this.done_cb = done_cb;\n    this.count = count;\n    this.cancelled = false;\n  }\n\n  async start() {\n    let i = 0;\n    while (i++ < this.count) {\n      await fetch(this.url).then(res => res.text());\n      let entries = performance.getEntriesByName(this.url);\n      let perf  = entries.slice(-1).pop();\n      let ttfb = perf.responseStart - perf.requestStart;\n      if (this.cancelled) {\n        return ;\n      }\n      if (ttfb < AppConfiguration.IGNORE_TTFB_BELOW) {\n        continue\n      }\n      this.interval_cb(ttfb);\n      performance.clearResourceTimings();\n      await Timer.sleep(this.interval)\n    }\n    if (this.done_cb) {\n      this.done_cb();\n    }\n  }\n\n  cancel() {\n    this.cancelled = true;\n  }\n}\n","import {AppConfiguration} from \"../app_configuration\";\nimport GenericLatencyCollector from \"./generic_latency_collector\";\nimport {main_candidate} from \"./latency_candidates\";\n\nexport default class LatencyCollectorProvider {\n  static provide(data_cb, done_cb, count) {\n    return new GenericLatencyCollector(\n      main_candidate,\n      AppConfiguration.PING_INTERVAL,\n      data_cb,\n      done_cb,\n      count\n    );\n  }\n}","let urls = [\n  \"https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2\",\n  \"https://fonts.gstatic.com/l/font?kit=KFOmCnqEu92Fr1Me4GZNCzcPK4I&skey=a0a0114a1dcab3ac&v=v20\",\n  \"https://speed.cloudflare.com/__down?bytes=0\"\n], main_candidate = urls[1];\n\nexport {main_candidate}\n","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\n\n\nexport default class LatencyMeasurementStage extends Stage {\n  NUM_MEASUREMENTS = 30;\n // NUM_MEASUREMENTS = 5;\n  constructor(data_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    super.run();\n    const collector = LatencyCollectorProvider\n      .provide(this.data_callback, this.done_callback, this.NUM_MEASUREMENTS);\n    await collector.start();\n  }\n}","import Timer from \"../utilities/timer\";\n\nexport default class DownloadMeasurementCollector {\n  constructor(measurement_callback, done_callback) {\n    this.measurement_callback = measurement_callback || (() => null);\n    this.done_callback = done_callback || (() => null);\n    this.controller = new AbortController();\n  }\n\n  get_http_fetch(size, i) {\n    let signal = this.controller.signal;\n    return fetch(`https://speed${i+1}.arshankhanifar.workers.dev/hi/down?bytes=${size}`, {signal});\n  }\n\n  convert_to_bps(r) {\n    return r*1000*8;\n  }\n\n  async download(size, streams) {\n    return this.measure_download(size, streams)\n  }\n\n  async download_for_n_seconds(n, streams) {\n    const MAX_DOWNLOAD_SIZE = 500 * 1e6;\n    setTimeout(() => {this.cancel()}, n * 1000);\n    return this.measure_download(MAX_DOWNLOAD_SIZE, streams);\n  }\n\n  make_requests(num_streams, size) {\n    return Array(num_streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map((req, i) => {\n        req.fetch = () => this.get_http_fetch(size, i);\n        return req;\n      })\n  }\n\n  async measure_download(size, streams) {\n    const window_size = 1e6,\n      total_start = Date.now();\n    let start = Date.now(),\n      counter = 0,\n      total_counter = 0;\n\n    const reset_counter = () => {\n      if (counter < window_size) {\n        return;\n      }\n      let speed = this.convert_to_bps(counter / (Date.now() - start));\n      this.measurement_callback(speed);\n      counter = 0;\n      start = Date.now();\n    };\n\n    let requests = this.make_requests(streams, size)\n      .map(async (req, i) => {\n        let res = null;\n        try {\n          res = await req.fetch();\n        } catch (e) {\n          console.log(`download request:${i} unsuccessful`, e);\n          return Promise.resolve();\n        }\n        const reader = res.body.getReader();\n        return new Promise(async resolve => {\n          try {\n            await pump();\n          } catch (err) {\n            resolve();\n          }\n          function pump() {\n            return reader.read().then(({ done, value }) => {\n              if (done) {\n                resolve();\n                return;\n              }\n              counter += value.length;\n              total_counter += value.length;\n              reset_counter();\n              return pump();\n            });\n          }\n        });\n      });\n    await Promise.all(requests);\n    let rate_bps = this.convert_to_bps(total_counter/(Date.now() - total_start));\n    this.done_callback(rate_bps);\n    return rate_bps;\n  }\n\n  cancel() {\n    this.controller.abort();\n  }\n}","import Stage from \"./stage\";\nimport DownloadMeasurementCollector from \"../tools/download_measurement_collector\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class DownlinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    const meas_callback = (measurement) => {\n        console.log(`realtime rate ${measurement/1e6}mbps`);\n    };\n    const downloader = new DownloadMeasurementCollector(meas_callback);\n    let download_speed = await downloader.download_for_n_seconds(\n      AppConfiguration.DOWNLOAD_DURATION,\n      AppConfiguration.DOWNLOAD_NUM_STREAMS\n    );\n    collector.cancel();\n    this.bandwidth_callback(download_speed);\n    this.done_callback();\n  }\n}","export default class UploadMeasurementCollector {\n\n  get_http_fetch(size, i) {\n    let url = `https://speed${i + 1}.arshankhanifar.workers.dev/hi/up`;\n    return fetch(`${url}`, {\n        method: 'POST',\n        body: '0'.repeat(size),\n        headers: { 'content-length': size }\n    });\n  }\n\n  async measure_bandwidth(i) {\n    let start = Date.now();\n    let response = await this.get_http_fetch(i, 1);\n    await response.text();\n    return (i/(Date.now() - start));\n  }\n\n  async guess_upload_speed() {\n    let this_repeats_n_times = async (n, threshold, last_bandwidth, size) => {\n      let bandwidth = null;\n      for (let i = 0; i < n; i++) {\n        bandwidth = await this.measure_bandwidth(size);\n        let relative_growth = Math.abs(bandwidth - last_bandwidth)/bandwidth;\n        if (relative_growth > threshold) {\n          return [false, bandwidth];\n        }\n      }\n      return [true, bandwidth];\n    };\n    let threshold = 0.2;\n    let last_bandwidth = 0;\n    for (let j = 1; j < 30; j++) {\n      let size = 1 << j;\n      let [check, bandwidth] = await this_repeats_n_times(3, threshold, last_bandwidth, size);\n      if (check) {\n        return bandwidth * 1e3; // Bytes per second\n      }\n      last_bandwidth = bandwidth;\n    }\n    return last_bandwidth;\n  }\n\n  async upload(n_seconds, streams) {\n    let guess_bandwidth_byteps = await this.guess_upload_speed();\n    console.log(\"upload bw guess\", guess_bandwidth_byteps * 8 / 1e6);\n    let file_size = n_seconds * guess_bandwidth_byteps / streams;\n    let start = Date.now();\n    let requests = Array(streams)\n      .fill(0)\n      .map(_ => { return {} })\n      .map((req, i) => {\n        req.fetch = () => this.get_http_fetch(file_size, i);\n        return req;\n      });\n    await Promise.all(requests.map(req=>req.fetch().then(res=>res.text())));\n    console.log(`total time took:${(Date.now() - start)/1000}`);\n    return ((file_size * streams * 1000 * 8)/(Date.now() - start));\n  }\n}","import Stage from \"./stage\";\nimport LatencyCollectorProvider from \"../tools/latency_collector_provider\";\nimport UploadMeasurementCollector from \"../tools/upload_measurement_collector\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class UplinkMeasurementStage extends Stage {\n  constructor(data_callback, bandwidth_callback, done_callback) {\n    super();\n    this.data_callback = data_callback;\n    this.bandwidth_callback = bandwidth_callback;\n    this.done_callback = done_callback;\n  }\n\n  async run() {\n    const MEASURE_LATENCY_FOREVER = 1e5;\n    super.run();\n    const collector = LatencyCollectorProvider.provide(this.data_callback, null, MEASURE_LATENCY_FOREVER);\n    collector.start();\n    let uploader = new UploadMeasurementCollector();\n    let upload_speed = await uploader.upload(AppConfiguration.UPLOAD_DURATION, AppConfiguration.UPLOAD_NUM_STREAMS);\n    collector.cancel();\n    this.bandwidth_callback(upload_speed);\n    this.done_callback();\n  }\n}","import * as d3 from 'd3';\nimport React, {Component} from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport '../components/component_styles.scss';\nimport LatencyStageReport from \"../components/latency_stage_report\";\nimport LatencyResultsReport from \"../components/latency_results_report\";\nimport {AppConfiguration} from \"../app_configuration\";\nimport LatencyMeasurementStage from \"../stages/latency_measurement_stage\";\nimport DownlinkMeasurementStage from \"../stages/downlink_measurement_stage\";\nimport UplinkMeasurementStage from \"../stages/uplink_measurement_stage\";\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\n\n\nexport default class MainPage extends Component {\n  BOX_PLOT_SCALE_DEFAULT = [4, 10];\n  constructor(props) {\n    super(props);\n    this.stages_configuration = [\n      {\n        name: \"unloaded\",\n        title: \"Unloaded\",\n        page_title: \"Measuring Unloaded Latency\"\n      },\n      {\n        name: \"down\",\n        title: \"↓ Saturated\",\n        page_title: \"Measuring Latency With Downlink Saturated\"\n      },\n      {\n        name: \"up\",\n        title: \"↑ Saturated\",\n        page_title: \"Measuring Latency With Uplink Saturated\"\n      }\n    ];\n    this.state = {\n      test_running: false,\n      test_title: 'Bufferbloat Test',\n      current_stage_idx: -1,\n      stages: {},\n      box_plot_scale: this.BOX_PLOT_SCALE_DEFAULT\n    };\n    this.stages = [\n      new LatencyMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new DownlinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.downlink_measurement.bind(this),\n        this.advance_stage.bind(this)\n      ),\n      new UplinkMeasurementStage(\n        this.add_latency_to_current_stage.bind(this),\n        this.uplink_measurement.bind(),\n        this.advance_stage.bind(this)\n      )\n    ];\n  }\n\n  downlink_measurement(bandwidth) {\n    console.log(`avg download: ${bandwidth/1e6}mbps`);\n  }\n\n  uplink_measurement(bandwidth) {\n    console.log(`avg upload: ${bandwidth/1e6}mbps`);\n  }\n\n  componentDidMount() {\n    //this.debug();\n  }\n\n  debug() {\n    this.start_test().then(()=> {});\n  }\n\n  async advance_stage() {\n    let curr_idx = this.state.current_stage_idx + 1;\n    if (curr_idx >= this.stages.length) {\n      console.log(\"boom done stages\");\n      return;\n    }\n    await this.setState({\n      current_stage_idx: curr_idx,\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          configuration: this.stages_configuration[curr_idx],\n          data: []\n        }\n      },\n      test_title: `${curr_idx + 1}/${this.stages_configuration.length} ${this.stages_configuration[curr_idx].page_title}`\n    });\n    console.log(this.state.stages);\n    this.stages[curr_idx].run();\n  }\n\n  async start_test() {\n    await this.setState({\n      test_running: true,\n    });\n    this.advance_stage();\n  }\n\n  adjust_scale(latency) {\n    if (latency > AppConfiguration.MAX_LATENCY_PLOTTED) {\n      return;\n    }\n    if (latency > this.state.box_plot_scale[1]) {\n      this.setState({\n        box_plot_scale: [0, latency]\n      })\n    }\n  }\n\n  add_latency_to_current_stage(latency) {\n    this.adjust_scale(latency);\n    let curr_idx = this.state.current_stage_idx,\n      current_stage = this.state.stages[curr_idx],\n      current_data = current_stage.data || [],\n      new_data = [...current_data, {value: latency}];\n    this.setState({\n      stages: {\n        ...this.state.stages,\n        [curr_idx]: {\n          ...current_stage,\n          data: new_data,\n          stats: {\n            ...this.calculate_stats(new_data)\n          }\n        }\n      }\n    })\n  }\n\n  calculate_stats(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    let [q1, q3, median, min, max, std] = StatisticsUtilities\n      .calculate_important_values(sorted)\n      .map(d => d.toFixed(1));\n    return {\n      min: min,\n      max: max,\n      q1: q1,\n      q3: q3,\n      median: median,\n      jitter: std\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <p>version: 1.05</p>\n        <Col sm={12}>\n          <Container>\n            <Row style={{ marginTop: 40 }}>\n              <Col sm={12}>\n                <Card className=\"WBBCard WBBMainTestCard\">\n                  <Card.Header>\n                    <h2>{this.state.test_title}</h2>\n                  </Card.Header>\n                  { !this.state.test_running ? (\n                    <Card.Body>\n                      <Card.Text>\n                        Click below to start running the test.\n                      </Card.Text>\n                      <Button variant=\"primary\" onClick={this.start_test.bind(this)}>Start Test</Button>\n                    </Card.Body>\n                  ) : (\n                    <Card.Body>\n                      <LatencyResultsReport\n                        stage_data={this.state.stages}\n                      />\n                      {\n                        Object.keys(this.state.stages).map((i) => {\n                          let stage = this.state.stages[i];\n                          return (\n                            <div key={stage.configuration.name}>\n                              {\n                                (parseInt(i) !== 0) ?\n                                  (<Col sm={12}>\n                                    <div className={\"spacer\"}/>\n                                  </Col>)\n                                  : (<></>)\n                              }\n                              <LatencyStageReport\n                                box_plot_scale={this.state.box_plot_scale}\n                                title={stage.configuration.title}\n                                key={stage.configuration.name}\n                                data={stage.data}\n                                stats={stage.stats}\n                              />\n                            </div>\n                          )\n                        })\n                      }\n                    </Card.Body>\n                  )}\n                </Card>\n              </Col>\n            </Row>\n\n          </Container>\n        </Col>\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport UploadMeasurementCollector from \"../tools/upload_measurement_collector\";\n\n\nexport default class GuessUploadSample extends Component {\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand href=\"#\">KNP</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            Hello, World!\n          </Row>\n          <Button onClick={this.upload.bind(this)}>Upload</Button>\n        </Container>\n      </>\n    );\n  }\n\n  async upload() {\n    let bandwidth = await new UploadMeasurementCollector().upload(5, 8);\n    console.log(`measured bandwidth: ${bandwidth * 8 / 1e3}`);\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from \"./pages/main_page\";\nimport GuessUploadSample from \"./samples/guess_upload_sample\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const AppConfiguration = {\n  PING_INTERVAL: 100,\n  MAX_LATENCY_PLOTTED: 200,\n  DOWNLOAD_NUM_STREAMS: 10,\n  UPLOAD_NUM_STREAMS: 8,\n  IGNORE_TTFB_BELOW: 3,\n  DOWNLOAD_DURATION: 10,\n  UPLOAD_DURATION: 8,\n};","import * as d3 from 'd3';\n\n\nexport default class StatisticsUtilities {\n  static calculate_important_values(sorted_data) {\n    let q1 = d3.quantile(sorted_data,.25),\n      q3 = d3.quantile(sorted_data,.75),\n      median = d3.quantile(sorted_data,.5),\n      min = sorted_data[0],\n      max = sorted_data[sorted_data.length - 1],\n      std = d3.deviation(sorted_data) || 0;\n    return [q1, q3, median, min, max, std];\n  }\n}","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport StatisticsUtilities from \"../utilities/statistics_utilities\";\nimport {AppConfiguration} from \"../app_configuration\";\n\n\nexport default class BoxPlot extends Component {\n  TRANSITION_TIME = 300;\n  DOT_COLOUR = \"#4a90e2\";\n\n  constructor(props) {\n    super(props);\n    this.chart_component = React.createRef();\n    this.data = props.data || [];\n    this.height = props.height || 80;\n    this.width = props.width || 460;\n    this.scale = props.scale;\n    // eslint-disable-next-line no-template-curly-in-string\n    this.tooltip_html = this.props.tooltip_html || 'value: ${d.value}';\n\n  }\n\n  calculate_important_values(data) {\n    let sorted = [...data.map(d => d.value)].sort(d3.ascending);\n    return StatisticsUtilities.calculate_important_values(sorted);\n  }\n\n  get_chart_parameters() {\n    const margin = {top: 10, right: 10, bottom: 10, left: 10},\n      width = this.width - margin.left - margin.right,\n      height = this.height - margin.top - margin.bottom,\n      point_position_relative_to_top = 3/4 * height,\n      middle_anchor_relative_to_top = 1/4 * height;\n\n    return [margin, width, height, point_position_relative_to_top, middle_anchor_relative_to_top];\n  }\n\n  componentDidMount() {\n    let [margin, width, height] = this.get_chart_parameters();\n\n    let svg = d3.select(this.chart_component.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    this._svg = svg;\n    let data = this.data;\n    this.update_scale(data);\n\n    this._points_container = svg.append(\"g\")\n      .attr(\"id\", \"data_points\");\n\n    this.add_tooltip();\n    this.draw_points(data);\n    this.add_line_with_ticks(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n  }\n\n  add_tooltip() {\n    this._tooltip = d3.select(this.chart_component.current)\n      .append(\"div\")\n      .style(\"opacity\", 0)\n      .attr(\"class\", \"tooltip\")\n      .style(\"border\", \"solid\")\n      .style(\"background-color\", \"white\")\n      .style(\"border-width\", \"2px\")\n      .style(\"border-radius\", \"5px\")\n      .style(\"padding\", \"5px\");\n  }\n\n  set_circle_attributes(selection) {\n    let [,,, rel_pos] = this.get_chart_parameters();\n    let tooltip = this._tooltip;\n    let component = this;\n\n    let mouseover = function(d) {\n      tooltip.style(\"opacity\", 1);\n      d3.select(this)\n        .style(\"stroke\", \"black\")\n        .style(\"opacity\", 1);\n    };\n\n    let mousemove = function(e, d) {\n      let relative_dist = d3.pointer(e, this);\n      tooltip.html(eval(\"`\" + component.tooltip_html + \"`\"))\n        .style(\"left\", (relative_dist[0]) + \"px\")\n        .style(\"top\", (relative_dist[1]) + rel_pos + \"px\");\n    };\n\n    let mouseleave = function(d) {\n      tooltip\n        .style(\"opacity\", 0);\n      d3.select(this)\n        .style(\"stroke\", \"none\")\n        .style(\"opacity\", 0.8);\n    };\n\n    selection.attr(\"cy\", () => rel_pos)\n      .attr(\"r\", 3)\n      .attr(\"fill\", this.DOT_COLOUR)\n      .on(\"mouseover\", mouseover)\n      .on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave);\n  }\n\n  draw_points(data) {\n    let x = this._x_scale;\n    let selection = this._points_container\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) => x(d.value));\n    this.set_circle_attributes(selection);\n  }\n\n  update_points_locations(data) {\n    let circles = this._points_container\n      .selectAll(\"circle\")\n      .data(data);\n\n    circles\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"cx\", d => this._x_scale(d.value));\n  }\n\n  add_line_with_ticks(data) {\n    let indicator_tick_height = 10,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale,\n      svg = this._svg;\n\n    let [,,, min, max,] = this.calculate_important_values(data);\n    let [, width,,, mid_anchor_rel] = this.get_chart_parameters();\n\n    let middle_anchor = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + mid_anchor_rel + \")\");\n\n    this._middle_anchor = middle_anchor;\n\n    let x_min = x(min) || 0,\n        x_max = x(max) || width;\n\n    this.main_line = middle_anchor.append(\"line\")\n      .attr(\"x1\", x_min)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", x_max)\n      .attr(\"y2\", 0)\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    function make_tic(at) {\n      return middle_anchor.append(\"line\")\n        .attr(\"x1\", at)\n        .attr(\"y1\", -indicator_tick_height/2)\n        .attr(\"x2\", at)\n        .attr(\"y2\", +indicator_tick_height/2)\n        .attr(\"stroke\", indicator_stroke_colour);\n    }\n\n    this.tick_1 = make_tic(x_min);\n    this.tick_2 = make_tic(x_max);\n  }\n\n  add_quartile_box_if_it_doesnt_exist(data) {\n    if (this._quartile_box || data.length < 5) {\n      return\n    }\n    this.add_quartile_box(data);\n  }\n\n  add_quartile_box(data) {\n    let indicator_box_height = 20,\n      indicator_stroke_colour = '#979797',\n      x = this._x_scale;\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n\n    this._quartile_box =  this._middle_anchor\n      .append(\"g\")\n      .attr(\"id\", \"quartile_box\");\n\n    this._quartile_rect = this._quartile_box.append(\"rect\")\n      .attr(\"x\", x(q1))\n      .attr(\"y\", -indicator_box_height/2)\n      .attr(\"height\", indicator_box_height)\n      .attr(\"width\", x(q3) - x(q1))\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", indicator_stroke_colour);\n\n    this._median_line = this._quartile_box.append(\"line\")\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n      .attr(\"y1\", -indicator_box_height/2)\n      .attr(\"y2\", +indicator_box_height/2)\n      .attr(\"stroke\", indicator_stroke_colour)\n      .attr(\"stroke-width\", 1.5);\n\n  }\n\n  update_scale(data) {\n    let [, width,] = this.get_chart_parameters();\n    if (this.props.scale) {\n      let [min, max] = this.props.scale;\n      this._x_scale = d3.scaleLinear()\n        .domain([max, min])\n        .range([width, 0]);\n      return;\n    }\n    let [,,, min, max,] = this.calculate_important_values(data);\n    this._x_scale = d3.scaleLinear()\n      .domain([max, min])\n      .range([width, 0]);\n  }\n\n  update_line_with_ticks(data) {\n    let [,,, min, max,] = this.calculate_important_values(data),\n      x = this._x_scale,\n      x_min = x(min),\n      x_max = x(max);\n    const transition_tick = (tick, x) => {\n      tick.transition()\n        .duration(this.TRANSITION_TIME)\n        .attr(\"x1\", x)\n        .attr(\"x2\", x);\n    };\n    this.main_line.transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x_min)\n      .attr(\"x2\", x_max);\n    transition_tick(this.tick_1, x_min);\n    transition_tick(this.tick_2, x_max);\n  }\n\n  update_box(data) {\n    if (!this._quartile_box) {\n      return;\n    }\n    let [q1, q3, median,,,] = this.calculate_important_values(data);\n    let x = this._x_scale;\n    this._quartile_rect\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x\", x(q1))\n      .attr(\"width\", x(q3) - x(q1));\n    this._median_line\n      .transition()\n      .duration(this.TRANSITION_TIME)\n      .attr(\"x1\", x(median))\n      .attr(\"x2\", x(median))\n  }\n\n  refresh_chart() {\n    let data = this.data;\n    this.update_scale(data);\n    this.update_points_locations(data);\n    this.draw_points(data);\n    this.add_quartile_box_if_it_doesnt_exist(data);\n    this.update_line_with_ticks(data);\n    this.update_box(data);\n  }\n\n  add_point(datum) {\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  is_invalid(datum) {\n    return !datum || (datum.value > AppConfiguration.MAX_LATENCY_PLOTTED);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.data.length === prevProps.data.length) {\n      this.refresh_chart();\n      return;\n    }\n    let datum = prevProps.data.slice(-1).pop();\n    if (this.is_invalid(datum)) {\n      return;\n    }\n    this.data.push(datum);\n    this.refresh_chart();\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.chart_component}/>\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}